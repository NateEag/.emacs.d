;;; Quickstart file to activate all packages at startup  -*- lexical-binding:t -*-
;; ¡¡ This file is autogenerated by `package-quickstart-refresh', DO NOT EDIT !!

(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/zoutline-20220102.835/zoutline-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/zoutline-20220102.835/zoutline-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/zoutline-20220102.835/zoutline-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "zoutline" '("zo-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/yasnippet-20200604.246/yasnippet-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/yasnippet-20200604.246/yasnippet-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/yasnippet-20200604.246/yasnippet-autoloads.el") (car load-path))))



(autoload 'yas-minor-mode "yasnippet" "\
Toggle YASnippet mode.

If called interactively, enable Yas minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When YASnippet mode is enabled, `yas-expand', normally bound to
the TAB key, expands snippets of code depending on the major
mode.

With no argument, this command toggles the mode.
positive prefix argument turns on the mode.
Negative prefix argument turns off the mode.

Key bindings:
\\{yas-minor-mode-map}

\(fn &optional ARG)" t nil)

(put 'yas-global-mode 'globalized-minor-mode t)

(defvar yas-global-mode nil "\
Non-nil if Yas-Global mode is enabled.
See the `yas-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `yas-global-mode'.")

(custom-autoload 'yas-global-mode "yasnippet" nil)

(autoload 'yas-global-mode "yasnippet" "\
Toggle Yas minor mode in all buffers.
With prefix ARG, enable Yas-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Yas minor mode is enabled in all buffers where
`yas-minor-mode-on' would do it.
See `yas-minor-mode' for more information on Yas minor mode.

\(fn &optional ARG)" t nil)
(autoload 'snippet-mode "yasnippet" "A mode for editing yasnippets" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "yasnippet" '("help-snippet-def" "snippet-mode-map" "yas")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/yaml-mode-20220104.1503/yaml-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/yaml-mode-20220104.1503/yaml-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/yaml-mode-20220104.1503/yaml-mode-autoloads.el") (car load-path))))



(let ((loads (get 'yaml 'custom-loads))) (if (member '"yaml-mode" loads) nil (put 'yaml 'custom-loads (cons '"yaml-mode" loads))))

(autoload 'yaml-mode "yaml-mode" "\
Simple mode to edit YAML.

\\{yaml-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.\\(e?ya?\\|ra\\)ml\\'" . yaml-mode))

(add-to-list 'magic-mode-alist '("^%YAML\\s-+[0-9]+\\.[0-9]+\\(\\s-+#\\|\\s-*$\\)" . yaml-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "yaml-mode" '("yaml-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/yaml-20220713.358/yaml-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/yaml-20220713.358/yaml-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/yaml-20220713.358/yaml-autoloads.el") (car load-path))))



(register-definition-prefixes "yaml" '("yaml-"))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/xterm-color-20200605.2017/xterm-color-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/xterm-color-20200605.2017/xterm-color-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/xterm-color-20200605.2017/xterm-color-autoloads.el") (car load-path))))



(autoload 'xterm-color-filter-strip "xterm-color" "\
Translate ANSI color sequences in STRING into text properties.
Return new STRING with text properties applied.

In order to get maximum performance, this function strips text properties
if they are present in STRING.

\(fn STRING)" nil nil)

(autoload 'xterm-color-filter "xterm-color" "\
Translate ANSI color sequences in STRING into text properties.
Return new STRING with text properties applied.

This function checks if `xterm-color-preserve-properties' is non-nil
and only calls `xterm-color-filter-strip' on substrings that do not
have text properties applied (passing through the rest unmodified).
Preserving properties in this fashion is not very robust as there may
be situations where text properties are applied on ANSI data, which
will desync the state machine.

Preserving properties works ok with and is really meant for eshell.

This can be inserted into `comint-preoutput-filter-functions'.

\(fn STRING)" nil nil)

(autoload 'xterm-color-256 "xterm-color" "\


\(fn COLOR)" nil nil)

(autoload 'xterm-color-colorize-buffer "xterm-color" "\
Apply `xterm-color-filter' to current buffer, and replace its contents.
Colors are applied using 'face, unless font-lock-mode is active, in
which case 'font-lock-face is used. Operation with font-lock mode active
is not recommended.

If USE-OVERLAYS is non-nil, colors are applied to the buffer using overlays
instead of text properties. A C-u prefix arg causes overlays to be used.

\(fn &optional USE-OVERLAYS)" t nil)

(autoload 'xterm-color-clear-cache "xterm-color" "\
Clear xterm color face attribute cache.
You may want to call this if you change `xterm-color-names' or
`xterm-color-names-bright' at runtime and you want to see the changes
take place in a pre-existing buffer that has had xterm-color initialized.

Since the cache is buffer-local and created on-demand when needed, this has no
effect when called from a buffer that does not have a cache." t nil)

(autoload 'xterm-color-test "xterm-color" "\
Create, display and render a new buffer containing ANSI control sequences." t nil)

(autoload 'xterm-color-test-raw "xterm-color" "\
Create and display a new buffer containing ANSI SGR control sequences.
ANSI sequences are not processed. One can use a different Emacs package,
such as ansi-color.el to do so. This is really meant to be used for easy
comparisons/benchmarks with libraries that offer similar functionality." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "xterm-color" '("+xterm-color--table-256+" "xterm-color-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/xref-1.4.1/xref-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/xref-1.4.1/xref-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/xref-1.4.1/xref-autoloads.el") (car load-path))))



(autoload 'xref-find-backend "xref" nil nil nil)

(define-obsolete-function-alias 'xref-pop-marker-stack #'xref-go-back "29.1")

(autoload 'xref-go-back "xref" "\
Go back to the previous position in xref history.
To undo, use \\[xref-go-forward]." t nil)

(autoload 'xref-go-forward "xref" "\
Got to the point where a previous \\[xref-go-back] was invoked." t nil)

(autoload 'xref-marker-stack-empty-p "xref" "\
Whether the xref back-history is empty." nil nil)

(autoload 'xref-forward-history-empty-p "xref" "\
Whether the xref forward-history is empty." nil nil)

(autoload 'xref-show-xrefs "xref" "\
Display some Xref values produced by FETCHER using DISPLAY-ACTION.
The meanings of both arguments are the same as documented in
`xref-show-xrefs-function'.

\(fn FETCHER DISPLAY-ACTION)" nil nil)

(autoload 'xref-find-definitions "xref" "\
Find the definition of the identifier at point.
With prefix argument or when there's no identifier at point,
prompt for it.

If sufficient information is available to determine a unique
definition for IDENTIFIER, display it in the selected window.
Otherwise, display the list of the possible definitions in a
buffer where the user can select from the list.

Use \\[xref-go-back] to return back to where you invoked this command.

\(fn IDENTIFIER)" t nil)

(autoload 'xref-find-definitions-other-window "xref" "\
Like `xref-find-definitions' but switch to the other window.

\(fn IDENTIFIER)" t nil)

(autoload 'xref-find-definitions-other-frame "xref" "\
Like `xref-find-definitions' but switch to the other frame.

\(fn IDENTIFIER)" t nil)

(autoload 'xref-find-references "xref" "\
Find references to the identifier at point.
This command might prompt for the identifier as needed, perhaps
offering the symbol at point as the default.
With prefix argument, or if `xref-prompt-for-identifier' is t,
always prompt for the identifier.  If `xref-prompt-for-identifier'
is nil, prompt only if there's no usable symbol at point.

\(fn IDENTIFIER)" t nil)

(autoload 'xref-find-definitions-at-mouse "xref" "\
Find the definition of identifier at or around mouse click.
This command is intended to be bound to a mouse event.

\(fn EVENT)" t nil)

(autoload 'xref-find-references-at-mouse "xref" "\
Find references to the identifier at or around mouse click.
This command is intended to be bound to a mouse event.

\(fn EVENT)" t nil)

(autoload 'xref-find-apropos "xref" "\
Find all meaningful symbols that match PATTERN.
The argument has the same meaning as in `apropos'.
See `tags-apropos-additional-actions' for how to augment the
output of this command when the backend is etags.

\(fn PATTERN)" t nil)
 (define-key esc-map "." #'xref-find-definitions)
 (define-key esc-map "," #'xref-go-back)
 (define-key esc-map [?\C-,] #'xref-go-forward)
 (define-key esc-map "?" #'xref-find-references)
 (define-key esc-map [?\C-.] #'xref-find-apropos)
 (define-key ctl-x-4-map "." #'xref-find-definitions-other-window)
 (define-key ctl-x-5-map "." #'xref-find-definitions-other-frame)

(autoload 'xref-references-in-directory "xref" "\
Find all references to SYMBOL in directory DIR.
Return a list of xref values.

This function uses the Semantic Symbol Reference API, see
`semantic-symref-tool-alist' for details on which tools are used,
and when.

\(fn SYMBOL DIR)" nil nil)

(autoload 'xref-matches-in-directory "xref" "\
Find all matches for REGEXP in directory DIR.
Return a list of xref values.
Only files matching some of FILES and none of IGNORES are searched.
FILES is a string with glob patterns separated by spaces.
IGNORES is a list of glob patterns for files to ignore.

\(fn REGEXP FILES DIR IGNORES)" nil nil)

(autoload 'xref-matches-in-files "xref" "\
Find all matches for REGEXP in FILES.
Return a list of xref values.
FILES must be a list of absolute file names.

See `xref-search-program' and `xref-search-program-alist' for how
to control which program to use when looking for matches.

\(fn REGEXP FILES)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "xref" '("xref-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/visual-fill-column-20220519.1959/visual-fill-column-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/visual-fill-column-20220519.1959/visual-fill-column-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/visual-fill-column-20220519.1959/visual-fill-column-autoloads.el") (car load-path))))



(autoload 'visual-fill-column-mode "visual-fill-column" "\
Wrap lines according to `fill-column' in `visual-line-mode'.

This is a minor mode.  If called interactively, toggle the
`Visual-Fill-Column mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `visual-fill-column-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(put 'global-visual-fill-column-mode 'globalized-minor-mode t)

(defvar global-visual-fill-column-mode nil "\
Non-nil if Global Visual-Fill-Column mode is enabled.
See the `global-visual-fill-column-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-visual-fill-column-mode'.")

(custom-autoload 'global-visual-fill-column-mode "visual-fill-column" nil)

(autoload 'global-visual-fill-column-mode "visual-fill-column" "\
Toggle Visual-Fill-Column mode in all buffers.
With prefix ARG, enable Global Visual-Fill-Column mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Visual-Fill-Column mode is enabled in all buffers where
`turn-on-visual-fill-column-mode' would do it.

See `visual-fill-column-mode' for more information on Visual-Fill-Column mode.

\(fn &optional ARG)" t nil)

(autoload 'visual-fill-column-split-window-sensibly "visual-fill-column" "\
Split WINDOW sensibly, unsetting its margins first.
This function unsets the window margins and calls
`split-window-sensibly'.

By default, `split-window-sensibly' does not split a window in
two side-by-side windows if it has wide margins, even if there is
enough space for a vertical split.  This function is used as the
value of `split-window-preferred-function' to allow
`display-buffer' to split such windows.

\(fn &optional WINDOW)" nil nil)

(register-definition-prefixes "visual-fill-column" '("turn-on-visual-fill-column-mode" "visual-fill-column-"))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/writeroom-mode-20220426.2046/writeroom-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/writeroom-mode-20220426.2046/writeroom-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/writeroom-mode-20220426.2046/writeroom-mode-autoloads.el") (car load-path))))



(autoload 'writeroom-mode "writeroom-mode" "\
Minor mode for distraction-free writing.

This is a minor mode.  If called interactively, toggle the
`Writeroom mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `writeroom-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(put 'global-writeroom-mode 'globalized-minor-mode t)

(defvar global-writeroom-mode nil "\
Non-nil if Global Writeroom mode is enabled.
See the `global-writeroom-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-writeroom-mode'.")

(custom-autoload 'global-writeroom-mode "writeroom-mode" nil)

(autoload 'global-writeroom-mode "writeroom-mode" "\
Toggle Writeroom mode in all buffers.
With prefix ARG, enable Global Writeroom mode if ARG is positive; otherwise,
disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Writeroom mode is enabled in all buffers where `turn-on-writeroom-mode' would
do it.

See `writeroom-mode' for more information on Writeroom mode.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "writeroom-mode" '("alpha" "bottom-divider-width" "define-writeroom-global-effect" "fullscreen" "internal-border-width" "menu-bar-lines" "sticky" "tool-bar-lines" "turn-on-writeroom-mode" "vertical-scroll-bars" "writeroom-"))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/with-shell-interpreter-20200828.1217/with-shell-interpreter-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/with-shell-interpreter-20200828.1217/with-shell-interpreter-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/with-shell-interpreter-20200828.1217/with-shell-interpreter-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "with-shell-interpreter" '("with-shell-interpreter")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/compat-28.1.1.3/compat-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/compat-28.1.1.3/compat-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/compat-28.1.1.3/compat-autoloads.el") (car load-path))))



(register-definition-prefixes "compat-help" '("compat---describe"))



(register-definition-prefixes "compat-macs" '("compat-"))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/with-editor-20220608.1017/with-editor-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/with-editor-20220608.1017/with-editor-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/with-editor-20220608.1017/with-editor-autoloads.el") (car load-path))))



aautoload 'with-editor-export-editor "with-editor" "\
Teach subsequent commands to use current Emacs instance as editor.

Set and export the environment variable ENVVAR, by default
\"EDITOR\".  The value is automatically generated to teach
commands to use the current Emacs instance as \"the editor\".

This works in `shell-mode', `term-mode', `eshell-mode' and
`vterm'.

\(fn &optional (ENVVAR \"EDITOR\"))" t nil)

(autoload 'with-editor-export-git-editor "with-editor" "\
Like `with-editor-export-editor' but always set `$GIT_EDITOR'." t nil)

(autoload 'with-editor-export-hg-editor "with-editor" "\
Like `with-editor-export-editor' but always set `$HG_EDITOR'." t nil)

(defvar shell-command-with-editor-mode nil "\
Non-nil if Shell-Command-With-Editor mode is enabled.
See the `shell-command-with-editor-mode' command
for a description of this minor mode.")

(custom-autoload 'shell-command-with-editor-mode "with-editor" nil)

(autoload 'shell-command-with-editor-mode "with-editor" "\
Teach `shell-command' to use current Emacs instance as editor.

This is a minor mode.  If called interactively, toggle the
`Shell-Command-With-Editor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='shell-command-with-editor-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

Teach `shell-command', and all commands that ultimately call that
command, to use the current Emacs instance as editor by executing
\"EDITOR=CLIENT COMMAND&\" instead of just \"COMMAND&\".

CLIENT is automatically generated; EDITOR=CLIENT instructs
COMMAND to use to the current Emacs instance as \"the editor\",
assuming no other variable overrides the effect of \"$EDITOR\".
CLIENT may be the path to an appropriate emacsclient executable
with arguments, or a script which also works over Tramp.

Alternatively you can use the `with-editor-async-shell-command',
which also allows the use of another variable instead of
\"EDITOR\".

\(fn &optional ARG)" t nil)

(autoload 'with-editor-async-shell-command "with-editor" "\
Like `async-shell-command' but with `$EDITOR' set.

Execute string \"ENVVAR=CLIENT COMMAND\" in an inferior shell;
display output, if any.  With a prefix argument prompt for an
environment variable, otherwise the default \"EDITOR\" variable
is used.  With a negative prefix argument additionally insert
the COMMAND's output at point.

CLIENT is automatically generated; ENVVAR=CLIENT instructs
COMMAND to use to the current Emacs instance as \"the editor\",
assuming it respects ENVVAR as an \"EDITOR\"-like variable.
CLIENT may be the path to an appropriate emacsclient executable
with arguments, or a script which also works over Tramp.

Also see `async-shell-command' and `shell-command'.

\(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER ENVVAR)" t nil)

(autoload 'with-editor-shell-command "with-editor" "\
Like `shell-command' or `with-editor-async-shell-command'.
If COMMAND ends with \"&\" behave like the latter,
else like the former.

\(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER ENVVAR)" t nil)

(register-definition-prefixes "with-editor" '("server-" "shell-command--shell-command-with-editor-mode" "start-file-process--with-editor-process-filter" "with-editor"))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/websocket-20210110.17/websocket-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/websocket-20210110.17/websocket-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/websocket-20210110.17/websocket-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "websocket" '("websocket-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/web-mode-20220615.602/web-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/web-mode-20220615.602/web-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/web-mode-20220615.602/web-mode-autoloads.el") (car load-path))))



(autoload 'web-mode "web-mode" "\
Major mode for editing web templates.

\(fn)" t nil)

(register-definition-prefixes "web-mode" '("web-mode-"))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/web-mode-edit-element-20190531.852/web-mode-edit-element-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/web-mode-edit-element-20190531.852/web-mode-edit-element-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/web-mode-edit-element-20190531.852/web-mode-edit-element-autoloads.el") (car load-path))))



(autoload 'web-mode-edit-element-minor-mode "web-mode-edit-element" "\
Minor mode to provide key-bindings for web-mode-edit-element functions

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "web-mode-edit-element" '("web-mode-edit-element-minor-mode-map")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "web-mode-edit-element-attributes" '("web-mode-edit-element-attributes-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "web-mode-edit-element-elements" '("web-mode-edit-element-elements-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "web-mode-edit-element-utils" '("web-mode-edit-element-utils-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/web-completion-data-20160318.848/web-completion-data-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/web-completion-data-20160318.848/web-completion-data-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/web-completion-data-20160318.848/web-completion-data-autoloads.el") (car load-path))))



)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/vterm-20220613.1614/vterm-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/vterm-20220613.1614/vterm-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/vterm-20220613.1614/vterm-autoloads.el") (car load-path))))



(autoload 'vterm-module-compile "vterm" "\
Compile vterm-module." t nil)

(autoload 'vterm--bookmark-handler "vterm" "\
Handler to restore a vterm bookmark BMK.

If a vterm buffer of the same name does not exist, the function will create a
new vterm buffer of the name. It also checks the current directory and sets
it to the bookmarked directory if needed.

\(fn BMK)" nil nil)

(autoload 'vterm-next-error-function "vterm" "\
Advance to the next error message and visit the file where the error was.
This is the value of `next-error-function' in Compilation
buffers.  Prefix arg N says how many error messages to move
forwards (or backwards, if negative).

Optional argument RESET clears all the errors.

\(fn N &optional RESET)" t nil)

(autoload 'vterm "vterm" "\
Create an interactive Vterm buffer.
Start a new Vterm session, or switch to an already active
session.  Return the buffer selected (or created).

With a nonnumeric prefix arg, create a new session.

With a string prefix arg, create a new session with arg as buffer name.

With a numeric prefix arg (as in `C-u 42 M-x vterm RET'), switch
to the session with that number, or create it if it doesn't
already exist.

The buffer name used for Vterm sessions is determined by the
value of `vterm-buffer-name'.

\(fn &optional ARG)" t nil)

(autoload 'vterm-other-window "vterm" "\
Create an interactive Vterm buffer in another window.
Start a new Vterm session, or switch to an already active
session.  Return the buffer selected (or created).

With a nonnumeric prefix arg, create a new session.

With a string prefix arg, create a new session with arg as buffer name.

With a numeric prefix arg (as in `C-u 42 M-x vterm RET'), switch
to the session with that number, or create it if it doesn't
already exist.

The buffer name used for Vterm sessions is determined by the
value of `vterm-buffer-name'.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "vterm" '("vterm-"))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/dash-20210609.1330/dash-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/dash-20210609.1330/dash-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/dash-20210609.1330/dash-autoloads.el") (car load-path))))



(autoload 'dash-fontify-mode "dash" "\
Toggle fontification of Dash special variables.

If called interactively, enable Dash-Fontify mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Dash-Fontify mode is a buffer-local minor mode intended for Emacs
Lisp buffers.  Enabling it causes the special variables bound in
anaphoric Dash macros to be fontified.  These anaphoras include
`it', `it-index', `acc', and `other'.  In older Emacs versions
which do not dynamically detect macros, Dash-Fontify mode
additionally fontifies Dash macro calls.

See also `dash-fontify-mode-lighter' and
`global-dash-fontify-mode'.

\(fn &optional ARG)" t nil)

(put 'global-dash-fontify-mode 'globalized-minor-mode t)

(defvar global-dash-fontify-mode nil "\
Non-nil if Global Dash-Fontify mode is enabled.
See the `global-dash-fontify-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-dash-fontify-mode'.")

(custom-autoload 'global-dash-fontify-mode "dash" nil)

(autoload 'global-dash-fontify-mode "dash" "\
Toggle Dash-Fontify mode in all buffers.
With prefix ARG, enable Global Dash-Fontify mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Dash-Fontify mode is enabled in all buffers where
`dash--turn-on-fontify-mode' would do it.
See `dash-fontify-mode' for more information on Dash-Fontify mode.

\(fn &optional ARG)" t nil)

(autoload 'dash-register-info-lookup "dash" "\
Register the Dash Info manual with `info-lookup-symbol'.
This allows Dash symbols to be looked up with \\[info-lookup-symbol]." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dash" '("!cdr" "!cons" "--" "->" "-a" "-butlast" "-c" "-d" "-e" "-f" "-gr" "-i" "-juxt" "-keep" "-l" "-m" "-no" "-o" "-p" "-r" "-s" "-t" "-u" "-value-to-list" "-when-let" "-zip" "dash-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/s-20210616.619/s-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/s-20210616.619/s-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/s-20210616.619/s-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "s" '("s-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/virtualenvwrapper-20190223.1919/virtualenvwrapper-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/virtualenvwrapper-20190223.1919/virtualenvwrapper-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/virtualenvwrapper-20190223.1919/virtualenvwrapper-autoloads.el") (car load-path))))


(autoload 'venv-projectile-auto-workon "virtualenvwrapper" "\
If a venv in the projetile root exists, activates it.
Set your common venvs names in `venv-dirlookup-names'

\(fn)" nil nil)

(autoload 'venv-deactivate "virtualenvwrapper" "\
Deactivate the current venv.

\(fn)" t nil)

(autoload 'venv-set-location "virtualenvwrapper" "\
Set where to look for virtual environments to LOCATION.
This is useful e.g. when using tox.

\(fn &optional LOCATION)" t nil)

(autoload 'venv-workon "virtualenvwrapper" "\
Interactively switch to virtualenv NAME. Prompts for name if called
interactively.

\(fn &optional NAME)" t nil)

(autoload 'venv-mkvirtualenv-using "virtualenvwrapper" "\
Create new virtualenvs NAMES using INTERPRETER. If venv-location
is a single directory, the new virtualenvs are made there; if it
is a list of directories, the new virtualenvs are made in the
current `default-directory'.

\(fn INTERPRETER &rest NAMES)" t nil)

(autoload 'venv-mkvirtualenv "virtualenvwrapper" "\
Create new virtualenvs NAMES. If venv-location is a single
directory, the new virtualenvs are made there; if it is a list of
directories, the new virtualenvs are made in the current
`default-directory'.

\(fn &rest NAMES)" t nil)

(autoload 'venv-rmvirtualenv "virtualenvwrapper" "\
Delete virtualenvs NAMES.

\(fn &rest NAMES)" t nil)

(autoload 'venv-lsvirtualenv "virtualenvwrapper" "\
List all available virtualenvs in a temp buffer.

\(fn)" t nil)

(autoload 'venv-cdvirtualenv "virtualenvwrapper" "\
Change to the directory of current virtualenv. If
SUBDIR is passed, append that to the path such that
we are immediately in that directory.

\(fn &optional SUBDIR)" t nil)

(autoload 'venv-cpvirtualenv "virtualenvwrapper" "\
Copy virtualenv NAME to NEWNAME. Any arguments not passed will be
prompted for This comes with the same caveat as cpvirtualenv in the
original virtualenvwrapper, which is that is far from guarenteed to
work well. Many packages hardcode absolute paths in various places an
will break if moved to a new location. Use with caution. If used with
a single virtualenv directory, behaves just like cpvirtualenv in
virtualenvwrapper.sh.  If used with virtualenvs spread around the
filesystem, creates the new virtualenv in the current default
directory.

\(fn &optional NAME NEWNAME)" t nil)

(autoload 'venv-shell-init "virtualenvwrapper" "\
Activate the current virtualenv in a newly opened shell.

\(fn PROCESS)" nil nil)

(autoload 'venv-initialize-interactive-shells "virtualenvwrapper" "\
Configure interactive shells for use with
virtualenvwrapper.el.

\(fn)" nil nil)

(autoload 'venv-initialize-eshell "virtualenvwrapper" "\
Configure eshell for use with virtualenvwrapper.el.

\(fn)" nil nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/vcard-0.2.2/vcard-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/vcard-0.2.2/vcard-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/vcard-0.2.2/vcard-autoloads.el") (car load-path))))



(defvar vcard-pretty-print-function #'vcard-format-sample-box "\
*Formatting function used by `vcard-pretty-print'.")

(custom-autoload 'vcard-pretty-print-function "vcard" t)

(defvar vcard-standard-filters (list #'vcard-filter-html #'vcard-filter-adr-newlines #'vcard-filter-tel-normalize #'vcard-filter-textprop-cr) "\
*Standard list of filters to apply to parsed vcard data.
These filters are applied sequentially to vcard attributes when
the function `vcard-standard-filter' is supplied as the second argument to
`vcard-parse'.")

(custom-autoload 'vcard-standard-filters "vcard" t)

(autoload 'vcard-pretty-print "vcard" "\
Format VCARD into a string suitable for display to user.
VCARD can be an unparsed string containing raw VCF vcard data
or a parsed vcard alist as returned by `vcard-parse-string'.

The result is a string with formatted vcard information suitable for
insertion into a mime presentation buffer.

The function specified by the variable `vcard-pretty-print-function'
actually performs the formatting.  That function will always receive a
parsed vcard alist.

\(fn VCARD)" nil nil)

(autoload 'vcard-parse-string "vcard" "\
Parse RAW vcard data as a string, and return an alist representing data.

If the optional function FILTER is specified, apply that filter to each
attribute.  If no filter is specified, `vcard-standard-filter' is used.

Filters should accept two arguments: the property list and the value list.
Modifying in place the property or value list will affect the resulting
attribute in the vcard alist.

Vcard data is normally in the form

    begin:                        vcard
    prop1a:                       value1a
    prop2a;prop2b;prop2c=param2c: value2a
    prop3a;prop3b:                value3a;value3b;value3c
    end:                          vcard

\(Whitespace around the `:' separating properties and values is optional.)
If supplied to this function an alist of the form

    (((\"prop1a\") \"value1a\")
     ((\"prop2a\" \"prop2b\" (\"prop2c\" . \"param2c\")) \"value2a\")
     ((\"prop3a\" \"prop3b\") \"value3a\" \"value3b\" \"value3c\"))

would be returned.

\(fn RAW &optional FILTER)" nil nil)

(autoload 'vcard-parse-region "vcard" "\
Parse the raw vcard data in region, and return an alist representing data.
This function is just like `vcard-parse-string' except that it operates on
a region of the current buffer rather than taking a string as an argument.

Note: this function modifies the buffer!

\(fn BEG END &optional FILTER)" nil nil)

(register-definition-prefixes "vcard" '("vcard-"))



(autoload 'vcard-mode "vcard-mode" "\
Major mode for viewing vCard files.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.[Vv][Cc][Ff]\\'" . vcard-mode))

(register-definition-prefixes "vcard-mode" '("vcard-font-lock-keywords"))



(autoload 'vcard-parse-file "vcard-parse" "\
Parse FILE containing vCard data into an alist.

\(fn FILE)" t nil)

(autoload 'vcard-parse-buffer "vcard-parse" "\
Parse current buffer, containing vCard data.
Returns a list of contact objects." t nil)

(register-definition-prefixes "vcard-parse" '("vcard-"))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/popup-20211231.1823/popup-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/popup-20211231.1823/popup-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/popup-20211231.1823/popup-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "popup" '("popup-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/vc-msg-20220526.1435/vc-msg-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/vc-msg-20220526.1435/vc-msg-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/vc-msg-20220526.1435/vc-msg-autoloads.el") (car load-path))))



(autoload 'vc-msg-show "vc-msg" "\
Show commit message of current line.
If Git is used and some text inside the line is selected,
the correct commit which submits the selected text is displayed." t nil)

(register-definition-prefixes "vc-msg" '("vc-msg-"))



aautoload 'vc-msg-git-blame-arguments "vc-msg-git" "\
Git blame at LINE-NUM.
Note git option `-C' track text copied elsewhere,
`-M' tracked moved content inside file.
See https://www.kernel.org/pub/software/scm/git/docs/git-blame.html

\(fn LINE-NUM)" nil nil)

(autoload 'vc-msg-git-execute "vc-msg-git" "\
Use FILE, LINE-NUM and VERSION to produce git command.
Parse the command execution output and return a plist:
'(:id str :author str :author-time str :summary str).

\(fn FILE LINE-NUM VERSION)" nil nil)

(autoload 'vc-msg-git-format "vc-msg-git" "\
Format the message for popup from INFO.

\(fn INFO)" nil nil)

(register-definition-prefixes "vc-msg-git" '("vc-msg-git-"))



(autoload 'vc-msg-hg-execute "vc-msg-hg" "\
Use FILE, LINE-NUM and VERSION to produce hg command.
Parse the command execution output and return a plist:
'(:id str :author str :date str :message str).

\(fn FILE LINE-NUM &optional VERSION)" nil nil)

(autoload 'vc-msg-hg-format "vc-msg-hg" "\
Format popup message from INFO.

\(fn INFO)" nil nil)

(register-definition-prefixes "vc-msg-hg" '("vc-msg-hg-"))



(autoload 'vc-msg-p4-execute "vc-msg-p4" "\
Use FILE, LINE-NUM and VERSION to produce p4 command.
Parse the command execution output and return a plist:
'(:id str :author str :date str :message str).

\(fn FILE LINE-NUM &optional VERSION)" nil nil)

(autoload 'vc-msg-p4-format "vc-msg-p4" "\
Format the INFO into a string.

\(fn INFO)" nil nil)

(register-definition-prefixes "vc-msg-p4" '("vc-msg-p4-"))



(register-definition-prefixes "vc-msg-sdk" '("vc-msg-sdk-"))



(autoload 'vc-msg-svn-execute "vc-msg-svn" "\
Use FILE, LINE-NUM and VERSION to produce svn command.
Parse the command execution output and return a plist:
'(:id str :author str :date str :message str).

\(fn FILE LINE-NUM &optional VERSION)" nil nil)

(autoload 'vc-msg-svn-format "vc-msg-svn" "\
Format the message to display from INFO.

\(fn INFO)" nil nil)

(register-definition-prefixes "vc-msg-svn" '("vc-msg-svn-"))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/uuidgen-20220405.1345/uuidgen-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/uuidgen-20220405.1345/uuidgen-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/uuidgen-20220405.1345/uuidgen-autoloads.el") (car load-path))))



(autoload 'insert-uuid-cid "uuidgen" "\
Insert UUID string in CID format that is suitable for COM definition.
If UUID is nil will generate UUIDGEN-4 automatically.
You customize `uuidgen-cid-format-string' to change the default format.

\(fn UUID)" t nil)

(autoload 'uuidgen "uuidgen" "\
Insert UUIDv4 at point. If TIME-BASED is non-nil, insert UUIDv1 instead.

\(fn TIME-BASED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "uuidgen" '("uuidgen-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/bind-key-20210210.1609/bind-key-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/bind-key-20210210.1609/bind-key-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/bind-key-20210210.1609/bind-key-autoloads.el") (car load-path))))



(autoload 'bind-key "bind-key" "\
Bind KEY-NAME to COMMAND in KEYMAP (`global-map' if not passed).

KEY-NAME may be a vector, in which case it is passed straight to
`define-key'. Or it may be a string to be interpreted as
spelled-out keystrokes, e.g., \"C-c C-z\". See documentation of
`edmacro-mode' for details.

COMMAND must be an interactive function or lambda form.

KEYMAP, if present, should be a keymap variable or symbol.
For example:

  (bind-key \"M-h\" #'some-interactive-function my-mode-map)

  (bind-key \"M-h\" #'some-interactive-function 'my-mode-map)

If PREDICATE is non-nil, it is a form evaluated to determine when
a key should be bound. It must return non-nil in such cases.
Emacs can evaluate this form at any time that it does redisplay
or operates on menu data structures, so you should write it so it
can safely be called at any time.

\(fn KEY-NAME COMMAND &optional KEYMAP PREDICATE)" nil t)

(autoload 'unbind-key "bind-key" "\
Unbind the given KEY-NAME, within the KEYMAP (if specified).
See `bind-key' for more details.

\(fn KEY-NAME &optional KEYMAP)" nil t)

(autoload 'bind-key* "bind-key" "\
Similar to `bind-key', but overrides any mode-specific bindings.

\(fn KEY-NAME COMMAND &optional PREDICATE)" nil t)

(autoload 'bind-keys "bind-key" "\
Bind multiple keys at once.

Accepts keyword arguments:
:map MAP               - a keymap into which the keybindings should be
                         added
:prefix KEY            - prefix key for these bindings
:prefix-map MAP        - name of the prefix map that should be created
                         for these bindings
:prefix-docstring STR  - docstring for the prefix-map variable
:menu-name NAME        - optional menu string for prefix map
:filter FORM           - optional form to determine when bindings apply

The rest of the arguments are conses of keybinding string and a
function symbol (unquoted).

\(fn &rest ARGS)" nil t)

(autoload 'bind-keys* "bind-key" "\


\(fn &rest ARGS)" nil t)

(autoload 'describe-personal-keybindings "bind-key" "\
Display all the personal keybindings defined by `bind-key'." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bind-key" '("bind-key" "compare-keybindings" "get-binding-description" "override-global-m" "personal-keybindings")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/use-package-20210207.1926/use-package-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/use-package-20210207.1926/use-package-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/use-package-20210207.1926/use-package-autoloads.el") (car load-path))))



(autoload 'use-package-autoload-keymap "use-package-bind-key" "\
Loads PACKAGE and then binds the key sequence used to invoke
this function to KEYMAP-SYMBOL. It then simulates pressing the
same key sequence a again, so that the next key pressed is routed
to the newly loaded keymap.

This function supports use-package's :bind-keymap keyword. It
works by binding the given key sequence to an invocation of this
function for a particular keymap. The keymap is expected to be
defined by the package. In this way, loading the package is
deferred until the prefix key sequence is pressed.

\(fn KEYMAP-SYMBOL PACKAGE OVERRIDE)" nil nil)

(autoload 'use-package-normalize-binder "use-package-bind-key" "\


\(fn NAME KEYWORD ARGS)" nil nil)

(defalias 'use-package-normalize/:bind 'use-package-normalize-binder)

(defalias 'use-package-normalize/:bind* 'use-package-normalize-binder)

(defalias 'use-package-autoloads/:bind 'use-package-autoloads-mode)

(defalias 'use-package-autoloads/:bind* 'use-package-autoloads-mode)

(autoload 'use-package-handler/:bind "use-package-bind-key" "\


\(fn NAME KEYWORD ARGS REST STATE &optional BIND-MACRO)" nil nil)

(defalias 'use-package-normalize/:bind-keymap 'use-package-normalize-binder)

(defalias 'use-package-normalize/:bind-keymap* 'use-package-normalize-binder)

(autoload 'use-package-handler/:bind-keymap "use-package-bind-key" "\


\(fn NAME KEYWORD ARGS REST STATE &optional OVERRIDE)" nil nil)

(autoload 'use-package-handler/:bind-keymap* "use-package-bind-key" "\


\(fn NAME KEYWORD ARG REST STATE)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "use-package-bind-key" '("use-package-handler/:bind*")))



(autoload 'use-package "use-package-core" "\
Declare an Emacs package by specifying a group of configuration options.

For full documentation, please see the README file that came with
this file.  Usage:

  (use-package package-name
     [:keyword [option]]...)

:init            Code to run before PACKAGE-NAME has been loaded.
:config          Code to run after PACKAGE-NAME has been loaded.  Note that
                 if loading is deferred for any reason, this code does not
                 execute until the lazy load has occurred.
:preface         Code to be run before everything except `:disabled'; this
                 can be used to define functions for use in `:if', or that
                 should be seen by the byte-compiler.

:mode            Form to be added to `auto-mode-alist'.
:magic           Form to be added to `magic-mode-alist'.
:magic-fallback  Form to be added to `magic-fallback-mode-alist'.
:interpreter     Form to be added to `interpreter-mode-alist'.

:commands        Define autoloads for commands that will be defined by the
                 package.  This is useful if the package is being lazily
                 loaded, and you wish to conditionally call functions in your
                 `:init' block that are defined in the package.
:hook            Specify hook(s) to attach this package to.

:bind            Bind keys, and define autoloads for the bound commands.
:bind*           Bind keys, and define autoloads for the bound commands,
                 *overriding all minor mode bindings*.
:bind-keymap     Bind a key prefix to an auto-loaded keymap defined in the
                 package.  This is like `:bind', but for keymaps.
:bind-keymap*    Like `:bind-keymap', but overrides all minor mode bindings

:defer           Defer loading of a package -- this is implied when using
                 `:commands', `:bind', `:bind*', `:mode', `:magic', `:hook',
                 `:magic-fallback', or `:interpreter'.  This can be an integer,
                 to force loading after N seconds of idle time, if the package
                 has not already been loaded.
:after           Delay the use-package declaration until after the named modules
                 have loaded. Once load, it will be as though the use-package
                 declaration (without `:after') had been seen at that moment.
:demand          Prevent the automatic deferred loading introduced by constructs
                 such as `:bind' (see `:defer' for the complete list).

:if EXPR         Initialize and load only if EXPR evaluates to a non-nil value.
:disabled        The package is ignored completely if this keyword is present.
:defines         Declare certain variables to silence the byte-compiler.
:functions       Declare certain functions to silence the byte-compiler.
:load-path       Add to the `load-path' before attempting to load the package.
:diminish        Support for diminish.el (if installed).
:delight         Support for delight.el (if installed).
:custom          Call `custom-set' or `set-default' with each variable
                 definition without modifying the Emacs `custom-file'.
                 (compare with `custom-set-variables').
:custom-face     Call `customize-set-faces' with each face definition.
:ensure          Loads the package using package.el if necessary.
:pin             Pin the package to an archive.

\(fn NAME &rest ARGS)" nil t)

(function-put 'use-package 'lisp-indent-function '1)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "use-package-core" '("use-package-")))



(autoload 'use-package-normalize/:delight "use-package-delight" "\
Normalize arguments to delight.

\(fn NAME KEYWORD ARGS)" nil nil)

(autoload 'use-package-handler/:delight "use-package-delight" "\


\(fn NAME KEYWORD ARGS REST STATE)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "use-package-delight" '("use-package-normalize-delight")))



(autoload 'use-package-normalize/:diminish "use-package-diminish" "\


\(fn NAME KEYWORD ARGS)" nil nil)

(autoload 'use-package-handler/:diminish "use-package-diminish" "\


\(fn NAME KEYWORD ARG REST STATE)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "use-package-diminish" '("use-package-normalize-diminish")))



(autoload 'use-package-normalize/:ensure "use-package-ensure" "\


\(fn NAME KEYWORD ARGS)" nil nil)

(autoload 'use-package-handler/:ensure "use-package-ensure" "\


\(fn NAME KEYWORD ENSURE REST STATE)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "use-package-ensure" '("use-package-")))



(autoload 'use-package-jump-to-package-form "use-package-jump" "\
Attempt to find and jump to the `use-package' form that loaded
PACKAGE. This will only find the form if that form actually
required PACKAGE. If PACKAGE was previously required then this
function will jump to the file that originally required PACKAGE
instead.

\(fn PACKAGE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "use-package-jump" '("use-package-find-require")))



(autoload 'use-package-lint "use-package-lint" "\
Check for errors in use-package declarations.
For example, if the module's `:if' condition is met, but even
with the specified `:load-path' the module cannot be found." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "use-package-lint" '("use-package-lint-declaration")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/unicode-troll-stopper-20190209.411/unicode-troll-stopper-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/unicode-troll-stopper-20190209.411/unicode-troll-stopper-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/unicode-troll-stopper-20190209.411/unicode-troll-stopper-autoloads.el") (car load-path))))


(autoload 'unicode-troll-stopper-mode "unicode-troll-stopper" "\
Highlight Unicode homoglyphs in the current buffer.

\(fn &optional ARG)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/queue-0.2/queue-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/queue-0.2/queue-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/queue-0.2/queue-autoloads.el") (car load-path))))



(defalias 'make-queue 'queue-create "\
Create an empty queue data structure.")

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "queue" '("queue")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/undo-tree-0.8.2/undo-tree-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/undo-tree-0.8.2/undo-tree-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/undo-tree-0.8.2/undo-tree-autoloads.el") (car load-path))))



(autoload 'undo-tree-mode "undo-tree" "\
Toggle undo-tree mode.
With no argument, this command toggles the mode.
A positive prefix argument turns the mode on.
A negative prefix argument turns it off.

If called interactively, enable Undo-Tree mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Undo-tree-mode replaces Emacs' standard undo feature with a more
powerful yet easier to use version, that treats the undo history
as what it is: a tree.

The following keys are available in `undo-tree-mode':

  \\{undo-tree-map}

Within the undo-tree visualizer, the following keys are available:

  \\{undo-tree-visualizer-mode-map}

\(fn &optional ARG)" t nil)

(put 'global-undo-tree-mode 'globalized-minor-mode t)

(defvar global-undo-tree-mode nil "\
Non-nil if Global Undo-Tree mode is enabled.
See the `global-undo-tree-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-undo-tree-mode'.")

(custom-autoload 'global-undo-tree-mode "undo-tree" nil)

(autoload 'global-undo-tree-mode "undo-tree" "\
Toggle Undo-Tree mode in all buffers.
With prefix ARG, enable Global Undo-Tree mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Undo-Tree mode is enabled in all buffers where
`turn-on-undo-tree-mode' would do it.
See `undo-tree-mode' for more information on Undo-Tree mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "undo-tree" '("*undo-tree-id-counter*" "buffer-undo-tree" "turn-on-undo-tree-mode" "undo-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/tzc-20220513.434/tzc-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/tzc-20220513.434/tzc-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/tzc-20220513.434/tzc-autoloads.el") (car load-path))))



(autoload 'tzc-world-clock-previous-or-next "tzc" "\
Get the `tzc-world-clock' buffer for PREVIOUS-OR-NEXT hour.

\(fn PREVIOUS-OR-NEXT)" nil nil)

(autoload 'tzc-world-clock-previous "tzc" "\
Get the `tzc-world-clock` for the previous hour." t nil)

(autoload 'tzc-world-clock-next "tzc" "\
Get the `tzc-world-clock` for the next hour." t nil)

(defvar tzc-world-clock-mode-map (let ((map (make-sparse-keymap))) (define-key map "n" #'tzc-world-clock-next) (define-key map "p" #'tzc-world-clock-previous) map))

(autoload 'tzc-world-clock "tzc" "\
Display a world clock buffer for time zones in `tzc-favourite-time-zones-alist`." t nil)

(register-definition-prefixes "tzc" '("tzc-"))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/typescript-mode-20220705.2151/typescript-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/typescript-mode-20220705.2151/typescript-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/typescript-mode-20220705.2151/typescript-mode-autoloads.el") (car load-path))))


(put 'typescript-indent-level 'safe-local-variable #'integerp)

(autoload 'typescript-mode "typescript-mode" "\
Major mode for editing typescript.

Key bindings:

\\{typescript-mode-map}

\(fn)" t nil)

(eval-after-load 'folding '(when (fboundp 'folding-add-to-marks-list) (folding-add-to-marks-list 'typescript-mode "// {{{" "// }}}")))

(add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))

(register-definition-prefixes "typescript-mode" '("typescript-"))



atars/neagleson/.emacs.d/elpa/typescript-mode-20220705.2151/typescript-mode-autoloads.elace-at" "test-with-"))

;;;***

;;;### (autoloads nil nil ("typescript-mode-pkg.el") (0 0 0 0))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; typescript-mode-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/tsc-20220212.1632/tsc-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/tsc-20220212.1632/tsc-autoloads.el"))
;;; tsc-autoloads.el --- automatically extracted autoloads
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "tsc" "tsc.el" (0 0 0 0))
;;; Generated autoloads from tsc.el

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tsc" '("tsc-")))

;;;***

;;;### (autoloads nil "tsc-dyn-get" "tsc-dyn-get.el" (0 0 0 0))
;;; Generated autoloads from tsc-dyn-get.el

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tsc-dyn-get" '("tsc-")))

;;;***

;;;### (autoloads nil nil ("tsc-obsolete.el" "tsc-pkg.el") (0 0 0
;;;;;;  0))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; tsc-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/ts-20210813.1617/ts-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/ts-20210813.1617/ts-autoloads.el"))
;;; ts-autoloads.el --- automatically extracted autoloads
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "ts" "ts.el" (0 0 0 0))
;;; Generated autoloads from ts.el

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ts" '("ts-" "ts<" "ts=" "ts>")))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; ts-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/tron-legacy-theme-20220610.1746/tron-legacy-theme-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/tron-legacy-theme-20220610.1746/tron-legacy-theme-autoloads.el"))
;;; tron-legacy-theme-autoloads.el --- automatically extracted autoloads  -*- lexical-binding: t -*-
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "tron-legacy-theme" "tron-legacy-theme.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from tron-legacy-theme.el

(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(register-definition-prefixes "tron-legacy-theme" '("tron-legacy-theme-"))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; tron-legacy-theme-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/treepy-20191108.2217/treepy-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/treepy-20191108.2217/treepy-autoloads.el"))
;;; treepy-autoloads.el --- automatically extracted autoloads
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "treepy" "treepy.el" (0 0 0 0))
;;; Generated autoloads from treepy.el

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "treepy" '("treepy-")))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; treepy-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/avy-20220102.805/avy-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/avy-20220102.805/avy-autoloads.el"))
;;; avy-autoloads.el --- automatically extracted autoloads
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "avy" "avy.el" (0 0 0 0))
;;; Generated autoloads from avy.el

(autoload 'avy-process "avy" "\
Select one of CANDIDATES using `avy-read'.
Use OVERLAY-FN to visualize the decision overlay.
CLEANUP-FN should take no arguments and remove the effects of
multiple OVERLAY-FN invocations.

\(fn CANDIDATES &optional OVERLAY-FN CLEANUP-FN)" nil nil)

(autoload 'avy-goto-char "avy" "\
Jump to the currently visible CHAR.
The window scope is determined by `avy-all-windows' (ARG negates it).

\(fn CHAR &optional ARG)" t nil)

(autoload 'avy-goto-char-in-line "avy" "\
Jump to the currently visible CHAR in the current line.

\(fn CHAR)" t nil)

(autoload 'avy-goto-char-2 "avy" "\
Jump to the currently visible CHAR1 followed by CHAR2.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

\(fn CHAR1 CHAR2 &optional ARG BEG END)" t nil)

(autoload 'avy-goto-char-2-above "avy" "\
Jump to the currently visible CHAR1 followed by CHAR2.
This is a scoped version of `avy-goto-char-2', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

\(fn CHAR1 CHAR2 &optional ARG)" t nil)

(autoload 'avy-goto-char-2-below "avy" "\
Jump to the currently visible CHAR1 followed by CHAR2.
This is a scoped version of `avy-goto-char-2', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

\(fn CHAR1 CHAR2 &optional ARG)" t nil)

(autoload 'avy-isearch "avy" "\
Jump to one of the current isearch candidates." t nil)

(autoload 'avy-goto-word-0 "avy" "\
Jump to a word start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

\(fn ARG &optional BEG END)" t nil)

(autoload 'avy-goto-whitespace-end "avy" "\
Jump to the end of a whitespace sequence.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

\(fn ARG &optional BEG END)" t nil)

(autoload 'avy-goto-word-1 "avy" "\
Jump to the currently visible CHAR at a word start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.
When SYMBOL is non-nil, jump to symbol start instead of word start.

\(fn CHAR &optional ARG BEG END SYMBOL)" t nil)

(autoload 'avy-goto-word-1-above "avy" "\
Jump to the currently visible CHAR at a word start.
This is a scoped version of `avy-goto-word-1', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

\(fn CHAR &optional ARG)" t nil)

(autoload 'avy-goto-word-1-below "avy" "\
Jump to the currently visible CHAR at a word start.
This is a scoped version of `avy-goto-word-1', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

\(fn CHAR &optional ARG)" t nil)

(autoload 'avy-goto-symbol-1 "avy" "\
Jump to the currently visible CHAR at a symbol start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

\(fn CHAR &optional ARG)" t nil)

(autoload 'avy-goto-symbol-1-above "avy" "\
Jump to the currently visible CHAR at a symbol start.
This is a scoped version of `avy-goto-symbol-1', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

\(fn CHAR &optional ARG)" t nil)

(autoload 'avy-goto-symbol-1-below "avy" "\
Jump to the currently visible CHAR at a symbol start.
This is a scoped version of `avy-goto-symbol-1', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

\(fn CHAR &optional ARG)" t nil)

(autoload 'avy-goto-subword-0 "avy" "\
Jump to a word or subword start.
The window scope is determined by `avy-all-windows' (ARG negates it).

When PREDICATE is non-nil it's a function of zero parameters that
should return true.

BEG and END narrow the scope where candidates are searched.

\(fn &optional ARG PREDICATE BEG END)" t nil)

(autoload 'avy-goto-subword-1 "avy" "\
Jump to the currently visible CHAR at a subword start.
The window scope is determined by `avy-all-windows' (ARG negates it).
The case of CHAR is ignored.

\(fn CHAR &optional ARG)" t nil)

(autoload 'avy-goto-word-or-subword-1 "avy" "\
Forward to `avy-goto-subword-1' or `avy-goto-word-1'.
Which one depends on variable `subword-mode'." t nil)

(autoload 'avy-goto-line "avy" "\
Jump to a line start in current buffer.

When ARG is 1, jump to lines currently visible, with the option
to cancel to `goto-line' by entering a number.

When ARG is 4, negate the window scope determined by
`avy-all-windows'.

Otherwise, forward to `goto-line' with ARG.

\(fn &optional ARG)" t nil)

(autoload 'avy-goto-line-above "avy" "\
Goto visible line above the cursor.
OFFSET changes the distance between the closest key to the cursor and
the cursor
When BOTTOM-UP is non-nil, display avy candidates from top to bottom

\(fn &optional OFFSET BOTTOM-UP)" t nil)

(autoload 'avy-goto-line-below "avy" "\
Goto visible line below the cursor.
OFFSET changes the distance between the closest key to the cursor and
the cursor
When BOTTOM-UP is non-nil, display avy candidates from top to bottom

\(fn &optional OFFSET BOTTOM-UP)" t nil)

(autoload 'avy-goto-end-of-line "avy" "\
Call `avy-goto-line' and move to the end of the line.

\(fn &optional ARG)" t nil)

(autoload 'avy-copy-line "avy" "\
Copy a selected line above the current line.
ARG lines can be used.

\(fn ARG)" t nil)

(autoload 'avy-move-line "avy" "\
Move a selected line above the current line.
ARG lines can be used.

\(fn ARG)" t nil)

(autoload 'avy-copy-region "avy" "\
Select two lines and copy the text between them to point.

The window scope is determined by `avy-all-windows' or
`avy-all-windows-alt' when ARG is non-nil.

\(fn ARG)" t nil)

(autoload 'avy-move-region "avy" "\
Select two lines and move the text between them above the current line." t nil)

(autoload 'avy-kill-region "avy" "\
Select two lines and kill the region between them.

The window scope is determined by `avy-all-windows' or
`avy-all-windows-alt' when ARG is non-nil.

\(fn ARG)" t nil)

(autoload 'avy-kill-ring-save-region "avy" "\
Select two lines and save the region between them to the kill ring.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

\(fn ARG)" t nil)

(autoload 'avy-kill-whole-line "avy" "\
Select line and kill the whole selected line.

With a numerical prefix ARG, kill ARG line(s) starting from the
selected line.  If ARG is negative, kill backward.

If ARG is zero, kill the selected line but exclude the trailing
newline.

\\[universal-argument] 3 \\[avy-kil-whole-line] kill three lines
starting from the selected line.  \\[universal-argument] -3

\\[avy-kill-whole-line] kill three lines backward including the
selected line.

\(fn ARG)" t nil)

(autoload 'avy-kill-ring-save-whole-line "avy" "\
Select line and save the whole selected line as if killed, but don’t kill it.

This command is similar to `avy-kill-whole-line', except that it
saves the line(s) as if killed, but does not kill it(them).

With a numerical prefix ARG, kill ARG line(s) starting from the
selected line.  If ARG is negative, kill backward.

If ARG is zero, kill the selected line but exclude the trailing
newline.

\(fn ARG)" t nil)

(autoload 'avy-setup-default "avy" "\
Setup the default shortcuts." nil nil)

(autoload 'avy-goto-char-timer "avy" "\
Read one or many consecutive chars and jump to the first one.
The window scope is determined by `avy-all-windows' (ARG negates it).

\(fn &optional ARG)" t nil)

(autoload 'avy-transpose-lines-in-region "avy" "\
Transpose lines in the active region." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "avy" '("avy-")))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; avy-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/ace-window-20200606.1259/ace-window-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/ace-window-20200606.1259/ace-window-autoloads.el"))
;;; ace-window-autoloads.el --- automatically extracted autoloads
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "ace-window" "ace-window.el" (0 0 0 0))
;;; Generated autoloads from ace-window.el

(autoload 'ace-select-window "ace-window" "\
Ace select window." t nil)

(autoload 'ace-delete-window "ace-window" "\
Ace delete window." t nil)

(autoload 'ace-swap-window "ace-window" "\
Ace swap window." t nil)

(autoload 'ace-delete-other-windows "ace-window" "\
Ace delete other windows." t nil)

(autoload 'ace-display-buffer "ace-window" "\
Make `display-buffer' and `pop-to-buffer' select using `ace-window'.
See sample config for `display-buffer-base-action' and `display-buffer-alist':
https://github.com/abo-abo/ace-window/wiki/display-buffer.

\(fn BUFFER ALIST)" nil nil)

(autoload 'ace-window "ace-window" "\
Select a window.
Perform an action based on ARG described below.

By default, behaves like extended `other-window'.
See `aw-scope' which extends it to work with frames.

Prefixed with one \\[universal-argument], does a swap between the
selected window and the current window, so that the selected
buffer moves to current window (and current buffer moves to
selected window).

Prefixed with two \\[universal-argument]'s, deletes the selected
window.

\(fn ARG)" t nil)

(defvar ace-window-display-mode nil "\
Non-nil if Ace-Window-Display mode is enabled.
See the `ace-window-display-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ace-window-display-mode'.")

(custom-autoload 'ace-window-display-mode "ace-window" nil)

(autoload 'ace-window-display-mode "ace-window" "\
Minor mode for showing the ace window key in the mode line.

If called interactively, enable Ace-Window-Display mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ace-window" '("ace-window-mode" "aw-")))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; ace-window-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/pfuture-20220425.1242/pfuture-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/pfuture-20220425.1242/pfuture-autoloads.el"))
;;; pfuture-autoloads.el --- automatically extracted autoloads  -*- lexical-binding: t -*-
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "pfuture" "pfuture.el" (0 0 0 0))
;;; Generated autoloads from pfuture.el

(autoload 'pfuture-new "pfuture" "\
Create a new future process for command CMD.
Any arguments after the command are interpreted as arguments to the command.
This will return a process object with additional 'stderr and 'stdout
properties, which can be read via (process-get process 'stdout) and
\(process-get process 'stderr) or alternatively with
\(pfuture-result process) or (pfuture-stderr process).

Note that CMD must be a *sequence* of strings, meaning
this is wrong: (pfuture-new \"git status\")
this is right: (pfuture-new \"git\" \"status\")

\(fn &rest CMD)" nil nil)

(register-definition-prefixes "pfuture" '("pfuture-"))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; pfuture-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/lv-20200507.1518/lv-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/lv-20200507.1518/lv-autoloads.el"))
;;; lv-autoloads.el --- automatically extracted autoloads
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "lv" "lv.el" (0 0 0 0))
;;; Generated autoloads from lv.el

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lv" '("lv-")))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; lv-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/hydra-20220102.803/hydra-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/hydra-20220102.803/hydra-autoloads.el"))
;;; hydra-autoloads.el --- automatically extracted autoloads
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "hydra" "hydra.el" (0 0 0 0))
;;; Generated autoloads from hydra.el

(autoload 'defhydra "hydra" "\
Create a Hydra - a family of functions with prefix NAME.

NAME should be a symbol, it will be the prefix of all functions
defined here.

BODY has the format:

    (BODY-MAP BODY-KEY &rest BODY-PLIST)

DOCSTRING will be displayed in the echo area to identify the
Hydra.  When DOCSTRING starts with a newline, special Ruby-style
substitution will be performed by `hydra--format'.

Functions are created on basis of HEADS, each of which has the
format:

    (KEY CMD &optional HINT &rest PLIST)

BODY-MAP is a keymap; `global-map' is used quite often.  Each
function generated from HEADS will be bound in BODY-MAP to
BODY-KEY + KEY (both are strings passed to `kbd'), and will set
the transient map so that all following heads can be called
though KEY only.  BODY-KEY can be an empty string.

CMD is a callable expression: either an interactive function
name, or an interactive lambda, or a single sexp (it will be
wrapped in an interactive lambda).

HINT is a short string that identifies its head.  It will be
printed beside KEY in the echo erea if `hydra-is-helpful' is not
nil.  If you don't even want the KEY to be printed, set HINT
explicitly to nil.

The heads inherit their PLIST from BODY-PLIST and are allowed to
override some keys.  The keys recognized are :exit, :bind, and :column.
:exit can be:

- nil (default): this head will continue the Hydra state.
- t: this head will stop the Hydra state.

:bind can be:
- nil: this head will not be bound in BODY-MAP.
- a lambda taking KEY and CMD used to bind a head.

:column is a string that sets the column for all subsequent heads.

It is possible to omit both BODY-MAP and BODY-KEY if you don't
want to bind anything.  In that case, typically you will bind the
generated NAME/body command.  This command is also the return
result of `defhydra'.

\(fn NAME BODY &optional DOCSTRING &rest HEADS)" nil t)

(function-put 'defhydra 'lisp-indent-function 'defun)

(function-put 'defhydra 'doc-string-elt '3)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "hydra" '("defhydra" "hydra-")))

;;;***

;;;### (autoloads nil "hydra-examples" "hydra-examples.el" (0 0 0
;;;;;;  0))
;;; Generated autoloads from hydra-examples.el

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "hydra-examples" '("hydra-" "org-agenda-cts" "whitespace-mode")))

;;;***

;;;### (autoloads nil "hydra-ox" "hydra-ox.el" (0 0 0 0))
;;; Generated autoloads from hydra-ox.el

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "hydra-ox" '("hydra-ox")))

;;;***

;;;### (autoloads nil nil ("hydra-pkg.el") (0 0 0 0))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; hydra-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/ht-20210119.741/ht-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/ht-20210119.741/ht-autoloads.el"))
;;; ht-autoloads.el --- automatically extracted autoloads
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "ht" "ht.el" (0 0 0 0))
;;; Generated autoloads from ht.el

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ht" 'nil))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; ht-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/posframe-20220528.27/posframe-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/posframe-20220528.27/posframe-autoloads.el"))
;;; posframe-autoloads.el --- automatically extracted autoloads  -*- lexical-binding: t -*-
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "posframe" "posframe.el" (0 0 0 0))
;;; Generated autoloads from posframe.el

(autoload 'posframe-workable-p "posframe" "\
Test posframe workable status." nil nil)

(autoload 'posframe-show "posframe" "\
Pop up a posframe to show STRING at POSITION.

 (1) POSITION

POSITION can be:
1. An integer, meaning point position.
2. A cons of two integers, meaning absolute X and Y coordinates.
3. Other type, in which case the corresponding POSHANDLER should be
   provided.

 (2) POSHANDLER

POSHANDLER is a function of one argument returning an actual
position.  Its argument is a plist of the following form:

  (:position xxx
   :poshandler xxx
   :font-height xxx
   :font-width xxx
   :posframe xxx
   :posframe-width xxx
   :posframe-height xxx
   :posframe-buffer xxx
   :parent-frame xxx
   :parent-window-left xxx
   :parent-window-top xxx
   :parent-frame-width xxx
   :parent-frame-height xxx
   :parent-window xxx
   :parent-window-width  xxx
   :parent-window-height xxx
   :mouse-x xxx
   ;mouse-y xxx
   :minibuffer-height xxx
   :mode-line-height  xxx
   :header-line-height xxx
   :tab-line-height xxx
   :x-pixel-offset xxx
   :y-pixel-offset xxx)

By default, poshandler is auto-selected based on the type of POSITION,
but the selection can be overridden using the POSHANDLER argument.

The names of poshandler functions are like:

   `posframe-poshandler-p0.5p0-to-w0.5p1'

which mean align posframe(0.5, 0) to a position(a, b)

1. a = x of window(0.5, 0)
2. b = y of point(1, 1)

    posframe(p), frame(f), window(w), point(p), mouse(m)

         (0,0)      (0.5,0)      (1,0)
          +------------+-----------+
          |                        |
          |                        |
          |                        |
 (0, 0.5) +                        + (1, 0.5)
          |                        |
          |                        |
          |                        |
          +------------+-----------+
         (0,1)      (0.5,1)      (1,1)

The alias of builtin poshandler functions are listed below:

1.  `posframe-poshandler-frame-center'
2.  `posframe-poshandler-frame-top-center'
3.  `posframe-poshandler-frame-top-left-corner'
4.  `posframe-poshandler-frame-top-right-corner'
5.  `posframe-poshandler-frame-bottom-center'
6.  `posframe-poshandler-frame-bottom-left-corner'
7.  `posframe-poshandler-frame-bottom-right-corner'
8.  `posframe-poshandler-window-center'
9.  `posframe-poshandler-window-top-center'
10. `posframe-poshandler-window-top-left-corner'
11. `posframe-poshandler-window-top-right-corner'
12. `posframe-poshandler-window-bottom-center'
13. `posframe-poshandler-window-bottom-left-corner'
14. `posframe-poshandler-window-bottom-right-corner'
15. `posframe-poshandler-point-top-left-corner'
16. `posframe-poshandler-point-bottom-left-corner'
17. `posframe-poshandler-point-bottom-left-corner-upward'
18. `posframe-poshandler-point-window-center'

by the way, poshandler can be used by other packages easily with
the help of function `posframe-poshandler-argbuilder'.  like:

   (let* ((info (posframe-poshandler-argbuilder *MY-CHILD-FRAME*))
          (posn (posframe-poshandler-window-center
                 `(:posframe-width 800 :posframe-height 400 ,@info))))
     `((left . ,(car posn))
       (top . ,(cdr posn))))

 (3) POSHANDLER-EXTRA-INFO

POSHANDLER-EXTRA-INFO is a plist, which will prepend to the
argument of poshandler function: `info', it will *OVERRIDE* the
exist key in `info'.

 (4) BUFFER-OR-NAME

This posframe's buffer is BUFFER-OR-NAME, which can be a buffer
or a name of a (possibly nonexistent) buffer.

buffer name can prefix with space, for example \" *mybuffer*\", so
the buffer name will hide for ibuffer and `list-buffers'.

 (5) NO-PROPERTIES

If NO-PROPERTIES is non-nil, The STRING's properties will
be removed before being shown in posframe.

 (6) HEIGHT, MAX-HEIGHT, MIN-HEIGHT, WIDTH, MAX-WIDTH and MIN-WIDTH

These arguments are specified in the canonical character width
and height of posframe, more details can be found in docstring of
function `fit-frame-to-buffer',

 (7) LEFT-FRINGE and RIGHT-FRINGE

If LEFT-FRINGE or RIGHT-FRINGE is a number, left fringe or
right fringe with be shown with the specified width.

 (8) BORDER-WIDTH, BORDER-COLOR, INTERNAL-BORDER-WIDTH and INTERNAL-BORDER-COLOR

By default, posframe shows no borders, but users can specify
borders by setting BORDER-WIDTH to a positive number.  Border
color can be specified by BORDER-COLOR.

INTERNAL-BORDER-WIDTH and INTERNAL-BORDER-COLOR are same as
BORDER-WIDTH and BORDER-COLOR, but do not suggest to use for the
reason:

   Add distinct controls for child frames' borders (Bug#45620)
   http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=ff7b1a133bfa7f2614650f8551824ffaef13fadc

 (9) FONT, FOREGROUND-COLOR and BACKGROUND-COLOR

Posframe's font as well as foreground and background colors are
derived from the current frame by default, but can be overridden
using the FONT, FOREGROUND-COLOR and BACKGROUND-COLOR arguments,
respectively.

 (10) RESPECT-HEADER-LINE and RESPECT-MODE-LINE

By default, posframe will display no header-line, mode-line and
tab-line.  In case a header-line, mode-line or tab-line is
desired, users can set RESPECT-HEADER-LINE and RESPECT-MODE-LINE
to t.

 (11) INITIALIZE

INITIALIZE is a function with no argument.  It will run when
posframe buffer is first selected with `with-current-buffer'
in `posframe-show', and only run once (for performance reasons).

 (12) LINES-TRUNCATE

If LINES-TRUNCATE is non-nil, then lines will truncate in the
posframe instead of wrap.

 (13) OVERRIDE-PARAMETERS

OVERRIDE-PARAMETERS is very powful, *all* the valid frame parameters
used by posframe's frame can be overridden by it.

NOTE: some `posframe-show' arguments are not frame parameters, so they
can not be overrided by this argument.

 (14) TIMEOUT

TIMEOUT can specify the number of seconds after which the posframe
will auto-hide.

 (15) REFRESH

If REFRESH is a number, posframe's frame-size will be re-adjusted
every REFRESH seconds.

 (16) ACCEPT-FOCUS

When ACCEPT-FOCUS is non-nil, posframe will accept focus.
be careful, you may face some bugs when set it to non-nil.

 (17) HIDEHANDLER

HIDEHANDLER is a function, when it return t, posframe will be
hide, this function has a plist argument:

  (:posframe-buffer xxx
   :posframe-parent-buffer xxx)

The builtin hidehandler functions are listed below:

1. `posframe-hidehandler-when-buffer-switch'

 (18) REFPOSHANDLER

REFPOSHANDLER is a function, a reference position (most is
top-left of current frame) will be returned when call this
function.

when it is nil or it return nil, child-frame feature will be used
and reference position will be deal with in Emacs.

The user case I know at the moment is let ivy-posframe work well
in EXWM environment (let posframe show on the other appliction
window).

         DO NOT USE UNLESS NECESSARY!!!

An example parent frame poshandler function is:

1. `posframe-refposhandler-xwininfo'

 (19) Others

You can use `posframe-delete-all' to delete all posframes.

\(fn BUFFER-OR-NAME &key STRING POSITION POSHANDLER POSHANDLER-EXTRA-INFO WIDTH HEIGHT MAX-WIDTH MAX-HEIGHT MIN-WIDTH MIN-HEIGHT X-PIXEL-OFFSET Y-PIXEL-OFFSET LEFT-FRINGE RIGHT-FRINGE BORDER-WIDTH BORDER-COLOR INTERNAL-BORDER-WIDTH INTERNAL-BORDER-COLOR FONT FOREGROUND-COLOR BACKGROUND-COLOR RESPECT-HEADER-LINE RESPECT-MODE-LINE INITIALIZE NO-PROPERTIES KEEP-RATIO LINES-TRUNCATE OVERRIDE-PARAMETERS TIMEOUT REFRESH ACCEPT-FOCUS HIDEHANDLER REFPOSHANDLER &allow-other-keys)" nil nil)

(autoload 'posframe-hide-all "posframe" "\
Hide all posframe frames." t nil)

(autoload 'posframe-delete-all "posframe" "\
Delete all posframe frames and buffers." t nil)

(register-definition-prefixes "posframe" '("posframe-"))

;;;***

;;;### (autoloads nil "posframe-benchmark" "posframe-benchmark.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from posframe-benchmark.el

(autoload 'posframe-benchmark "posframe-benchmark" "\
Benchmark tool for posframe." t nil)

(register-definition-prefixes "posframe-benchmark" '("posframe-benchmark-alist"))

;;;***

;;;### (autoloads nil nil ("posframe-pkg.el") (0 0 0 0))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; posframe-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/cfrs-20220129.1149/cfrs-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/cfrs-20220129.1149/cfrs-autoloads.el"))
;;; cfrs-autoloads.el --- automatically extracted autoloads
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "cfrs" "cfrs.el" (0 0 0 0))
;;; Generated autoloads from cfrs.el

(autoload 'cfrs-read "cfrs" "\
Read a string using a pos-frame with given PROMPT and INITIAL-INPUT.

\(fn PROMPT &optional INITIAL-INPUT)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cfrs" '("cfrs-")))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; cfrs-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/treemacs-20220622.2016/treemacs-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/treemacs-20220622.2016/treemacs-autoloads.el"))
;;; treemacs-autoloads.el --- automatically extracted autoloads  -*- lexical-binding: t -*-
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "treemacs" "treemacs.el" (0 0 0 0))
;;; Generated autoloads from treemacs.el

(autoload 'treemacs-version "treemacs" "\
Return the `treemacs-version'." t nil)

(autoload 'treemacs "treemacs" "\
Initialise or toggle treemacs.
- If the treemacs window is visible hide it.
- If a treemacs buffer exists, but is not visible show it.
- If no treemacs buffer exists for the current frame create and show it.
- If the workspace is empty additionally ask for the root path of the first
  project to add.
- With a prefix ARG launch treemacs and force it to select a workspace

\(fn &optional ARG)" t nil)

(autoload 'treemacs-select-directory "treemacs" "\
Select a directory to open in treemacs.
This command will open *just* the selected directory in treemacs.  If there are
other projects in the workspace they will be removed.

To *add* a project to the current workspace use
`treemacs-add-project-to-workspace' or
`treemacs-add-and-display-current-project' instead." t nil)

(autoload 'treemacs-find-file "treemacs" "\
Find and focus the current file in the treemacs window.
If the current buffer has visits no file or with a prefix ARG ask for the
file instead.
Will show/create a treemacs buffers if it is not visible/does not exist.
For the most part only useful when `treemacs-follow-mode' is not active.

\(fn &optional ARG)" t nil)

(autoload 'treemacs-find-tag "treemacs" "\
Find and move point to the tag at point in the treemacs view.
Most likely to be useful when `treemacs-tag-follow-mode' is not active.

Will ask to change the treemacs root if the file to find is not under the
root.  If no treemacs buffer exists it will be created with the current file's
containing directory as root.  Will do nothing if the current buffer is not
visiting a file or Emacs cannot find any tags for the current file." t nil)

(autoload 'treemacs-select-window "treemacs" "\
Select the treemacs window if it is visible.
Bring it to the foreground if it is not visible.
Initialise a new treemacs buffer as calling `treemacs' would if there is no
treemacs buffer for this frame.

In case treemacs is already selected behaviour will depend on
`treemacs-select-when-already-in-treemacs'.

A non-nil prefix ARG will also force a workspace switch.

\(fn &optional ARG)" t nil)

(autoload 'treemacs-show-changelog "treemacs" "\
Show the changelog of treemacs." t nil)

(autoload 'treemacs-edit-workspaces "treemacs" "\
Edit your treemacs workspaces and projects as an `org-mode' file." t nil)

(autoload 'treemacs-display-current-project-exclusively "treemacs" "\
Display the current project, and *only* the current project.
Like `treemacs-add-and-display-current-project' this will add the current
project to treemacs based on either projectile, the built-in project.el, or the
current working directory.

However the \\='exclusive\\=' part means that it will make the current project
the only project, all other projects *will be removed* from the current
workspace." t nil)

(autoload 'treemacs-add-and-display-current-project "treemacs" "\
Open treemacs and add the current project root to the workspace.
The project is determined first by projectile (if treemacs-projectile is
installed), then by project.el, then by the current working directory.

If the project is already registered with treemacs just move point to its root.
An error message is displayed if the current buffer is not part of any project." t nil)

(register-definition-prefixes "treemacs" '("treemacs-version"))

;;;***

;;;### (autoloads nil "treemacs-annotations" "treemacs-annotations.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-annotations.el

atars/neagleson/.emacs.d/elpa/treemacs-20220622.2016/treemacs-autoloa
;;;***

;;;### (autoloads nil "treemacs-async" "treemacs-async.el" (0 0 0
;;;;;;  0))
;;; Generated autoloads from treemacs-async.el

(register-definition-prefixes "treemacs-async" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-bookmarks" "treemacs-bookmarks.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-bookmarks.el

(autoload 'treemacs-bookmark "treemacs-bookmarks" "\
Find a bookmark in treemacs.
Only bookmarks marking either a file or a directory are offered for selection.
Treemacs will try to find and focus the given bookmark's location, in a similar
fashion to `treemacs-find-file'.

With a prefix argument ARG treemacs will also open the bookmarked location.

\(fn &optional ARG)" t nil)

(autoload 'treemacs--bookmark-handler "treemacs-bookmarks" "\
Open Treemacs into a bookmark RECORD.

\(fn RECORD)" nil nil)

(autoload 'treemacs-add-bookmark "treemacs-bookmarks" "\
Add the current node to Emacs' list of bookmarks.
For file and directory nodes their absolute path is saved.  Tag nodes
additionally also save the tag's position.  A tag can only be bookmarked if the
treemacs node is pointing to a valid buffer position." t nil)

(register-definition-prefixes "treemacs-bookmarks" '("treemacs--"))

;;;***

;;;### (autoloads nil "treemacs-compatibility" "treemacs-compatibility.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-compatibility.el

(register-definition-prefixes "treemacs-compatibility" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-core-utils" "treemacs-core-utils.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-core-utils.el

(register-definition-prefixes "treemacs-core-utils" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-customization" "treemacs-customization.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-customization.el

(register-definition-prefixes "treemacs-customization" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-diagnostics" "treemacs-diagnostics.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-diagnostics.el

(register-definition-prefixes "treemacs-diagnostics" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-dom" "treemacs-dom.el" (0 0 0 0))
;;; Generated autoloads from treemacs-dom.el

(register-definition-prefixes "treemacs-dom" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-extensions" "treemacs-extensions.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-extensions.el

(register-definition-prefixes "treemacs-extensions" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-file-management" "treemacs-file-management.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-file-management.el

(autoload 'treemacs-delete-file "treemacs-file-management" "\
Delete node at point.
A delete action must always be confirmed.  Directories are deleted recursively.
By default files are deleted by moving them to the trash.  With a prefix ARG
they will instead be wiped irreversibly.

\(fn &optional ARG)" t nil)

(autoload 'treemacs-delete-marked-files "treemacs-file-management" "\
Delete all marked files.

A delete action must always be confirmed.  Directories are deleted recursively.
By default files are deleted by moving them to the trash.  With a prefix ARG
they will instead be wiped irreversibly.

For marking files see `treemacs-bulk-file-actions'.

\(fn &optional ARG)" t nil)

(autoload 'treemacs-move-file "treemacs-file-management" "\
Move file (or directory) at point." t nil)

(autoload 'treemacs-copy-file "treemacs-file-management" "\
Copy file (or directory) at point." t nil)

(autoload 'treemacs-move-marked-files "treemacs-file-management" "\
Move all marked files.

For marking files see `treemacs-bulk-file-actions'." t nil)

(autoload 'treemacs-copy-marked-files "treemacs-file-management" "\
Copy all marked files.

For marking files see `treemacs-bulk-file-actions'." t nil)

(autoload 'treemacs-rename-file "treemacs-file-management" "\
Rename the file/directory at point.

Buffers visiting the renamed file or visiting a file inside the renamed
directory and windows showing them will be reloaded.  The list of recent files
will likewise be updated." t nil)

(autoload 'treemacs-show-marked-files "treemacs-file-management" "\
Print a list of all files marked by treemacs." t nil)

(autoload 'treemacs-mark-or-unmark-path-at-point "treemacs-file-management" "\
Mark or unmark the absolute path of the node at point." t nil)

(autoload 'treemacs-reset-marks "treemacs-file-management" "\
Unmark all previously marked files in the current buffer." t nil)

(autoload 'treemacs-delete-marked-paths "treemacs-file-management" "\
Delete all previously marked files." t nil)

(autoload 'treemacs-bulk-file-actions "treemacs-file-management" "\
Activate the bulk file actions hydra.
This interface allows to quickly (unmark) files, so as to copy, move or delete
them in bulk.

Note that marking files is *permanent*, files will stay marked until they are
either manually unmarked or deleted.  You can show a list of all currently
marked files with `treemacs-show-marked-files' or `s' in the hydra." t nil)

(autoload 'treemacs-create-file "treemacs-file-management" "\
Create a new file.
Enter first the directory to create the new file in, then the new file's name.
The pre-selection for what directory to create in is based on the \"nearest\"
path to point - the containing directory for tags and files or the directory
itself, using $HOME when there is no path at or near point to grab." t nil)

(autoload 'treemacs-create-dir "treemacs-file-management" "\
Create a new directory.
Enter first the directory to create the new dir in, then the new dir's name.
The pre-selection for what directory to create in is based on the \"nearest\"
path to point - the containing directory for tags and files or the directory
itself, using $HOME when there is no path at or near point to grab." t nil)

(register-definition-prefixes "treemacs-file-management" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-filewatch-mode" "treemacs-filewatch-mode.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-filewatch-mode.el

(register-definition-prefixes "treemacs-filewatch-mode" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-follow-mode" "treemacs-follow-mode.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-follow-mode.el

(register-definition-prefixes "treemacs-follow-mode" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-fringe-indicator" "treemacs-fringe-indicator.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-fringe-indicator.el

(register-definition-prefixes "treemacs-fringe-indicator" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-git-commit-diff-mode" "treemacs-git-commit-diff-mode.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-git-commit-diff-mode.el

(defvar treemacs-git-commit-diff-mode nil "\
Non-nil if Treemacs-Git-Commit-Diff mode is enabled.
See the `treemacs-git-commit-diff-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-git-commit-diff-mode'.")

(custom-autoload 'treemacs-git-commit-diff-mode "treemacs-git-commit-diff-mode" nil)

(autoload 'treemacs-git-commit-diff-mode "treemacs-git-commit-diff-mode" "\
Minor mode to display commit differences for your git-tracked projects.

This is a minor mode.  If called interactively, toggle the
`Treemacs-Git-Commit-Diff mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-git-commit-diff-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

When enabled treemacs will add an annotation next to every git project showing
how many commits ahead or behind your current branch is compared to its remote
counterpart.

The difference will be shown using the format `↑x ↓y', where `x' and `y' are the
numbers of commits a project is ahead or behind.  The numbers are determined
based on the output of `git status -sb'.

By default the annotation is only updated when manually updating a project with
`treemacs-refresh'.  You can install `treemacs-magit' to enable automatic
updates whenever you commit/fetch/rebase etc. in magit.

Does not require `treemacs-git-mode' to be active.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "treemacs-git-commit-diff-mode" '("treemacs--"))

;;;***

;;;### (autoloads nil "treemacs-header-line" "treemacs-header-line.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-header-line.el

(defvar treemacs-indicate-top-scroll-mode nil "\
Non-nil if Treemacs-Indicate-Top-Scroll mode is enabled.
See the `treemacs-indicate-top-scroll-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-indicate-top-scroll-mode'.")

(custom-autoload 'treemacs-indicate-top-scroll-mode "treemacs-header-line" nil)

(autoload 'treemacs-indicate-top-scroll-mode "treemacs-header-line" "\
Minor mode which shows whether treemacs is scrolled all the way to the top.

This is a minor mode.  If called interactively, toggle the
`Treemacs-Indicate-Top-Scroll mode' mode.  If the prefix argument
is positive, enable the mode, and if it is zero or negative,
disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-indicate-top-scroll-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

When this mode is enabled the header line of the treemacs window will display
whether the window's first line is visible or not.

The strings used for the display are determined by
`treemacs-header-scroll-indicators'.

This mode makes use of `treemacs-user-header-line-format' - and thus
`header-line-format' - and is therefore incompatible with other modifications to
these options.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "treemacs-header-line" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-hydras" "treemacs-hydras.el" (0 0
;;;;;;  0 0))
;;; Generated autoloads from treemacs-hydras.el

(autoload 'treemacs-common-helpful-hydra "treemacs-hydras" "\
Summon a helpful hydra to show you the treemacs keymap.

This hydra will show the most commonly used keybinds for treemacs.  For the more
advanced (probably rarely used keybinds) see `treemacs-advanced-helpful-hydra'.

The keybinds shown in this hydra are not static, but reflect the actual
keybindings currently in use (including evil mode).  If the hydra is unable to
find the key a command is bound to it will show a blank instead." t nil)

(autoload 'treemacs-advanced-helpful-hydra "treemacs-hydras" "\
Summon a helpful hydra to show you the treemacs keymap.

This hydra will show the more advanced (rarely used) keybinds for treemacs.  For
the more commonly used keybinds see `treemacs-common-helpful-hydra'.

The keybinds shown in this hydra are not static, but reflect the actual
keybindings currently in use (including evil mode).  If the hydra is unable to
find the key a command is bound to it will show a blank instead." t nil)

(register-definition-prefixes "treemacs-hydras" '("treemacs-helpful-hydra"))

;;;***

;;;### (autoloads nil "treemacs-icons" "treemacs-icons.el" (0 0 0
;;;;;;  0))
;;; Generated autoloads from treemacs-icons.el

(autoload 'treemacs-resize-icons "treemacs-icons" "\
Resize the current theme's icons to the given SIZE.

If SIZE is \\='nil' the icons are not resized and will retain their default size
of 22 pixels.

There is only one size, the icons are square and the aspect ratio will be
preserved when resizing them therefore width and height are the same.

Resizing the icons only works if Emacs was built with ImageMagick support, or if
using Emacs >= 27.1,which has native image resizing support.  If this is not the
case this function will not have any effect.

Custom icons are not taken into account, only the size of treemacs' own icons
png are changed.

\(fn SIZE)" t nil)

(autoload 'treemacs-define-custom-icon "treemacs-icons" "\
Define a custom ICON for the current theme to use for FILE-EXTENSIONS.

Note that treemacs has a very loose definition of what constitutes a file
extension - it's either everything past the last period, or just the file's full
name if there is no period.  This makes it possible to match file names like
'.gitignore' and 'Makefile'.

Additionally FILE-EXTENSIONS are also not case sensitive and will be stored in a
down-cased state.

\(fn ICON &rest FILE-EXTENSIONS)" nil nil)

(autoload 'treemacs-define-custom-image-icon "treemacs-icons" "\
Same as `treemacs-define-custom-icon' but for image icons instead of strings.
FILE is the path to an icon image (and not the actual icon string).
FILE-EXTENSIONS are all the (not case-sensitive) file extensions the icon
should be used for.

\(fn FILE &rest FILE-EXTENSIONS)" nil nil)

(autoload 'treemacs-map-icons-with-auto-mode-alist "treemacs-icons" "\
Remaps icons for EXTENSIONS according to `auto-mode-alist'.
EXTENSIONS should be a list of file extensions such that they match the regex
stored in `auto-mode-alist', for example \\='(\".cc\").
MODE-ICON-ALIST is an alist that maps which mode from `auto-mode-alist' should
be assigned which treemacs icon, for example
`((c-mode . ,(treemacs-get-icon-value \"c\"))
  (c++-mode . ,(treemacs-get-icon-value \"cpp\")))

\(fn EXTENSIONS MODE-ICON-ALIST)" nil nil)

(register-definition-prefixes "treemacs-icons" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-interface" "treemacs-interface.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-interface.el

(register-definition-prefixes "treemacs-interface" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-logging" "treemacs-logging.el" (0
;;;;;;  0 0 0))
;;; Generated autoloads from treemacs-logging.el

(register-definition-prefixes "treemacs-logging" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-macros" "treemacs-macros.el" (0 0
;;;;;;  0 0))
;;; Generated autoloads from treemacs-macros.el

(register-definition-prefixes "treemacs-macros" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-mode" "treemacs-mode.el" (0 0 0 0))
;;; Generated autoloads from treemacs-mode.el

(autoload 'treemacs-mode "treemacs-mode" "\
A major mode for displaying the file system in a tree layout.

\(fn)" t nil)

(register-definition-prefixes "treemacs-mode" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-mouse-interface" "treemacs-mouse-interface.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-mouse-interface.el

(autoload 'treemacs-leftclick-action "treemacs-mouse-interface" "\
Move focus to the clicked line.
Must be bound to a mouse click, or EVENT will not be supplied.

\(fn EVENT)" t nil)

(autoload 'treemacs-doubleclick-action "treemacs-mouse-interface" "\
Run the appropriate double-click action for the current node.
In the default configuration this means to expand/collapse directories and open
files and tags in the most recently used window.

This function's exact configuration is stored in
`treemacs-doubleclick-actions-config'.

Must be bound to a mouse double click to properly handle a click EVENT.

\(fn EVENT)" t nil)

(autoload 'treemacs-single-click-expand-action "treemacs-mouse-interface" "\
A modified single-leftclick action that expands the clicked nodes.
Can be bound to <mouse1> if you prefer to expand nodes with a single click
instead of a double click.  Either way it must be bound to a mouse click, or
EVENT will not be supplied.

Clicking on icons will expand a file's tags, just like
`treemacs-leftclick-action'.

\(fn EVENT)" t nil)

(autoload 'treemacs-dragleftclick-action "treemacs-mouse-interface" "\
Drag a file/dir node to be opened in a window.
Must be bound to a mouse click, or EVENT will not be supplied.

\(fn EVENT)" t nil)

(autoload 'treemacs-define-doubleclick-action "treemacs-mouse-interface" "\
Define the behaviour of `treemacs-doubleclick-action'.
Determines that a button with a given STATE should lead to the execution of
ACTION.

The list of possible states can be found in `treemacs-valid-button-states'.
ACTION should be one of the `treemacs-visit-node-*' commands.

\(fn STATE ACTION)" nil nil)

(autoload 'treemacs-node-buffer-and-position "treemacs-mouse-interface" "\
Return source buffer or list of buffer and position for the current node.
This information can be used for future display.  Stay in the selected window
and ignore any prefix argument.

\(fn &optional _)" t nil)

(autoload 'treemacs-rightclick-menu "treemacs-mouse-interface" "\
Show a contextual right click menu based on click EVENT.

\(fn EVENT)" t nil)

(register-definition-prefixes "treemacs-mouse-interface" '("treemacs--"))

;;;***

;;;### (autoloads nil "treemacs-peek-mode" "treemacs-peek-mode.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-peek-mode.el

(defvar treemacs-peek-mode nil "\
Non-nil if Treemacs-Peek mode is enabled.
See the `treemacs-peek-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-peek-mode'.")

(custom-autoload 'treemacs-peek-mode "treemacs-peek-mode" nil)

(autoload 'treemacs-peek-mode "treemacs-peek-mode" "\
Minor mode that allows you to peek at buffers before deciding to open them.

This is a minor mode.  If called interactively, toggle the
`Treemacs-Peek mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-peek-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

While the mode is active treemacs will automatically display the file at point,
without leaving the treemacs window.

Peeking will stop when you leave the treemacs window, be it through a command
like `treemacs-RET-action' or some other window selection change.

Files' buffers that have been opened for peeking will be cleaned up if they did
not exist before peeking started.

The peeked window can be scrolled using
`treemacs-next/previous-line-other-window' and
`treemacs-next/previous-page-other-window'

\(fn &optional ARG)" t nil)

(register-definition-prefixes "treemacs-peek-mode" '("treemacs--"))

;;;***

;;;### (autoloads nil "treemacs-persistence" "treemacs-persistence.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-persistence.el

(register-definition-prefixes "treemacs-persistence" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-project-follow-mode" "treemacs-project-follow-mode.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-project-follow-mode.el

(defvar treemacs-project-follow-mode nil "\
Non-nil if Treemacs-Project-Follow mode is enabled.
See the `treemacs-project-follow-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-project-follow-mode'.")

(custom-autoload 'treemacs-project-follow-mode "treemacs-project-follow-mode" nil)

(autoload 'treemacs-project-follow-mode "treemacs-project-follow-mode" "\
Toggle `treemacs-only-current-project-mode'.

This is a minor mode.  If called interactively, toggle the
`Treemacs-Project-Follow mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-project-follow-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

This is a minor mode meant for those who do not care about treemacs' workspace
features, or its preference to work with multiple projects simultaneously.  When
enabled it will function as an automated version of
`treemacs-display-current-project-exclusively', making sure that, after a small
idle delay, the current project, and *only* the current project, is displayed in
treemacs.

The project detection is based on the current buffer, and will try to determine
the project using the following methods, in the order they are listed:

- the current projectile.el project, if `treemacs-projectile' is installed
- the current project.el project
- the current `default-directory'

The update will only happen when treemacs is in the foreground, meaning a
treemacs window must exist in the current scope.

This mode requires at least Emacs version 27 since it relies on
`window-buffer-change-functions' and `window-selection-change-functions'.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "treemacs-project-follow-mode" '("treemacs--"))

;;;***

;;;### (autoloads nil "treemacs-rendering" "treemacs-rendering.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-rendering.el

(register-definition-prefixes "treemacs-rendering" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-scope" "treemacs-scope.el" (0 0 0
;;;;;;  0))
;;; Generated autoloads from treemacs-scope.el

(register-definition-prefixes "treemacs-scope" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-tag-follow-mode" "treemacs-tag-follow-mode.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-tag-follow-mode.el

(autoload 'treemacs--flatten&sort-imenu-index "treemacs-tag-follow-mode" "\
Flatten current file's imenu index and sort it by tag position.
The tags are sorted into the order in which they appear, regardless of section
or nesting depth." nil nil)

(defvar treemacs-tag-follow-mode nil "\
Non-nil if Treemacs-Tag-Follow mode is enabled.
See the `treemacs-tag-follow-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-tag-follow-mode'.")

(custom-autoload 'treemacs-tag-follow-mode "treemacs-tag-follow-mode" nil)

(autoload 'treemacs-tag-follow-mode "treemacs-tag-follow-mode" "\
Toggle `treemacs-tag-follow-mode'.

This is a minor mode.  If called interactively, toggle the
`Treemacs-Tag-Follow mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-tag-follow-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

This acts as more fine-grained alternative to `treemacs-follow-mode' and will
thus disable `treemacs-follow-mode' on activation.  When enabled treemacs will
focus not only the file of the current buffer, but also the tag at point.

The follow action is attached to Emacs' idle timer and will run
`treemacs-tag-follow-delay' seconds of idle time.  The delay value is not an
integer, meaning it accepts floating point values like 1.5.

Every time a tag is followed a re--scan of the imenu index is forced by
temporarily setting `imenu-auto-rescan' to t (though a cache is applied as long
as the buffer is unmodified).  This is necessary to assure that creation or
deletion of tags does not lead to errors and guarantees an always up-to-date tag
view.

Note that in order to move to a tag in treemacs the treemacs buffer's window
needs to be temporarily selected, which will reset blink-cursor-mode's timer if
it is enabled.  This will result in the cursor blinking seemingly pausing for a
short time and giving the appearance of the tag follow action lasting much
longer than it really does.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "treemacs-tag-follow-mode" '("treemacs--"))

;;;***

;;;### (autoloads nil "treemacs-tags" "treemacs-tags.el" (0 0 0 0))
;;; Generated autoloads from treemacs-tags.el

(autoload 'treemacs--expand-file-node "treemacs-tags" "\
Open tag items for file BTN.
Recursively open all tags below BTN when RECURSIVE is non-nil.

\(fn BTN &optional RECURSIVE)" nil nil)

(autoload 'treemacs--collapse-file-node "treemacs-tags" "\
Close node given by BTN.
Remove all open tag entries under BTN when RECURSIVE.

\(fn BTN &optional RECURSIVE)" nil nil)

(autoload 'treemacs--visit-or-expand/collapse-tag-node "treemacs-tags" "\
Visit tag section BTN if possible, expand or collapse it otherwise.
Pass prefix ARG on to either visit or toggle action.

FIND-WINDOW is a special provision depending on this function's invocation
context and decides whether to find the window to display in (if the tag is
visited instead of the node being expanded).

On the one hand it can be called based on `treemacs-RET-actions-config' (or
TAB).  The functions in these configs are expected to find the windows they need
to display in themselves, so FIND-WINDOW must be t. On the other hand this
function is also called from the top level vist-node functions like
`treemacs-visit-node-vertical-split' which delegates to the
`treemacs--execute-button-action' macro which includes the determination of
the display window.

\(fn BTN ARG FIND-WINDOW)" nil nil)

(autoload 'treemacs--expand-tag-node "treemacs-tags" "\
Open tags node items for BTN.
Open all tag section under BTN when call is RECURSIVE.

\(fn BTN &optional RECURSIVE)" nil nil)

(autoload 'treemacs--collapse-tag-node "treemacs-tags" "\
Close tags node at BTN.
Remove all open tag entries under BTN when RECURSIVE.

\(fn BTN &optional RECURSIVE)" nil nil)

(autoload 'treemacs--goto-tag "treemacs-tags" "\
Go to the tag at BTN.

\(fn BTN)" nil nil)

(autoload 'treemacs--create-imenu-index-function "treemacs-tags" "\
The `imenu-create-index-function' for treemacs buffers." nil nil)

(function-put 'treemacs--create-imenu-index-function 'side-effect-free 't)

(register-definition-prefixes "treemacs-tags" '("treemacs--"))

;;;***

;;;### (autoloads nil "treemacs-themes" "treemacs-themes.el" (0 0
;;;;;;  0 0))
;;; Generated autoloads from treemacs-themes.el

(register-definition-prefixes "treemacs-themes" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-visuals" "treemacs-visuals.el" (0
;;;;;;  0 0 0))
;;; Generated autoloads from treemacs-visuals.el

(register-definition-prefixes "treemacs-visuals" '("treemacs-"))

;;;***

;;;### (autoloads nil "treemacs-workspaces" "treemacs-workspaces.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from treemacs-workspaces.el

(register-definition-prefixes "treemacs-workspaces" '("treemacs-"))

;;;***

;;;### (autoloads nil nil ("treemacs-faces.el" "treemacs-pkg.el")
;;;;;;  (0 0 0 0))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; treemacs-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/tree-sitter-20220212.1632/tree-sitter-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/tree-sitter-20220212.1632/tree-sitter-autoloads.el"))
;;; tree-sitter-autoloads.el --- automatically extracted autoloads
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "tree-sitter" "tree-sitter.el" (0 0 0 0))
;;; Generated autoloads from tree-sitter.el

(autoload 'tree-sitter-mode "tree-sitter" "\
Minor mode that keeps an up-to-date syntax tree using incremental parsing.

If called interactively, enable Tree-Sitter mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'turn-on-tree-sitter-mode "tree-sitter" "\
Turn on `tree-sitter-mode' in a buffer, if possible." nil nil)

(put 'global-tree-sitter-mode 'globalized-minor-mode t)

(defvar global-tree-sitter-mode nil "\
Non-nil if Global Tree-Sitter mode is enabled.
See the `global-tree-sitter-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-tree-sitter-mode'.")

(custom-autoload 'global-tree-sitter-mode "tree-sitter" nil)

(autoload 'global-tree-sitter-mode "tree-sitter" "\
Toggle Tree-Sitter mode in all buffers.
With prefix ARG, enable Global Tree-Sitter mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Tree-Sitter mode is enabled in all buffers where
`turn-on-tree-sitter-mode' would do it.
See `tree-sitter-mode' for more information on Tree-Sitter mode.

\(fn &optional ARG)" t nil)

(define-obsolete-function-alias 'tree-sitter-node-at-point 'tree-sitter-node-at-pos "2021-08-30")

(autoload 'tree-sitter-node-at-pos "tree-sitter" "\
Return the smallest syntax node of type NODE-TYPE at POS.
NODE-TYPE may be a symbol, corresponding to a named syntax node; a string,
corresponding to an anonymous node, or a keyword, holding a special value. For
the special value `:named', return the smallest named node at POS. For the
special value `:anonymous', return the smallest anonymous node at POS. IF POS is
nil, POS defaults to the point. Unless IGNORE-INVALID-TYPE is non-nil, signal an
error when a specified named NODE-TYPE does not exist in the current grammar.
Whenever NODE-TYPE is non-nil (other than `:named'), it is possible for the
function to return nil.

\(fn &optional NODE-TYPE POS IGNORE-INVALID-TYPE)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tree-sitter" '("tree-sitter-")))

;;;***

;;;### (autoloads nil "tree-sitter-cli" "tree-sitter-cli.el" (0 0
;;;;;;  0 0))
;;; Generated autoloads from tree-sitter-cli.el

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tree-sitter-cli" '("tree-sitter-cli-")))

;;;***

;;;### (autoloads nil "tree-sitter-debug" "tree-sitter-debug.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from tree-sitter-debug.el

(autoload 'tree-sitter-debug-mode "tree-sitter-debug" "\
Toggle syntax tree debugging for the current buffer.
This mode displays the syntax tree in another buffer, and keeps it up-to-date.

If called interactively, enable Tree-Sitter-Debug mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'tree-sitter-debug-query "tree-sitter-debug" "\
Execute query PATTERNS against the current syntax tree and return captures.

If the optional arg MATCHES is non-nil, matches (from `tsc-query-matches') are
returned instead of captures (from `tsc-query-captures').

If the optional arg TAG-ASSIGNER is non-nil, it is passed to `tsc-make-query' to
assign custom tags to capture names.

This function is primarily useful for debugging purpose. Other packages should
build queries and cursors once, then reuse them.

\(fn PATTERNS &optional MATCHES TAG-ASSIGNER)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tree-sitter-debug" '("tree-sitter-debug-")))

;;;***

;;;### (autoloads nil "tree-sitter-extras" "tree-sitter-extras.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from tree-sitter-extras.el

(autoload 'tree-sitter-save-excursion "tree-sitter-extras" "\
Save the current location within the syntax tree; execute BODY; restore it.

If the original location cannot be restored due to the syntax tree changing too
much, this macro behaves like `save-excursion', unless
`tree-sitter-save-excursion-try-hard' is non-nil, in which case it tries to get
as close as possible to the original location.

After the location is restored, the buffer text is scrolled so that point stays
at roughly the same vertical screen position. If `pixel-scroll' is available and
`tree-sitter-save-excursion-pixelwise' is non-nil, pixelwise scrolling is used
instead, to make this restoration exact.

\(fn &rest BODY)" nil t)

(function-put 'tree-sitter-save-excursion 'lisp-indent-function '0)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tree-sitter-extras" '("tree-sitter-")))

;;;***

;;;### (autoloads nil "tree-sitter-hl" "tree-sitter-hl.el" (0 0 0
;;;;;;  0))
;;; Generated autoloads from tree-sitter-hl.el

(autoload 'tree-sitter-hl-add-patterns "tree-sitter-hl" "\
Add custom syntax highlighting PATTERNS.
If LANG-SYMBOL is non-nil, it identifies the language that PATTERNS should be
applied to. If LANG-SYMBOL is nil, PATTERNS are applied to the current buffer,
and are prioritized over language-specific patterns. Either way, PATTERNS are
prioritized over `tree-sitter-hl-default-patterns'.

This function should be used by minor modes and configuration code. Major modes
should set `tree-sitter-hl-default-patterns' instead.

\(fn LANG-SYMBOL PATTERNS)" nil nil)

(function-put 'tree-sitter-hl-add-patterns 'lisp-indent-function '1)

(autoload 'tree-sitter-hl-mode "tree-sitter-hl" "\
Toggle syntax highlighting based on Tree-sitter's syntax tree.
If `tree-sitter-hl-default-patterns' is nil, turning on this mode does nothing,
and does not interfere with `font-lock-mode'.

If called interactively, enable Tree-Sitter-Hl mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Enabling this automatically enables `tree-sitter-mode' in the buffer.

To enable this automatically whenever `tree-sitter-mode' is enabled:

 (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tree-sitter-hl" '("tree-sitter-hl-")))

;;;***

;;;### (autoloads nil "tree-sitter-load" "tree-sitter-load.el" (0
;;;;;;  0 0 0))
;;; Generated autoloads from tree-sitter-load.el

(autoload 'tree-sitter-require "tree-sitter-load" "\
Return the language object loaded and registered under the name LANG-SYMBOL.
If the language has not been loaded yet, load it with `tree-sitter-load'.

FILE should be the base name (without extension) of the native shared library
that exports the language as the native symbol NATIVE-SYMBOL-NAME.

If FILE is nil, the base name is assumed to be LANG-SYMBOL's name.

If NATIVE-SYMBOL-NAME is nil, the name of the exported native symbol is assumed
to be LANG-SYMBOL's name, prefixed with \"tree_sitter_\".

\(fn LANG-SYMBOL &optional FILE NATIVE-SYMBOL-NAME)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tree-sitter-load" '("tree-sitter-l")))

;;;***

;;;### (autoloads nil "tree-sitter-query" "tree-sitter-query.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from tree-sitter-query.el

(autoload 'tree-sitter-query-builder "tree-sitter-query" "\
Provide means for developers to write and test tree-sitter queries.

The buffer on focus when the command is called is set as the target buffer." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tree-sitter-query" '("tree-sitter-")))

;;;***

;;;### (autoloads nil nil ("tree-sitter-pkg.el") (0 0 0 0))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; tree-sitter-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/tree-sitter-langs-20220508.636/tree-sitter-langs-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/tree-sitter-langs-20220508.636/tree-sitter-langs-autoloads.el"))
;;; tree-sitter-langs-autoloads.el --- automatically extracted autoloads  -*- lexical-binding: t -*-
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "tree-sitter-langs" "tree-sitter-langs.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from tree-sitter-langs.el

(autoload 'tree-sitter-langs--init-load-path "tree-sitter-langs" "\
Add the directory containing compiled grammars to `tree-sitter-load-path'.

\(fn &rest ARGS)" nil nil)

(advice-add 'tree-sitter-load :before #'tree-sitter-langs--init-load-path)

(autoload 'tree-sitter-langs--init-major-mode-alist "tree-sitter-langs" "\
Link known major modes to languages provided by the bundle.

\(fn &rest ARGS)" nil nil)

(advice-add 'tree-sitter--setup :before #'tree-sitter-langs--init-major-mode-alist)

(autoload 'tree-sitter-langs--set-hl-default-patterns "tree-sitter-langs" "\
Use syntax highlighting patterns provided by `tree-sitter-langs'.

\(fn &rest ARGS)" nil nil)

(advice-add 'tree-sitter-hl--setup :before #'tree-sitter-langs--set-hl-default-patterns)

(register-definition-prefixes "tree-sitter-langs" '("tree-sitter-langs-"))

;;;***

;;;### (autoloads nil "tree-sitter-langs-build" "tree-sitter-langs-build.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from tree-sitter-langs-build.el

aautoload 'tree-sitter-langs-install-grammars "tree-sitter-langs-build" "\
Download and install the specified VERSION of the language grammar bundle.
If VERSION or OS is not specified, use the default of
`tree-sitter-langs--bundle-version' and `tree-sitter-langs--os'.

This installs the grammar bundle even if the same version was already installed,
unless SKIP-IF-INSTALLED is non-nil.

The download bundle file is deleted after installation, unless KEEP-BUNDLE is
non-nil.

\(fn &optional SKIP-IF-INSTALLED VERSION OS KEEP-BUNDLE)" t nil)

(register-definition-prefixes "tree-sitter-langs-build" '("tree-sitter-langs-"))

;;;***

;;;### (autoloads nil nil ("tree-sitter-langs-pkg.el") (0 0 0 0))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; tree-sitter-langs-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/tree-sitter-ispell-20220704.340/tree-sitter-ispell-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/tree-sitter-ispell-20220704.340/tree-sitter-ispell-autoloads.el"))
;;; tree-sitter-ispell-autoloads.el --- automatically extracted autoloads  -*- lexical-binding: t -*-
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "tree-sitter-ispell" "tree-sitter-ispell.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from tree-sitter-ispell.el

(autoload 'tree-sitter-ispell-run-at-point "tree-sitter-ispell" "\
Run ispell at current point if there is a text node." t nil)

(register-definition-prefixes "tree-sitter-ispell" '("tree-sitter-ispell-"))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; tree-sitter-ispell-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/tree-sitter-indent-20220411.1439/tree-sitter-indent-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/tree-sitter-indent-20220411.1439/tree-sitter-indent-autoloads.el"))
;;; tree-sitter-indent-autoloads.el --- automatically extracted autoloads  -*- lexical-binding: t -*-
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "tree-sitter-indent" "tree-sitter-indent.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from tree-sitter-indent.el

(autoload 'tree-sitter-indent-line "tree-sitter-indent" "\
Use Tree-sitter as backend to indent current line." nil nil)

(autoload 'tree-sitter-indent-mode "tree-sitter-indent" "\
Use Tree-sitter as backend for indenting buffer.

This is a minor mode.  If called interactively, toggle the
`Tree-Sitter-Indent mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `tree-sitter-indent-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "tree-sitter-indent" '("tree-sitter-indent-"))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; tree-sitter-indent-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/tree-mode-20151104.1331/tree-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/tree-mode-20151104.1331/tree-mode-autoloads.el"))
;;; tree-mode-autoloads.el --- automatically extracted autoloads
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "tree-mode" "tree-mode.el" (0 0 0 0))
;;; Generated autoloads from tree-mode.el

(autoload 'tree-minor-mode "tree-mode" "\
More keybindings for tree-widget.

If called interactively, enable Tree minor mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it
if ARG is `toggle'; disable the mode otherwise.

\\{tree-mode-map}

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tree-mode" '("tree-mode")))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; tree-mode-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/transient-20210616.2222/transient-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/transient-20210616.2222/transient-autoloads.el"))
;;; transient-autoloads.el --- automatically extracted autoloads
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "transient" "transient.el" (0 0 0 0))
;;; Generated autoloads from transient.el

(autoload 'transient-insert-suffix "transient" "\
Insert a SUFFIX into PREFIX before LOC.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

\(fn PREFIX LOC SUFFIX)" nil nil)

(function-put 'transient-insert-suffix 'lisp-indent-function 'defun)

(autoload 'transient-append-suffix "transient" "\
Insert a SUFFIX into PREFIX after LOC.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

\(fn PREFIX LOC SUFFIX)" nil nil)

(function-put 'transient-append-suffix 'lisp-indent-function 'defun)

(autoload 'transient-replace-suffix "transient" "\
Replace the suffix at LOC in PREFIX with SUFFIX.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

\(fn PREFIX LOC SUFFIX)" nil nil)

(function-put 'transient-replace-suffix 'lisp-indent-function 'defun)

(autoload 'transient-remove-suffix "transient" "\
Remove the suffix or group at LOC in PREFIX.
PREFIX is a prefix command, a symbol.
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

\(fn PREFIX LOC)" nil nil)

(function-put 'transient-remove-suffix 'lisp-indent-function 'defun)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "transient" '("transient-")))

;;;***

;;;### (autoloads nil nil ("transient-pkg.el") (0 0 0 0))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; transient-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/toggle-quotes-20140710.926/toggle-quotes-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/toggle-quotes-20140710.926/toggle-quotes-autoloads.el"))
;;; toggle-quotes-autoloads.el --- automatically extracted autoloads
;;
;;; Code:
(add-to-list 'load-path (directory-file-name (or (file-name-directory #$) (car load-path))))

;;;### (autoloads nil "toggle-quotes" "toggle-quotes.el" (23400 19409
;;;;;;  0 0))
;;; Generated autoloads from toggle-quotes.el

(autoload 'toggle-quotes "toggle-quotes" "\
Toggle between single quotes and double quotes.

\(fn)" t nil)

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; End:
;;; toggle-quotes-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/todotxt-20220204.1903/todotxt-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/todotxt-20220204.1903/todotxt-autoloads.el"))
;;; todotxt-autoloads.el --- automatically extracted autoloads
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "todotxt" "todotxt.el" (0 0 0 0))
;;; Generated autoloads from todotxt.el

(autoload 'todotxt-mode "todotxt" "\
Major mode for working with todo.txt files. \\{todotxt-mode-map}

\(fn)" t nil)

(autoload 'todotxt "todotxt" "\
Open the todo.txt buffer.  If one already exists, bring it to
the front and focus it.  Otherwise, create one and load the data
from 'todotxt-file'." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "todotxt" '("todotxt-")))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; todotxt-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/epl-20180205.2049/epl-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/epl-20180205.2049/epl-autoloads.el"))
;;; epl-autoloads.el --- automatically extracted autoloads
;;
;;; Code:
(add-to-list 'load-path (directory-file-name (or (file-name-directory #$) (car load-path))))

;;;### (autoloads nil nil ("epl.el") (23400 19408 0 0))

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; End:
;;; epl-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/pkg-info-20150517.1143/pkg-info-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/pkg-info-20150517.1143/pkg-info-autoloads.el"))
;;; pkg-info-autoloads.el --- automatically extracted autoloads
;;
;;; Code:
(add-to-list 'load-path (directory-file-name (or (file-name-directory #$) (car load-path))))

;;;### (autoloads nil "pkg-info" "pkg-info.el" (23400 19406 0 0))
;;; Generated autoloads from pkg-info.el

(autoload 'pkg-info-library-original-version "pkg-info" "\
Get the original version in the header of LIBRARY.

The original version is stored in the X-Original-Version header.
This header is added by the MELPA package archive to preserve
upstream version numbers.

LIBRARY is either a symbol denoting a named feature, or a library
name as string.

If SHOW is non-nil, show the version in the minibuffer.

Return the version from the header of LIBRARY as list.  Signal an
error if the LIBRARY was not found or had no X-Original-Version
header.

See Info node `(elisp)Library Headers' for more information
about library headers.

\(fn LIBRARY &optional SHOW)" t nil)

(autoload 'pkg-info-library-version "pkg-info" "\
Get the version in the header of LIBRARY.

LIBRARY is either a symbol denoting a named feature, or a library
name as string.

If SHOW is non-nil, show the version in the minibuffer.

Return the version from the header of LIBRARY as list.  Signal an
error if the LIBRARY was not found or had no proper header.

See Info node `(elisp)Library Headers' for more information
about library headers.

\(fn LIBRARY &optional SHOW)" t nil)

(autoload 'pkg-info-defining-library-original-version "pkg-info" "\
Get the original version of the library defining FUNCTION.

The original version is stored in the X-Original-Version header.
This header is added by the MELPA package archive to preserve
upstream version numbers.

If SHOW is non-nil, show the version in mini-buffer.

This function is mainly intended to find the version of a major
or minor mode, i.e.

   (pkg-info-defining-library-version 'flycheck-mode)

Return the version of the library defining FUNCTION.  Signal an
error if FUNCTION is not a valid function, if its defining
library was not found, or if the library had no proper version
header.

\(fn FUNCTION &optional SHOW)" t nil)

(autoload 'pkg-info-defining-library-version "pkg-info" "\
Get the version of the library defining FUNCTION.

If SHOW is non-nil, show the version in mini-buffer.

This function is mainly intended to find the version of a major
or minor mode, i.e.

   (pkg-info-defining-library-version 'flycheck-mode)

Return the version of the library defining FUNCTION.  Signal an
error if FUNCTION is not a valid function, if its defining
library was not found, or if the library had no proper version
header.

\(fn FUNCTION &optional SHOW)" t nil)

(autoload 'pkg-info-package-version "pkg-info" "\
Get the version of an installed PACKAGE.

If SHOW is non-nil, show the version in the minibuffer.

Return the version as list, or nil if PACKAGE is not installed.

\(fn PACKAGE &optional SHOW)" t nil)

(autoload 'pkg-info-version-info "pkg-info" "\
Obtain complete version info for LIBRARY and PACKAGE.

LIBRARY is a symbol denoting a named feature, or a library name
as string.  PACKAGE is a symbol denoting an ELPA package.  If
omitted or nil, default to LIBRARY.

If SHOW is non-nil, show the version in the minibuffer.

When called interactively, prompt for LIBRARY.  When called
interactively with prefix argument, prompt for PACKAGE as well.

Return a string with complete version information for LIBRARY.
This version information contains the version from the headers of
LIBRARY, and the version of the installed PACKAGE, the LIBRARY is
part of.  If PACKAGE is not installed, or if the PACKAGE version
is the same as the LIBRARY version, do not include a package
version.

\(fn LIBRARY &optional PACKAGE SHOW)" t nil)

;;;***

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; End:
;;; pkg-info-autoloads.el ends here
)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/flycheck-20220612.1800/flycheck-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/flycheck-20220612.1800/flycheck-autoloads.el"))
;;; flycheck-autoloads.el --- automatically extracted autoloads  -*- lexical-binding: t -*-
;;
;;; Code:

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory #$) (car load-path))))


;;;### (autoloads nil "flycheck" "flycheck.el" (0 0 0 0))
;;; Generated autoloads from flycheck.el

(autoload 'flycheck-manual "flycheck" "\
Open the Flycheck manual." t nil)

(autoload 'flycheck-mode "flycheck" "\
Flycheck is a minor mode for on-the-fly syntax checking.

In `flycheck-mode' the buffer is automatically syntax-checked
using the first suitable syntax checker from `flycheck-checkers'.
Use `flycheck-select-checker' to select a checker for the current
buffer manually.

If you run into issues, use `\\[flycheck-verify-setup]' to get help.

Flycheck supports many languages out of the box, and many
additional ones are available on MELPA.  Adding new ones is very
easy.  Complete documentation is available online at URL
`https://www.flycheck.org/en/latest/'.  Please report issues and
request features at URL `https://github.com/flycheck/flycheck'.

Flycheck displays its status in the mode line.  In the default
configuration, it looks like this:

`FlyC'     This buffer has not been checked yet.
`FlyC-'    Flycheck doesn't have a checker for this buffer.
`FlyC*'    Flycheck is running.  Expect results soon!
`FlyC:3|2' This buffer contains three warnings and two errors.
           Use `\\[flycheck-list-errors]' to see the list.

You may also see the following icons:
`FlyC!'    The checker crashed.
`FlyC.'    The last syntax check was manually interrupted.
`FlyC?'    The checker did something unexpected, like exiting with 1
           but returning no errors.

The following keybindings are available in `flycheck-mode':

\\{flycheck-mode-map}
\(you can change the prefix by customizing
`flycheck-keymap-prefix')

If called interactively, enable Flycheck mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is ‘toggle’; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'global-flycheck-mode 'globalized-minor-mode t)

(defvar global-flycheck-mode nil "\
Non-nil if Global Flycheck mode is enabled.
See the `global-flycheck-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-flycheck-mode'.")

(custom-autoload 'global-flycheck-mode "flycheck" nil)

(autoload 'global-flycheck-mode "flycheck" "\
Toggle Flycheck mode in all buffers.
With prefix ARG, enable Global Flycheck mode if ARG is positive; otherwise,
disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Flycheck mode is enabled in all buffers where `flycheck-mode-on-safe' would do
it.

See `flycheck-mode' for more information on Flycheck mode.

\(fn &optional ARG)" t nil)

(autoload 'flycheck-define-error-level "flycheck" "\
Define a new error LEVEL with PROPERTIES.

The following PROPERTIES constitute an error level:

`:severity SEVERITY'
     A number denoting the severity of this level.  The higher
     the number, the more severe is this level compared to other
     levels.  Defaults to 0; info is -10, warning is 10, and
     error is 100.

     The severity is used by `flycheck-error-level-<' to
     determine the ordering of errors according to their levels.

`:compilation-level LEVEL'

     A number indicating the broad class of messages that errors
     at this level belong to: one of 0 (info), 1 (warning), or
     2 or nil (error).  Defaults to nil.

     This is used by `flycheck-checker-pattern-to-error-regexp'
     to map error levels into `compilation-mode''s hierarchy and
     to get proper highlighting of errors in `compilation-mode'.

`:overlay-category CATEGORY'
     A symbol denoting the overlay category to use for error
     highlight overlays for this level.  See Info
     node `(elisp)Overlay Properties' for more information about
     overlay categories.

     A category for an error level overlay should at least define
     the `face' property, for error highlighting.  Another useful
     property for error level categories is `priority', to
     influence the stacking of multiple error level overlays.

`:fringe-bitmap BITMAPS'
     A fringe bitmap symbol denoting the bitmap to use for fringe
     indicators for this level, or a cons of two bitmaps (one for
     narrow fringes and one for wide fringes).  See Info node
     `(elisp)Fringe Bitmaps' for more information about fringe
     bitmaps, including a list of built-in fringe bitmaps.

`:fringe-face FACE'
     A face symbol denoting the face to use for fringe indicators
     for this level.

`:margin-spec SPEC'
     A display specification indicating what to display in the
     margin when `flycheck-indication-mode' is `left-margin' or
     `right-margin'.  See Info node `(elisp)Displaying in the
     Margins'.  If omitted, Flycheck generates an image spec from
     the fringe bitmap.

`:error-list-face FACE'
     A face symbol denoting the face to use for messages of this
     level in the error list.  See `flycheck-list-errors'.

\(fn LEVEL &rest PROPERTIES)" nil nil)

(function-put 'flycheck-define-error-level 'lisp-indent-function '1)

(autoload 'flycheck-define-command-checker "flycheck" "\
Define SYMBOL as syntax checker to run a command.

Define SYMBOL as generic syntax checker via
`flycheck-define-generic-checker', which uses an external command
to check the buffer.  SYMBOL and DOCSTRING are the same as for
`flycheck-define-generic-checker'.

In addition to the properties understood by
`flycheck-define-generic-checker', the following PROPERTIES
constitute a command syntax checker.  Unless otherwise noted, all
properties are mandatory.  Note that the default `:error-filter'
of command checkers is `flycheck-sanitize-errors'.

`:command COMMAND'
     The command to run for syntax checking.

     COMMAND is a list of the form `(EXECUTABLE [ARG ...])'.

     EXECUTABLE is a string with the executable of this syntax
     checker.  It can be overridden with the variable
     `flycheck-SYMBOL-executable'.  Note that this variable is
     NOT implicitly defined by this function.  Use
     `flycheck-def-executable-var' to define this variable.

     Each ARG is an argument to the executable, either as string,
     or as special symbol or form for
     `flycheck-substitute-argument', which see.

`:error-patterns PATTERNS'
     A list of patterns to parse the output of the `:command'.

     Each ITEM in PATTERNS is a list `(LEVEL SEXP ...)', where
     LEVEL is a Flycheck error level (see
     `flycheck-define-error-level'), followed by one or more RX
     `SEXP's which parse an error of that level and extract line,
     column, file name and the message.

     See `rx' for general information about RX, and
     `flycheck-rx-to-string' for some special RX forms provided
     by Flycheck.

     All patterns are applied in the order of declaration to the
     whole output of the syntax checker.  Output already matched
     by a pattern will not be matched by subsequent patterns.  In
     other words, the first pattern wins.

     This property is optional.  If omitted, however, an
     `:error-parser' is mandatory.

`:error-parser FUNCTION'
     A function to parse errors with.

     The function shall accept three arguments OUTPUT CHECKER
     BUFFER.  OUTPUT is the syntax checker output as string,
     CHECKER the syntax checker that was used, and BUFFER a
     buffer object representing the checked buffer.  The function
     must return a list of `flycheck-error' objects parsed from
     OUTPUT.

     This property is optional.  If omitted, it defaults to
     `flycheck-parse-with-patterns'.  In this case,
     `:error-patterns' is mandatory.

`:standard-input t'
     Whether to send the buffer contents on standard input.

     If this property is given and has a non-nil value, send the
     contents of the buffer on standard input.

     Defaults to nil.

Note that you may not give `:start', `:interrupt', and
`:print-doc' for a command checker.  You can give a custom
`:verify' function, though, whose results will be appended to the
default `:verify' function of command checkers.

\(fn SYMBOL DOCSTRING &rest PROPERTIES)" nil nil)

(function-put 'flycheck-define-command-checker 'lisp-indent-function '1)

(function-put 'flycheck-define-command-checker 'doc-string-elt '2)

(autoload 'flycheck-def-config-file-var "flycheck" "\
Define SYMBOL as config file variable for CHECKER, with default FILE-NAME.

SYMBOL is declared as customizable variable using `defcustom', to
provide configuration files for the given syntax CHECKER.
CUSTOM-ARGS are forwarded to `defcustom'.

FILE-NAME is the initial value of the new variable.  If omitted,
the default value is nil.  It can be either a string or a list of
strings.

Use this together with the `config-file' form in the `:command'
argument to `flycheck-define-checker'.

\(fn SYMBOL CHECKER &optional FILE-NAME &rest CUSTOM-ARGS)" nil t)

(function-put 'flycheck-def-config-file-var 'lisp-indent-function '3)

(autoload 'flycheck-def-option-var "flycheck" "\
Define SYMBOL as option variable with INIT-VALUE for CHECKER.

SYMBOL is declared as customizable variable using `defcustom', to
provide an option for the given syntax CHECKERS (a checker or a
list of checkers).  INIT-VALUE is the initial value of the
variable, and DOCSTRING is its docstring.  CUSTOM-ARGS are
forwarded to `defcustom'.

Use this together with the `option', `option-list' and
`option-flag' forms in the `:command' argument to
`flycheck-define-checker'.

\(fn SYMBOL INIT-VALUE CHECKERS DOCSTRING &rest CUSTOM-ARGS)" nil t)

(function-put 'flycheck-def-option-var 'lisp-indent-function '3)

(function-put 'flycheck-def-option-var 'doc-string-elt '4)

(autoload 'flycheck-define-checker "flycheck" "\
Define SYMBOL as command syntax checker with DOCSTRING and PROPERTIES.

Like `flycheck-define-command-checker', but PROPERTIES must not
be quoted.  Also, implicitly define the executable variable for
SYMBOL with `flycheck-def-executable-var'.

\(fn SYMBOL DOCSTRING &rest PROPERTIES)" nil t)

(function-put 'flycheck-define-checker 'lisp-indent-function '1)

(function-put 'flycheck-define-checker 'doc-string-elt '2)

(register-definition-prefixes "flycheck" '("flycheck-" "help-flycheck-checker-d" "list-flycheck-errors"))

;;;***

;;;### (autoloads nil "flycheck-buttercup" "flycheck-buttercup.el"
;;;;;;  (0 0 0 0))
;;; Generated autoloads from flycheck-buttercup.el

atars/neagleson/.emacs.d/elpa/flycheck-20220612.1800/flycheck-autoloads.elormat-error-list"))



(register-definition-prefixes "flycheck-ert" '("flycheck-er"))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/tide-20220514.614/tide-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/tide-20220514.614/tide-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/tide-20220514.614/tide-autoloads.el") (car load-path))))



(autoload 'company-tide "tide" "\


\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(autoload 'tide-format-before-save "tide" "\
Before save hook to format the buffer before each save." t nil)

(autoload 'tide-format "tide" "\
Format the current region or buffer." t nil)

(autoload 'tide-setup "tide" "\
Setup `tide-mode' in current buffer." t nil)

(autoload 'tide-mode "tide" "\
Minor mode for Typescript Interactive Development Environment.

This is a minor mode.  If called interactively, toggle the `tide
mode' mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `tide-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\\{tide-mode-map}

\(fn &optional ARG)" t nil)

(autoload 'tide-project-errors "tide" nil t nil)

(autoload 'tide-unhighlight-identifiers "tide" "\
Remove highlights from previously highlighted identifier." nil nil)

(autoload 'tide-hl-identifier "tide" "\
Highlight all instances of the identifier under point. Removes
highlights from previously highlighted identifier." t nil)

(autoload 'tide-hl-identifier-mode "tide" "\
Highlight instances of the identifier at point after a short
timeout.

This is a minor mode.  If called interactively, toggle the
`Tide-Hl-Identifier mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `tide-hl-identifier-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "tide" '("tide-" "xref-tide-xref-backend"))



(register-definition-prefixes "tide-lv" '("tide-lv-"))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/textsize-20220427.1445/textsize-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/textsize-20220427.1445/textsize-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/textsize-20220427.1445/textsize-autoloads.el") (car load-path))))



(autoload 'textsize-modify-manual-adjust "textsize" "\
Adjust FRAME's font-point adjustment by OFFSET persistently.

Add a custom fixed offset to the textsize point size calculation.

If OFFSET is nil, reset adjustment to zero.

\(fn FRAME OFFSET)" nil nil)

(autoload 'textsize-increment "textsize" "\
Increment the current frame's automatic text size." t nil)

(autoload 'textsize-decrement "textsize" "\
Decrement the current frame's automatic text size." t nil)

(autoload 'textsize-reset "textsize" "\
Reset the adjustment on the current frame's automatic text size." t nil)

(autoload 'textsize-fix-frame "textsize" "\
Set the default text size appropriately for FRAME display.

\(fn &optional FRAME)" t nil)

(defvar textsize-mode nil "\
Non-nil if Textsize mode is enabled.
See the `textsize-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `textsize-mode'.")

(custom-autoload 'textsize-mode "textsize" nil)

(autoload 'textsize-mode "textsize" "\
Adjusts the default text size for the size and pixel pitch of the display.

This is a minor mode.  If called interactively, toggle the
`Textsize mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='textsize-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "textsize" '("textsize-"))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/tern-20181108.722/tern-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/tern-20181108.722/tern-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/tern-20181108.722/tern-autoloads.el") (car load-path))))


(autoload 'tern-use-server "tern" "\


\(fn PORT SERVER)" t nil)

(autoload 'tern-mode "tern" "\
Minor mode binding to the Tern JavaScript analyzer

\(fn &optional ARG)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/auto-complete-20220105.439/auto-complete-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/auto-complete-20220105.439/auto-complete-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/auto-complete-20220105.439/auto-complete-autoloads.el") (car load-path))))



(autoload 'auto-complete "auto-complete" "\
Start auto-completion at current point.

\(fn &optional SOURCES)" t nil)

(autoload 'auto-complete-mode "auto-complete" "\
AutoComplete mode

If called interactively, enable Auto-Complete mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'global-auto-complete-mode 'globalized-minor-mode t)

(defvar global-auto-complete-mode nil "\
Non-nil if Global Auto-Complete mode is enabled.
See the `global-auto-complete-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-auto-complete-mode'.")

(custom-autoload 'global-auto-complete-mode "auto-complete" nil)

(autoload 'global-auto-complete-mode "auto-complete" "\
Toggle Auto-Complete mode in all buffers.
With prefix ARG, enable Global Auto-Complete mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Auto-Complete mode is enabled in all buffers where
`auto-complete-mode-maybe' would do it.
See `auto-complete-mode' for more information on Auto-Complete mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "auto-complete" '("ac-" "auto-complete-mode")))



(autoload 'ac-config-default "auto-complete-config" "\
No documentation." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "auto-complete-config" '("ac-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/tern-auto-complete-20170521.1935/tern-auto-complete-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/tern-auto-complete-20170521.1935/tern-auto-complete-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/tern-auto-complete-20170521.1935/tern-auto-complete-autoloads.el") (car load-path))))


(autoload 'tern-ac-setup "tern-auto-complete" "\
Setup auto-complete for tern-mode.

\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/term-manager-20190610.2032/term-manager-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/term-manager-20190610.2032/term-manager-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/term-manager-20190610.2032/term-manager-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "term-manager" '("term-manager")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "term-manager-indexed-mapping" '("term-manager-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/projectile-20220710.959/projectile-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/projectile-20220710.959/projectile-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/projectile-20220710.959/projectile-autoloads.el") (car load-path))))



(autoload 'projectile-version "projectile" "\
Get the Projectile version as string.

If called interactively or if SHOW-VERSION is non-nil, show the
version in the echo area and the messages buffer.

The returned string includes both, the version from package.el
and the library version, if both a present and different.

If the version number could not be determined, signal an error,
if called interactively, or if SHOW-VERSION is non-nil, otherwise
just return nil.

\(fn &optional SHOW-VERSION)" t nil)

(autoload 'projectile-invalidate-cache "projectile" "\
Remove the current project's files from `projectile-projects-cache'.

With a prefix argument PROMPT prompts for the name of the project whose cache
to invalidate.

\(fn PROMPT)" t nil)

(autoload 'projectile-purge-file-from-cache "projectile" "\
Purge FILE from the cache of the current project.

\(fn FILE)" t nil)

(autoload 'projectile-purge-dir-from-cache "projectile" "\
Purge DIR from the cache of the current project.

\(fn DIR)" t nil)

(autoload 'projectile-cache-current-file "projectile" "\
Add the currently visited file to the cache." t nil)

(autoload 'projectile-discover-projects-in-directory "projectile" "\
Discover any projects in DIRECTORY and add them to the projectile cache.

If DEPTH is non-nil recursively descend exactly DEPTH levels below DIRECTORY and
discover projects there.

\(fn DIRECTORY &optional DEPTH)" t nil)

(autoload 'projectile-discover-projects-in-search-path "projectile" "\
Discover projects in `projectile-project-search-path'.
Invoked automatically when `projectile-mode' is enabled." t nil)

(autoload 'projectile-switch-to-buffer "projectile" "\
Switch to a project buffer." t nil)

(autoload 'projectile-switch-to-buffer-other-window "projectile" "\
Switch to a project buffer and show it in another window." t nil)

(autoload 'projectile-switch-to-buffer-other-frame "projectile" "\
Switch to a project buffer and show it in another frame." t nil)

(autoload 'projectile-display-buffer "projectile" "\
Display a project buffer in another window without selecting it." t nil)

(autoload 'projectile-project-buffers-other-buffer "projectile" "\
Switch to the most recently selected buffer project buffer.
Only buffers not visible in windows are returned." t nil)

(autoload 'projectile-multi-occur "projectile" "\
Do a `multi-occur' in the project's buffers.
With a prefix argument, show NLINES of context.

\(fn &optional NLINES)" t nil)

(autoload 'projectile-find-other-file "projectile" "\
Switch between files with the same name but different extensions.
With FLEX-MATCHING, match any file that contains the base name of current file.
Other file extensions can be customized with the variable
`projectile-other-file-alist'.

\(fn &optional FLEX-MATCHING)" t nil)

(autoload 'projectile-find-other-file-other-window "projectile" "\
Switch between files with different extensions in other window.
Switch between files with the same name but different extensions in other
window.  With FLEX-MATCHING, match any file that contains the base name of
current file.  Other file extensions can be customized with the variable
`projectile-other-file-alist'.

\(fn &optional FLEX-MATCHING)" t nil)

(autoload 'projectile-find-other-file-other-frame "projectile" "\
Switch between files with different extensions in other frame.
Switch between files with the same name but different extensions in other frame.
With FLEX-MATCHING, match any file that contains the base name of current
file.  Other file extensions can be customized with the variable
`projectile-other-file-alist'.

\(fn &optional FLEX-MATCHING)" t nil)

(autoload 'projectile-find-file-dwim "projectile" "\
Jump to a project's files using completion based on context.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

If point is on a filename, Projectile first tries to search for that
file in project:

- If it finds just a file, it switches to that file instantly.  This works
even if the filename is incomplete, but there's only a single file in the
current project that matches the filename at point.  For example, if
there's only a single file named \"projectile/projectile.el\" but the
current filename is \"projectile/proj\" (incomplete),
`projectile-find-file-dwim' still switches to \"projectile/projectile.el\"
immediately because this is the only filename that matches.

- If it finds a list of files, the list is displayed for selecting.  A list
of files is displayed when a filename appears more than one in the project
or the filename at point is a prefix of more than two files in a project.
For example, if `projectile-find-file-dwim' is executed on a filepath like
\"projectile/\", it lists the content of that directory.  If it is executed
on a partial filename like \"projectile/a\", a list of files with character
'a' in that directory is presented.

- If it finds nothing, display a list of all files in project for selecting.

\(fn &optional INVALIDATE-CACHE)" t nil)

(autoload 'projectile-find-file-dwim-other-window "projectile" "\
Jump to a project's files using completion based on context in other window.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

If point is on a filename, Projectile first tries to search for that
file in project:

- If it finds just a file, it switches to that file instantly.  This works
even if the filename is incomplete, but there's only a single file in the
current project that matches the filename at point.  For example, if
there's only a single file named \"projectile/projectile.el\" but the
current filename is \"projectile/proj\" (incomplete),
`projectile-find-file-dwim-other-window' still switches to
\"projectile/projectile.el\" immediately because this is the only filename
that matches.

- If it finds a list of files, the list is displayed for selecting.  A list
of files is displayed when a filename appears more than one in the project
or the filename at point is a prefix of more than two files in a project.
For example, if `projectile-find-file-dwim-other-window' is executed on a
filepath like \"projectile/\", it lists the content of that directory.  If
it is executed on a partial filename like \"projectile/a\", a list of files
with character 'a' in that directory is presented.

- If it finds nothing, display a list of all files in project for selecting.

\(fn &optional INVALIDATE-CACHE)" t nil)

(autoload 'projectile-find-file-dwim-other-frame "projectile" "\
Jump to a project's files using completion based on context in other frame.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

If point is on a filename, Projectile first tries to search for that
file in project:

- If it finds just a file, it switches to that file instantly.  This works
even if the filename is incomplete, but there's only a single file in the
current project that matches the filename at point.  For example, if
there's only a single file named \"projectile/projectile.el\" but the
current filename is \"projectile/proj\" (incomplete),
`projectile-find-file-dwim-other-frame' still switches to
\"projectile/projectile.el\" immediately because this is the only filename
that matches.

- If it finds a list of files, the list is displayed for selecting.  A list
of files is displayed when a filename appears more than one in the project
or the filename at point is a prefix of more than two files in a project.
For example, if `projectile-find-file-dwim-other-frame' is executed on a
filepath like \"projectile/\", it lists the content of that directory.  If
it is executed on a partial filename like \"projectile/a\", a list of files
with character 'a' in that directory is presented.

- If it finds nothing, display a list of all files in project for selecting.

\(fn &optional INVALIDATE-CACHE)" t nil)

(autoload 'projectile-find-file "projectile" "\
Jump to a project's file using completion.
With a prefix arg INVALIDATE-CACHE invalidates the cache first.

\(fn &optional INVALIDATE-CACHE)" t nil)

(autoload 'projectile-find-file-other-window "projectile" "\
Jump to a project's file using completion and show it in another window.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

\(fn &optional INVALIDATE-CACHE)" t nil)

(autoload 'projectile-find-file-other-frame "projectile" "\
Jump to a project's file using completion and show it in another frame.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

\(fn &optional INVALIDATE-CACHE)" t nil)

(autoload 'projectile-toggle-project-read-only "projectile" "\
Toggle project read only." t nil)

(autoload 'projectile-find-dir "projectile" "\
Jump to a project's directory using completion.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

\(fn &optional INVALIDATE-CACHE)" t nil)

(autoload 'projectile-find-dir-other-window "projectile" "\
Jump to a project's directory in other window using completion.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

\(fn &optional INVALIDATE-CACHE)" t nil)

(autoload 'projectile-find-dir-other-frame "projectile" "\
Jump to a project's directory in other frame using completion.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

\(fn &optional INVALIDATE-CACHE)" t nil)

(autoload 'projectile-find-test-file "projectile" "\
Jump to a project's test file using completion.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

\(fn &optional INVALIDATE-CACHE)" t nil)

(autoload 'projectile-find-related-file-other-window "projectile" "\
Open related file in other window." t nil)

(autoload 'projectile-find-related-file-other-frame "projectile" "\
Open related file in other frame." t nil)

(autoload 'projectile-find-related-file "projectile" "\
Open related file." t nil)

(autoload 'projectile-related-files-fn-groups "projectile" "\
Generate a related-files-fn which relates as KIND for files in each of GROUPS.

\(fn KIND GROUPS)" nil nil)

(autoload 'projectile-related-files-fn-extensions "projectile" "\
Generate a related-files-fn which relates as KIND for files having EXTENSIONS.

\(fn KIND EXTENSIONS)" nil nil)

(autoload 'projectile-related-files-fn-test-with-prefix "projectile" "\
Generate a related-files-fn which relates tests and impl.
Use files with EXTENSION based on TEST-PREFIX.

\(fn EXTENSION TEST-PREFIX)" nil nil)

(autoload 'projectile-related-files-fn-test-with-suffix "projectile" "\
Generate a related-files-fn which relates tests and impl.
Use files with EXTENSION based on TEST-SUFFIX.

\(fn EXTENSION TEST-SUFFIX)" nil nil)

(autoload 'projectile-project-info "projectile" "\
Display info for current project." t nil)

(autoload 'projectile-find-implementation-or-test-other-window "projectile" "\
Open matching implementation or test file in other window.

See the documentation of `projectile--find-matching-file' and
`projectile--find-matching-test' for how implementation and test files
are determined." t nil)

(autoload 'projectile-find-implementation-or-test-other-frame "projectile" "\
Open matching implementation or test file in other frame.

See the documentation of `projectile--find-matching-file' and
`projectile--find-matching-test' for how implementation and test files
are determined." t nil)

(autoload 'projectile-toggle-between-implementation-and-test "projectile" "\
Toggle between an implementation file and its test file.


See the documentation of `projectile--find-matching-file' and
`projectile--find-matching-test' for how implementation and test files
are determined." t nil)

(autoload 'projectile-grep "projectile" "\
Perform rgrep in the project.

With a prefix ARG asks for files (globbing-aware) which to grep in.
With prefix ARG of `-' (such as `M--'), default the files (without prompt),
to `projectile-grep-default-files'.

With REGEXP given, don't query the user for a regexp.

\(fn &optional REGEXP ARG)" t nil)

(autoload 'projectile-ag "projectile" "\
Run an ag search with SEARCH-TERM in the project.

With an optional prefix argument ARG SEARCH-TERM is interpreted as a
regular expression.

\(fn SEARCH-TERM &optional ARG)" t nil)

(autoload 'projectile-ripgrep "projectile" "\
Run a ripgrep (rg) search with `SEARCH-TERM' at current project root.

With an optional prefix argument ARG SEARCH-TERM is interpreted as a
regular expression.

This command depends on of the Emacs packages ripgrep or rg being
installed to work.

\(fn SEARCH-TERM &optional ARG)" t nil)

(autoload 'projectile-regenerate-tags "projectile" "\
Regenerate the project's [e|g]tags." t nil)

(autoload 'projectile-find-tag "projectile" "\
Find tag in project." t nil)

(autoload 'projectile-run-command-in-root "projectile" "\
Invoke `execute-extended-command' in the project's root." t nil)

(autoload 'projectile-run-shell-command-in-root "projectile" "\
Invoke `shell-command' in the project's root.

\(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER)" t nil)

(autoload 'projectile-run-async-shell-command-in-root "projectile" "\
Invoke `async-shell-command' in the project's root.

\(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER)" t nil)

(autoload 'projectile-run-gdb "projectile" "\
Invoke `gdb' in the project's root." t nil)

(autoload 'projectile-run-shell "projectile" "\
Invoke `shell' in the project's root.

Switch to the project specific shell buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

\(fn &optional ARG)" t nil)

(autoload 'projectile-run-eshell "projectile" "\
Invoke `eshell' in the project's root.

Switch to the project specific eshell buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

\(fn &optional ARG)" t nil)

(autoload 'projectile-run-ielm "projectile" "\
Invoke `ielm' in the project's root.

Switch to the project specific ielm buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

\(fn &optional ARG)" t nil)

(autoload 'projectile-run-term "projectile" "\
Invoke `term' in the project's root.

Switch to the project specific term buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

\(fn &optional ARG)" t nil)

(autoload 'projectile-run-vterm "projectile" "\
Invoke `vterm' in the project's root.

Switch to the project specific term buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

\(fn &optional ARG)" t nil)

(autoload 'projectile-replace "projectile" "\
Replace literal string in project using non-regexp `tags-query-replace'.

With a prefix argument ARG prompts you for a directory on which
to run the replacement.

\(fn &optional ARG)" t nil)

(autoload 'projectile-replace-regexp "projectile" "\
Replace a regexp in the project using `tags-query-replace'.

With a prefix argument ARG prompts you for a directory on which
to run the replacement.

\(fn &optional ARG)" t nil)

(autoload 'projectile-kill-buffers "projectile" "\
Kill project buffers.

The buffer are killed according to the value of
`projectile-kill-buffers-filter'." t nil)

(autoload 'projectile-save-project-buffers "projectile" "\
Save all project buffers." t nil)

(autoload 'projectile-dired "projectile" "\
Open `dired' at the root of the project." t nil)

(autoload 'projectile-dired-other-window "projectile" "\
Open `dired'  at the root of the project in another window." t nil)

(autoload 'projectile-dired-other-frame "projectile" "\
Open `dired' at the root of the project in another frame." t nil)

(autoload 'projectile-vc "projectile" "\
Open `vc-dir' at the root of the project.

For git projects `magit-status-internal' is used if available.
For hg projects `monky-status' is used if available.

If PROJECT-ROOT is given, it is opened instead of the project
root directory of the current buffer file.  If interactively
called with a prefix argument, the user is prompted for a project
directory to open.

\(fn &optional PROJECT-ROOT)" t nil)

(autoload 'projectile-recentf "projectile" "\
Show a list of recently visited files in a project." t nil)

(autoload 'projectile-configure-project "projectile" "\
Run project configure command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

\(fn ARG)" t nil)

(autoload 'projectile-compile-project "projectile" "\
Run project compilation command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

\(fn ARG)" t nil)

(autoload 'projectile-test-project "projectile" "\
Run project test command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

\(fn ARG)" t nil)

(autoload 'projectile-install-project "projectile" "\
Run project install command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

\(fn ARG)" t nil)

(autoload 'projectile-package-project "projectile" "\
Run project package command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

\(fn ARG)" t nil)

(autoload 'projectile-run-project "projectile" "\
Run project run command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

\(fn ARG)" t nil)

(autoload 'projectile-repeat-last-command "projectile" "\
Run last projectile external command.

External commands are: `projectile-configure-project',
`projectile-compile-project', `projectile-test-project',
`projectile-install-project', `projectile-package-project',
and `projectile-run-project'.

If the prefix argument SHOW_PROMPT is non nil, the command can be edited.

\(fn SHOW-PROMPT)" t nil)

(autoload 'projectile-switch-project "projectile" "\
Switch to a project we have visited before.
Invokes the command referenced by `projectile-switch-project-action' on switch.
With a prefix ARG invokes `projectile-commander' instead of
`projectile-switch-project-action.'

\(fn &optional ARG)" t nil)

(autoload 'projectile-switch-open-project "projectile" "\
Switch to a project we have currently opened.
Invokes the command referenced by `projectile-switch-project-action' on switch.
With a prefix ARG invokes `projectile-commander' instead of
`projectile-switch-project-action.'

\(fn &optional ARG)" t nil)

(autoload 'projectile-find-file-in-directory "projectile" "\
Jump to a file in a (maybe regular) DIRECTORY.

This command will first prompt for the directory the file is in.

\(fn &optional DIRECTORY)" t nil)

(autoload 'projectile-find-file-in-known-projects "projectile" "\
Jump to a file in any of the known projects." t nil)

(autoload 'projectile-cleanup-known-projects "projectile" "\
Remove known projects that don't exist anymore." t nil)

(autoload 'projectile-clear-known-projects "projectile" "\
Clear both `projectile-known-projects' and `projectile-known-projects-file'." t nil)

(autoload 'projectile-reset-known-projects "projectile" "\
Clear known projects and rediscover." t nil)

(autoload 'projectile-remove-known-project "projectile" "\
Remove PROJECT from the list of known projects.

\(fn &optional PROJECT)" t nil)

(autoload 'projectile-remove-current-project-from-known-projects "projectile" "\
Remove the current project from the list of known projects." t nil)

(autoload 'projectile-add-known-project "projectile" "\
Add PROJECT-ROOT to the list of known projects.

\(fn PROJECT-ROOT)" t nil)

(autoload 'projectile-ibuffer "projectile" "\
Open an IBuffer window showing all buffers in the current project.

Let user choose another project when PROMPT-FOR-PROJECT is supplied.

\(fn PROMPT-FOR-PROJECT)" t nil)

(autoload 'projectile-commander "projectile" "\
Execute a Projectile command with a single letter.
The user is prompted for a single character indicating the action to invoke.
The `?' character describes then
available actions.

See `def-projectile-commander-method' for defining new methods." t nil)

(autoload 'projectile-browse-dirty-projects "projectile" "\
Browse dirty version controlled projects.

With a prefix argument, or if CACHED is non-nil, try to use the cached
dirty project list.

\(fn &optional CACHED)" t nil)

(autoload 'projectile-edit-dir-locals "projectile" "\
Edit or create a .dir-locals.el file of the project." t nil)

(defvar projectile-mode nil "\
Non-nil if Projectile mode is enabled.
See the `projectile-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `projectile-mode'.")

(custom-autoload 'projectile-mode "projectile" nil)

(autoload 'projectile-mode "projectile" "\
Minor mode to assist project management and navigation.

When called interactively, toggle `projectile-mode'.  With prefix
ARG, enable `projectile-mode' if ARG is positive, otherwise disable
it.

When called from Lisp, enable `projectile-mode' if ARG is omitted,
nil or positive.  If ARG is `toggle', toggle `projectile-mode'.
Otherwise behave as if called interactively.

\\{projectile-mode-map}

\(fn &optional ARG)" t nil)

(define-obsolete-function-alias 'projectile-global-mode 'projectile-mode "1.0")

(register-definition-prefixes "projectile" '("??" "compilation-find-file-projectile-find-compilation-buffer" "def-projectile-commander-method" "delete-file-projectile-remove-from-cache" "projectile-"))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/term-projectile-20190307.400/term-projectile-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/term-projectile-20190307.400/term-projectile-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/term-projectile-20190307.400/term-projectile-autoloads.el") (car load-path))))


(autoload 'term-projectile-switch-to "term-projectile" "\
Switch to an existing term-projectile buffer using `completing-read'.

\(fn)" t nil)

(autoload 'term-projectile-forward "term-projectile" "\
Switch forward to the next term-projectile ansi-term buffer.
Make a new one if none exists.

\(fn)" t nil)

(autoload 'term-projectile-backward "term-projectile" "\
Switch backward to the next term-projectile ansi-term buffer.
Make a new one if none exists.

\(fn)" t nil)

(autoload 'term-projectile-create-new "term-projectile" "\
Make a new `ansi-term' buffer for DIRECTORY.
If directory is nil, use the current projectile project

\(fn &optional (DIRECTORY (projectile-project-root)))" t nil)

(autoload 'term-projectile-default-directory-forward "term-projectile" "\
Switch forward to the next term-projectile ansi-term buffer for `defualt-directory'.

\(fn)" t nil)

(autoload 'term-projectile-default-directory-backward "term-projectile" "\
Switch backward to the next term-projectile ansi-term buffer for `defualt-directory'.

\(fn)" t nil)

(autoload 'term-projectile-default-directory-create-new "term-projectile" "\
Make a new `ansi-term' buffer in `default-directory'.

\(fn)" t nil)

(autoload 'term-projectile-global-forward "term-projectile" "\
Switch forward to the next term-projectile ansi-term buffer.
Make a new one if none exists.

\(fn)" t nil)

(autoload 'term-projectile-global-backward "term-projectile" "\
Switch backward to the next term-projectile ansi-term buffer.
Make a new one if none exists.

\(fn)" t nil)

(autoload 'term-projectile-global-create-new "term-projectile" "\
Make a new `ansi-term' buffer in `term-projectile-global-directory'.

\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/tea-time-20120331.820/tea-time-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/tea-time-20120331.820/tea-time-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/tea-time-20120331.820/tea-time-autoloads.el") (car load-path))))



)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/tagedit-20161121.855/tagedit-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/tagedit-20161121.855/tagedit-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/tagedit-20161121.855/tagedit-autoloads.el") (car load-path))))


(autoload 'tagedit-add-paredit-like-keybindings "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-add-experimental-features "tagedit" "\


\(fn)" nil nil)

(autoload 'tagedit-disable-experimental-features "tagedit" "\


\(fn)" nil nil)

(autoload 'tagedit-goto-tag-content "tagedit" "\
Goto start of content within current tag.

\(fn)" t nil)

(autoload 'tagedit-insert-exclamation-mark "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-maybe-insert-slash "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-kill "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-forward-slurp-tag "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-forward-barf-tag "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-kill-attribute "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-toggle-multiline-tag "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-raise-tag "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-splice-tag "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-split-tag "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-join-tags "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-convolute-tags "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-insert-equal "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-insert-quote "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-insert-lt "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-insert-hash "tagedit" "\


\(fn)" t nil)

(autoload 'tagedit-insert-dot "tagedit" "\


\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/tablist-20200427.2205/tablist-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/tablist-20200427.2205/tablist-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/tablist-20200427.2205/tablist-autoloads.el") (car load-path))))



(autoload 'tablist-minor-mode "tablist" "\
Toggle Tablist minor mode on or off.

If called interactively, enable Tablist minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\\{tablist-minor-mode-map}

\(fn &optional ARG)" t nil)

(autoload 'tablist-mode "tablist" "\


\(fn)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tablist" '("tablist-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "tablist-filter" '("tablist-filter-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/synosaurus-20191125.552/synosaurus-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/synosaurus-20191125.552/synosaurus-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/synosaurus-20191125.552/synosaurus-autoloads.el") (car load-path))))



(autoload 'synosaurus-lookup "synosaurus" "\
Lookup `WORD' in the thesaurus.

Queries the user for a word and looks it up in a thesaurus using
`synosaurus-backend'.

The resulting synonym list will be shown in a new buffer, where
the words are clickable to look them up instead of the original
word.

\(fn WORD)" t nil)

(autoload 'synosaurus-choose-and-replace "synosaurus" "\
Replace the word under the cursor by a synonym.

Look up the word in the thesaurus specified by
`synosaurus-backend', let the user choose an alternative
and replace the original word with that.

If the region is active, replace the region instead of the word
at point." t nil)

(autoload 'synosaurus-choose-and-insert "synosaurus" "\
Look up `WORD' in the thesaurus, choose a synonym for `WORD',
and insert it into the current buffer.

\(fn WORD)" t nil)

(autoload 'synosaurus-mode "synosaurus" "\
Minor mode for thesaurus lookups.

When called interactively, toggle `synosaurus-mode'. With prefix
ARG, enable `synosaurus-mode' if ARG is positive, otherwise
disable it.

When called from Lisp, enable `synosaurus-mode', if ARG is
omitted, nil or positive. If ARG is `toggle', toggle
`synosaurus-mode'. Otherwise behave as if called interactively.

The thesaurus backend can be configured with
`synosaurus-backend'.

\\{synosaurus-mode-map}

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "synosaurus" '("synosaurus-")))



(autoload 'synosaurus-backend-openthesaurus "synosaurus-openthesaurus" "\


\(fn WORD)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "synosaurus-openthesaurus" '("synosaurus-openthesaurus--")))



(autoload 'synosaurus-backend-wordnet "synosaurus-wordnet" "\


\(fn WORD)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "synosaurus-wordnet" '("synosaurus-wordnet--")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/iedit-20220216.717/iedit-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/iedit-20220216.717/iedit-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/iedit-20220216.717/iedit-autoloads.el") (car load-path))))



(autoload 'iedit-mode "iedit" "\
Toggle Iedit mode.
This command behaves differently, depending on the mark, point,
prefix argument and variable `iedit-transient-mark-sensitive'.

If Iedit mode is off, turn Iedit mode on.

When Iedit mode is turned on, all the occurrences of the current
region in the buffer (possibly narrowed) or a region are
highlighted.  If one occurrence is modified, the change are
propagated to all other occurrences simultaneously.

If region is not active, `iedit-default-occurrence' is called to
get an occurrence candidate, according to the thing at point.  It
might be url, email address, markup tag or current symbol(or
word).

In the above two situations, with digit prefix argument 0, only
occurrences in current function are matched.  This is good for
renaming refactoring in programming.

You can also switch to Iedit mode from isearch mode directly. The
current search string is used as occurrence.  All occurrences of
the current search string are highlighted.

With an universal prefix argument, the occurrence when Iedit mode
is turned off last time in current buffer is used as occurrence.
This is intended to recover last Iedit mode which is turned off.
If region active, Iedit mode is limited within the current
region.

With repeated universal prefix argument, the occurrence when
Iedit mode is turned off last time (might be in other buffer) is
used as occurrence.  If region active, Iedit mode is limited
within the current region.

With digital prefix argument 1, Iedit mode is limited on the
current symbol or the active region, which means just one
instance is highlighted.  This behavior serves as a start point
of incremental selection work flow.

If Iedit mode is on and region is active, Iedit mode is
restricted in the region, e.g. the occurrences outside of the
region is excluded.

If Iedit mode is on and region is active, with an universal
prefix argument, Iedit mode is restricted outside of the region,
e.g. the occurrences in the region is excluded.

Turn off Iedit mode in other situations.

Commands:
\\{iedit-mode-keymap}
Keymap used within overlays:
\\{iedit-mode-occurrence-keymap}

\(fn &optional ARG)" t nil)

(autoload 'iedit-mode-from-isearch "iedit" "\
Start Iedit mode using last search string as the regexp.

\(fn &optional ARG)" t nil)

(autoload 'iedit-mode-toggle-on-function "iedit" "\
Toggle Iedit mode on current function." t nil)

(autoload 'iedit-execute-last-modification "iedit" "\
Apply last modification in Iedit mode to the current buffer or an active region.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "iedit" '("iedit-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "iedit-lib" '("iedit-")))



(autoload 'iedit-rectangle-mode "iedit-rect" "\
Toggle Iedit-rect mode.

When Iedit-rect mode is on, a rectangle is started with visible
rectangle highlighting.  Rectangle editing support is based on
Iedit mechanism.

Commands:
\\{iedit-rect-keymap}

\(fn &optional BEG END)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "iedit-rect" '("iedit-rect")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/ivy-20220529.1130/ivy-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/ivy-20220529.1130/ivy-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/ivy-20220529.1130/ivy-autoloads.el") (car load-path))))



(register-definition-prefixes "colir" '("colir-"))



(autoload 'ivy-resume "ivy" "\
Resume the last completion session, or SESSION if non-nil.
With a prefix arg, try to restore a recorded completion session,
if one exists.

\(fn &optional SESSION)" t nil)

(autoload 'ivy-read "ivy" "\
Read a string in the minibuffer, with completion.

PROMPT is a string, normally ending in a colon and a space.
`ivy-count-format' is prepended to PROMPT during completion.

COLLECTION is either a list of strings, a function, an alist, or
a hash table, supplied for `minibuffer-completion-table'.

PREDICATE is applied to filter out the COLLECTION immediately.
This argument is for compatibility with `completing-read'.

When REQUIRE-MATCH is non-nil, only members of COLLECTION can be
selected. In can also be a lambda.

If INITIAL-INPUT is non-nil, then insert that input in the
minibuffer initially.

HISTORY is a name of a variable to hold the completion session
history.

KEYMAP is composed with `ivy-minibuffer-map'.

PRESELECT, when non-nil, determines which one of the candidates
matching INITIAL-INPUT to select initially.  An integer stands
for the position of the desired candidate in the collection,
counting from zero.  Otherwise, use the first occurrence of
PRESELECT in the collection.  Comparison is first done with
`equal'.  If that fails, and when applicable, match PRESELECT as
a regular expression.

DEF is for compatibility with `completing-read'.

UPDATE-FN is called each time the candidate list is re-displayed.

When SORT is non-nil, `ivy-sort-functions-alist' determines how
to sort candidates before displaying them.

ACTION is a function to call after selecting a candidate.
It takes one argument, the selected candidate. If COLLECTION is
an alist, the argument is a cons cell, otherwise it's a string.

MULTI-ACTION, when non-nil, is called instead of ACTION when
there are marked candidates. It takes the list of candidates as
its only argument. When it's nil, ACTION is called on each marked
candidate.

UNWIND is a function of no arguments to call before exiting.

RE-BUILDER is a function transforming input text into a regex
pattern.

MATCHER is a function which can override how candidates are
filtered based on user input.  It takes a regex pattern and a
list of candidates, and returns the list of matching candidates.

DYNAMIC-COLLECTION is a boolean specifying whether the list of
candidates is updated after each input by calling COLLECTION.

EXTRA-PROPS is a plist that can be used to store
collection-specific session-specific data.

CALLER is a symbol to uniquely identify the caller to `ivy-read'.
It is used, along with COLLECTION, to determine which
customizations apply to the current completion session.

\(fn PROMPT COLLECTION &key PREDICATE REQUIRE-MATCH INITIAL-INPUT HISTORY PRESELECT DEF KEYMAP UPDATE-FN SORT ACTION MULTI-ACTION UNWIND RE-BUILDER MATCHER DYNAMIC-COLLECTION EXTRA-PROPS CALLER)" nil nil)

(autoload 'ivy-completing-read "ivy" "\
Read a string in the minibuffer, with completion.

This interface conforms to `completing-read' and can be used for
`completing-read-function'.

PROMPT is a string that normally ends in a colon and a space.
COLLECTION is either a list of strings, an alist, an obarray, or a hash table.
PREDICATE limits completion to a subset of COLLECTION.
REQUIRE-MATCH is a boolean value or a symbol.  See `completing-read'.
INITIAL-INPUT is a string inserted into the minibuffer initially.
HISTORY is a list of previously selected inputs.
DEF is the default value.
INHERIT-INPUT-METHOD is currently ignored.

\(fn PROMPT COLLECTION &optional PREDICATE REQUIRE-MATCH INITIAL-INPUT HISTORY DEF INHERIT-INPUT-METHOD)" nil nil)

(defvar ivy-mode nil "\
Non-nil if ivy mode is enabled.
See the `ivy-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ivy-mode'.")

(custom-autoload 'ivy-mode "ivy" nil)

(autoload 'ivy-mode "ivy" "\
Toggle Ivy mode on or off.
Turn Ivy mode on if ARG is positive, off otherwise.
Turning on Ivy mode sets `completing-read-function' to
`ivy-completing-read'.

Global bindings:
\\{ivy-mode-map}

Minibuffer bindings:
\\{ivy-minibuffer-map}

\(fn &optional ARG)" t nil)

(autoload 'ivy-switch-buffer "ivy" "\
Switch to another buffer." t nil)

(autoload 'ivy-switch-view "ivy" "\
Switch to one of the window views stored by `ivy-push-view'." t nil)

(autoload 'ivy-switch-buffer-other-window "ivy" "\
Switch to another buffer in another window." t nil)

(register-definition-prefixes "ivy" '("ivy-" "with-ivy-window"))



(register-definition-prefixes "ivy-overlay" '("ivy-"))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/swiper-20220430.2247/swiper-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/swiper-20220430.2247/swiper-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/swiper-20220430.2247/swiper-autoloads.el") (car load-path))))



(autoload 'swiper-avy "swiper" "\
Jump to one of the current swiper candidates with `avy'." t nil)

(autoload 'swiper-backward "swiper" "\
`isearch-backward' with an overview.
When non-nil, INITIAL-INPUT is the initial search pattern.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'swiper-thing-at-point "swiper" "\
`swiper' with `ivy-thing-at-point'." t nil)

(autoload 'swiper-all-thing-at-point "swiper" "\
`swiper-all' with `ivy-thing-at-point'." t nil)

(autoload 'swiper "swiper" "\
`isearch-forward' with an overview.
When non-nil, INITIAL-INPUT is the initial search pattern.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'swiper-all "swiper" "\
Run `swiper' for all open buffers.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'swiper-isearch "swiper" "\
A `swiper' that's not line-based.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'swiper-isearch-backward "swiper" "\
Like `swiper-isearch' but the first result is before the point.

\(fn &optional INITIAL-INPUT)" t nil)

(register-definition-prefixes "swiper" '("swiper-"))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/lispy-20220209.1138/lispy-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/lispy-20220209.1138/lispy-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/lispy-20220209.1138/lispy-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elpa" '("straight-reload-all")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "le-clojure" '("lispy-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "le-hy" '("lispy--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "le-julia" '("lispy-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "le-lisp" '("lispy-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "le-python" '("lispy-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "le-racket" '("lispy-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "le-scheme" '("lispy-")))



(autoload 'lispy-mode "lispy" "\
Minor mode for navigating and editing LISP dialects.

If called interactively, enable Lispy mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

When `lispy-mode' is on, most unprefixed keys,
i.e. [a-zA-Z+-./<>], conditionally call commands instead of
self-inserting. The condition (called special further on) is one
of:

- the point is before \"(\"
- the point is after \")\"
- the region is active

For instance, when special, \"j\" moves down one sexp, otherwise
it inserts itself.

When special, [0-9] call `digit-argument'.

When `lispy-mode' is on, \"[\" and \"]\" move forward and
backward through lists, which is useful to move into special.

\\{lispy-mode-map}

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lispy" '("ac-trigger-commands" "eval-error" "hydra-lispy-x" "lh-knight" "lispy-" "mc/cmds-to-run-" "unsupported-mode-error")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lispy-inline" '("lispy-")))



(autoload 'lispy-occur "lispy-occur" "\
Select a line within current top level sexp.
See `lispy-occur-backend' for the selection back end." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lispy-occur" '("lispy-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lispy-tags" '("lispy-" "no-semantic-support")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/paredit-20220709.849/paredit-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/paredit-20220709.849/paredit-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/paredit-20220709.849/paredit-autoloads.el") (car load-path))))



(autoload 'paredit-mode "paredit" "\
Minor mode for pseudo-structurally editing Lisp code.
With a prefix argument, enable Paredit Mode even if there are
  unbalanced parentheses in the buffer.
Paredit behaves badly if parentheses are unbalanced, so exercise
  caution when forcing Paredit Mode to be enabled, and consider
  fixing unbalanced parentheses instead.
\\<paredit-mode-map>

This is a minor mode.  If called interactively, toggle the
`Paredit mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `paredit-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'enable-paredit-mode "paredit" "\
Turn on pseudo-structural editing of Lisp code." t nil)

(register-definition-prefixes "paredit" '("?\\" "disable-paredit-mode" "paredit-"))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/goto-chg-20220107.1733/goto-chg-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/goto-chg-20220107.1733/goto-chg-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/goto-chg-20220107.1733/goto-chg-autoloads.el") (car load-path))))



(autoload 'goto-last-change "goto-chg" "\
Go to the point where the last edit was made in the current buffer.
Repeat the command to go to the second last edit, etc.

To go back to more recent edit, the reverse of this command, use \\[goto-last-change-reverse]
or precede this command with \\[universal-argument] - (minus).

It does not go to the same point twice even if there has been many edits
there. I call the minimal distance between distinguishable edits \"span\".
Set variable `glc-default-span' to control how close is \"the same point\".
Default span is 8.
The span can be changed temporarily with \\[universal-argument] right before \\[goto-last-change]:
\\[universal-argument] <NUMBER> set current span to that number,
\\[universal-argument] (no number) multiplies span by 4, starting with default.
The so set span remains until it is changed again with \\[universal-argument], or the consecutive
repetition of this command is ended by any other command.

When span is zero (i.e. \\[universal-argument] 0) subsequent \\[goto-last-change] visits each and
every point of edit and a message shows what change was made there.
In this case it may go to the same point twice.

This command uses undo information. If undo is disabled, so is this command.
At times, when undo information becomes too large, the oldest information is
discarded. See variable `undo-limit'.

\(fn ARG)" t nil)

(autoload 'goto-last-change-reverse "goto-chg" "\
Go back to more recent changes after \\[goto-last-change] have been used.
See `goto-last-change' for use of prefix argument.

\(fn ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "goto-chg" '("glc-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/evil-20220705.1432/evil-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/evil-20220705.1432/evil-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/evil-20220705.1432/evil-autoloads.el") (car load-path))))



atars/neagleson/.emacs.d/elpa/evil-20220705.1432/evil-autoloads.


(register-definition-prefixes "evil-commands" '("evil-"))



(register-definition-prefixes "evil-common" '("bounds-of-evil-" "evil-" "forward-evil-"))


 (autoload 'evil-mode "evil" nil t)

(register-definition-prefixes "evil-core" '("evil-" "turn-o"))



(register-definition-prefixes "evil-digraphs" '("evil-digraph"))



(register-definition-prefixes "evil-ex" '("evil-"))



(register-definition-prefixes "evil-integration" '("evil-"))



(register-definition-prefixes "evil-jumps" '("evil-"))



(register-definition-prefixes "evil-macros" '("evil-"))



(register-definition-prefixes "evil-maps" '("evil-"))



(register-definition-prefixes "evil-repeat" '("evil-"))



(register-definition-prefixes "evil-search" '("evil-"))



(register-definition-prefixes "evil-states" '("evil-"))



(register-definition-prefixes "evil-types" '("evil-ex-get-optional-register-and-count"))



(register-definition-prefixes "evil-vars" '("evil-"))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/smartparens-20220623.1523/smartparens-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/smartparens-20220623.1523/smartparens-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/smartparens-20220623.1523/smartparens-autoloads.el") (car load-path))))



(autoload 'sp-cheat-sheet "smartparens" "\
Generate a cheat sheet of all the smartparens interactive functions.

Without a prefix argument, print only the short documentation and examples.

With non-nil prefix argument ARG, show the full documentation for each function.

You can follow the links to the function or variable help page.
To get back to the full list, use \\[help-go-back].

You can use `beginning-of-defun' and `end-of-defun' to jump to
the previous/next entry.

Examples are fontified using the `font-lock-string-face' for
better orientation.

\(fn &optional ARG)" t nil)

(defvar smartparens-mode-map (make-sparse-keymap) "\
Keymap used for `smartparens-mode'.")

(autoload 'sp-use-paredit-bindings "smartparens" "\
Initiate `smartparens-mode-map' with `sp-paredit-bindings'." t nil)

(autoload 'sp-use-smartparens-bindings "smartparens" "\
Initiate `smartparens-mode-map' with `sp-smartparens-bindings'." t nil)

(autoload 'smartparens-mode "smartparens" "\
Toggle smartparens mode.

This is a minor mode.  If called interactively, toggle the
`Smartparens mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `smartparens-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

You can enable pre-set bindings by customizing
`sp-base-key-bindings' variable.  The current content of
`smartparens-mode-map' is:

 \\{smartparens-mode-map}

\(fn &optional ARG)" t nil)

(autoload 'smartparens-strict-mode "smartparens" "\
Toggle the strict smartparens mode.

This is a minor mode.  If called interactively, toggle the
`Smartparens-Strict mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `smartparens-strict-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

When strict mode is active, `delete-char', `kill-word' and their
backward variants will skip over the pair delimiters in order to
keep the structure always valid (the same way as `paredit-mode'
does).  This is accomplished by remapping them to
`sp-delete-char' and `sp-kill-word'.  There is also function
`sp-kill-symbol' that deletes symbols instead of words, otherwise
working exactly the same (it is not bound to any key by default).

When strict mode is active, this is indicated with \"/s\"
after the smartparens indicator in the mode list.

\(fn &optional ARG)" t nil)

(put 'smartparens-global-strict-mode 'globalized-minor-mode t)

(defvar smartparens-global-strict-mode nil "\
Non-nil if Smartparens-Global-Strict mode is enabled.
See the `smartparens-global-strict-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `smartparens-global-strict-mode'.")

(custom-autoload 'smartparens-global-strict-mode "smartparens" nil)

(autoload 'smartparens-global-strict-mode "smartparens" "\
Toggle Smartparens-Strict mode in all buffers.
With prefix ARG, enable Smartparens-Global-Strict mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Smartparens-Strict mode is enabled in all buffers where
`turn-on-smartparens-strict-mode' would do it.

See `smartparens-strict-mode' for more information on Smartparens-Strict mode.

\(fn &optional ARG)" t nil)

(autoload 'turn-on-smartparens-strict-mode "smartparens" "\
Turn on `smartparens-strict-mode'." t nil)

(autoload 'turn-off-smartparens-strict-mode "smartparens" "\
Turn off `smartparens-strict-mode'." t nil)

(put 'smartparens-global-mode 'globalized-minor-mode t)

(defvar smartparens-global-mode nil "\
Non-nil if Smartparens-Global mode is enabled.
See the `smartparens-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `smartparens-global-mode'.")

(custom-autoload 'smartparens-global-mode "smartparens" nil)

(autoload 'smartparens-global-mode "smartparens" "\
Toggle Smartparens mode in all buffers.
With prefix ARG, enable Smartparens-Global mode if ARG is positive; otherwise,
disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Smartparens mode is enabled in all buffers where `turn-on-smartparens-mode'
would do it.

See `smartparens-mode' for more information on Smartparens mode.

\(fn &optional ARG)" t nil)

(autoload 'turn-on-smartparens-mode "smartparens" "\
Turn on `smartparens-mode'.

This function is used to turn on `smartparens-global-mode'.

By default `smartparens-global-mode' ignores buffers with
`mode-class' set to special, but only if they are also not comint
buffers.

Additionally, buffers on `sp-ignore-modes-list' are ignored.

You can still turn on smartparens in these mode manually (or
in mode's startup-hook etc.) by calling `smartparens-mode'." t nil)

(autoload 'turn-off-smartparens-mode "smartparens" "\
Turn off `smartparens-mode'." t nil)

(autoload 'show-smartparens-mode "smartparens" "\
Toggle visualization of matching pairs.  When enabled, any
matching pair is highlighted after `sp-show-pair-delay' seconds
of Emacs idle time if the point is immediately in front or after
a pair.  This mode works similarly to `show-paren-mode', but
support custom pairs.

This is a minor mode.  If called interactively, toggle the
`Show-Smartparens mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `show-smartparens-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(put 'show-smartparens-global-mode 'globalized-minor-mode t)

(defvar show-smartparens-global-mode nil "\
Non-nil if Show-Smartparens-Global mode is enabled.
See the `show-smartparens-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `show-smartparens-global-mode'.")

(custom-autoload 'show-smartparens-global-mode "smartparens" nil)

(autoload 'show-smartparens-global-mode "smartparens" "\
Toggle Show-Smartparens mode in all buffers.
With prefix ARG, enable Show-Smartparens-Global mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Show-Smartparens mode is enabled in all buffers where
`turn-on-show-smartparens-mode' would do it.

See `show-smartparens-mode' for more information on Show-Smartparens mode.

\(fn &optional ARG)" t nil)

(autoload 'turn-on-show-smartparens-mode "smartparens" "\
Turn on `show-smartparens-mode'." t nil)

(autoload 'turn-off-show-smartparens-mode "smartparens" "\
Turn off `show-smartparens-mode'." t nil)

(register-definition-prefixes "smartparens" '("smartparens-" "sp-"))



(register-definition-prefixes "smartparens-clojure" '("sp-clojure-prefix"))



(register-definition-prefixes "smartparens-config" '("sp-lisp-invalid-hyperlink-p"))



(register-definition-prefixes "smartparens-crystal" '("sp-crystal-"))



(register-definition-prefixes "smartparens-elixir" '("sp-elixir-"))



(register-definition-prefixes "smartparens-ess" '("sp-ess-"))



(register-definition-prefixes "smartparens-haskell" '("sp-"))



(register-definition-prefixes "smartparens-html" '("sp-html-"))



(register-definition-prefixes "smartparens-latex" '("sp-latex-"))



(register-definition-prefixes "smartparens-lua" '("sp-lua-post-keyword-insert"))



(register-definition-prefixes "smartparens-markdown" '("sp-"))



(register-definition-prefixes "smartparens-org" '("sp-"))



(register-definition-prefixes "smartparens-python" '("sp-python-"))



(register-definition-prefixes "smartparens-rst" '("sp-rst-point-after-backtick"))



(register-definition-prefixes "smartparens-ruby" '("sp-"))



(register-definition-prefixes "smartparens-rust" '("sp-"))



(register-definition-prefixes "smartparens-scala" '("sp-scala-wrap-with-indented-newlines"))



(register-definition-prefixes "smartparens-swift" '("sp-swift-"))



(register-definition-prefixes "smartparens-text" '("sp-text-mode-"))



(register-definition-prefixes "sp-sublimetext-like" '("sp-point-not-before-word"))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/evil-cleverparens-20170718.413/evil-cleverparens-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/evil-cleverparens-20170718.413/evil-cleverparens-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/evil-cleverparens-20170718.413/evil-cleverparens-autoloads.el") (car load-path))))



(autoload 'evil-cp-set-movement-keys "evil-cleverparens" "\
Sets the movement keys in
`evil-cleverparens-regular-movement-keys' or
`evil-cp-swapped-movement-keys' based on the value of
`evil-cleverparens-swap-move-by-word-and-symbol'.

\(fn)" t nil)

(autoload 'evil-cp-set-additional-movement-keys "evil-cleverparens" "\
Sets the movement keys is `evil-cp-additional-movement-keys'
for normal, visual and operator states if
`evil-cleverparens-use-additional-movement-keys' is true.

\(fn)" t nil)

(autoload 'evil-cp-set-additional-bindings "evil-cleverparens" "\
Sets the movement keys is `evil-cp-additional-bindings' for
normal-state if `evil-cleverparens-use-additional-bindings' is
true.

\(fn)" t nil)

(autoload 'evil-cleverparens-mode "evil-cleverparens" "\
Minor mode for setting up evil with smartparens and paredit
for an advanced modal structural editing experience.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-cleverparens" '("evil-c" "forward-evil-cp-")))


 (autoload 'evil-cp-a-form "evil-cleverparens-text-objects" nil t)
 (autoload 'evil-cp-inner-form "evil-cleverparens-text-objects" nil t)
 (autoload 'evil-cp-a-comment "evil-cleverparens-text-objects" nil t)
 (autoload 'evil-cp-inner-comment "evil-cleverparens-text-objects" nil t)
 (autoload 'evil-cp-a-defun "evil-cleverparens-text-objects" nil t)
 (autoload 'evil-cp-inner-defun "evil-cleverparens-text-objects" nil t)



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-cleverparens-util" '("evil-cp-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/evil-surround-20220504.802/evil-surround-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/evil-surround-20220504.802/evil-surround-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/evil-surround-20220504.802/evil-surround-autoloads.el") (car load-path))))



(autoload 'evil-surround-delete "evil-surround" "\
Delete the surrounding delimiters represented by CHAR.
Alternatively, the text to delete can be represented with
the overlays OUTER and INNER, where OUTER includes the delimiters
and INNER excludes them. The intersection (i.e., difference)
between these overlays is what is deleted.

\(fn CHAR &optional OUTER INNER)" t nil)

(autoload 'evil-surround-change "evil-surround" "\
Change the surrounding delimiters represented by CHAR.
Alternatively, the text to delete can be represented with the
overlays OUTER and INNER, which are passed to `evil-surround-delete'.

\(fn CHAR &optional OUTER INNER)" t nil)

(autoload 'evil-surround-mode "evil-surround" "\
Buffer-local minor mode to emulate surround.vim.

This is a minor mode.  If called interactively, toggle the
`Evil-Surround mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `evil-surround-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'turn-on-evil-surround-mode "evil-surround" "\
Enable evil-surround-mode in the current buffer." nil nil)

(autoload 'turn-off-evil-surround-mode "evil-surround" "\
Disable evil-surround-mode in the current buffer." nil nil)

(put 'global-evil-surround-mode 'globalized-minor-mode t)

(defvar global-evil-surround-mode nil "\
Non-nil if Global Evil-Surround mode is enabled.
See the `global-evil-surround-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-evil-surround-mode'.")

(custom-autoload 'global-evil-surround-mode "evil-surround" nil)

(autoload 'global-evil-surround-mode "evil-surround" "\
Toggle Evil-Surround mode in all buffers.
With prefix ARG, enable Global Evil-Surround mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Evil-Surround mode is enabled in all buffers where `turn-on-evil-surround-mode'
would do it.

See `evil-surround-mode' for more information on Evil-Surround mode.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "evil-surround" '("evil-surround-"))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/symex-20220705.1558/symex-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/symex-20220705.1558/symex-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/symex-20220705.1558/symex-autoloads.el") (car load-path))))



(autoload 'symex-mode "symex" "\
An evil way to edit Lisp symbolic expressions as trees.

This is a minor mode.  If called interactively, toggle the `symex
mode' mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `symex-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'symex-initialize "symex" "\
Initialize symex mode.

This registers symex mode for use in all recognized Lisp modes, and also
advises functions to enable or disable features based on user configuration." nil nil)

(autoload 'symex-mode-interface "symex" "\
The main entry point for editing symbolic expressions using symex mode.

Enter the symex evil state and show a hydra menu for accessing various
features." t nil)

(register-definition-prefixes "symex" '("symex-"))



atars/neagleson/.emacs.d/elpa/symex-20220705.1558/symex-autoload


(register-definition-prefixes "symex-custom" '("symex-"))



(register-definition-prefixes "symex-data" '("symex-"))



(register-definition-prefixes "symex-dsl" '("symex-"))



(register-definition-prefixes "symex-evaluator" '("symex-"))



(register-definition-prefixes "symex-evil" '("symex-"))



(register-definition-prefixes "symex-evil-support" '("symex--define-evil-key"))



(register-definition-prefixes "symex-hydra" '("hydra-symex" "symex-"))



(register-definition-prefixes "symex-interface-arc" '("symex-"))



(register-definition-prefixes "symex-interface-clojure" '("symex-"))



(register-definition-prefixes "symex-interface-common-lisp" '("symex-"))



(register-definition-prefixes "symex-interface-elisp" '("symex-"))



(register-definition-prefixes "symex-interface-racket" '("symex-"))



(register-definition-prefixes "symex-interface-scheme" '("symex-"))



(register-definition-prefixes "symex-interop" '("symex-"))



(register-definition-prefixes "symex-misc" '("symex-"))



(register-definition-prefixes "symex-primitives" '("symex-"))



(register-definition-prefixes "symex-transformations" '("symex-"))



(register-definition-prefixes "symex-traversals" '("symex-"))



(register-definition-prefixes "symex-ui" '("symex--toggle-highlight"))



(register-definition-prefixes "symex-utils" '("symex--"))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/sublimity-20200905.1730/sublimity-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/sublimity-20200905.1730/sublimity-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/sublimity-20200905.1730/sublimity-autoloads.el") (car load-path))))



(defvar sublimity-mode nil "\
Non-nil if Sublimity mode is enabled.
See the `sublimity-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `sublimity-mode'.")

(custom-autoload 'sublimity-mode "sublimity" nil)

(autoload 'sublimity-mode "sublimity" "\
smooth-scrolling and minimap, like sublime editor

If called interactively, enable Sublimity mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "sublimity" '("sublimity-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "sublimity-attractive" '("split-window" "sublimity-attractive-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "sublimity-map" '("sublimity-map-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "sublimity-scroll" '("sublimity-scroll-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/list-utils-20210111.1522/list-utils-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/list-utils-20210111.1522/list-utils-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/list-utils-20210111.1522/list-utils-autoloads.el") (car load-path))))



(let ((loads (get 'list-utils 'custom-loads))) (if (member '"list-utils" loads) nil (put 'list-utils 'custom-loads (cons '"list-utils" loads))))

(require 'cl)

(cl-defstruct tconc head tail)

(autoload 'tconc-list "list-utils" "\
Efficiently append LIST to TC.

TC is a data structure created by `make-tconc'.

\(fn TC LIST)" nil nil)

(autoload 'tconc "list-utils" "\
Efficiently append ARGS to TC.

TC is a data structure created by `make-tconc'

Without ARGS, return the list held by TC.

\(fn TC &rest ARGS)" nil nil)

(autoload 'list-utils-cons-cell-p "list-utils" "\
Return non-nil if CELL holds a cons cell rather than a proper list.

A proper list is defined as a series of cons cells in which the
cdr slot of each cons holds a pointer to the next element of the
list, and the cdr slot in the final cons holds nil.

A plain cons cell, for the purpose of this function, is a single
cons in which the cdr holds data rather than a pointer to the
next cons cell, eg

    '(1 . 2)

In addition, a list which is not nil-terminated is not a proper
list and will be recognized by this function as a cons cell.
Such a list is printed using dot notation for the last two
elements, eg

    '(1 2 3 4 . 5)

Such improper lists are produced by `list*'.

\(fn CELL)" nil nil)

(autoload 'list-utils-make-proper-copy "list-utils" "\
Copy a cons cell or improper LIST into a proper list.

If optional TREE is non-nil, traverse LIST, making proper
copies of any improper lists contained within.

Optional RECUR-INTERNAL is for internal use only.

Improper lists consist of proper lists consed to a final
element, and are produced by `list*'.

\(fn LIST &optional TREE RECUR-INTERNAL)" nil nil)

(autoload 'list-utils-make-proper-inplace "list-utils" "\
Make a cons cell or improper LIST into a proper list.

Improper lists consist of proper lists consed to a final
element, and are produced by `list*'.

If optional TREE is non-nil, traverse LIST, making any
improper lists contained within into proper lists.

Optional RECUR-INTERNAL is for internal use only.

Modifies LIST and returns the modified value.

\(fn LIST &optional TREE RECUR-INTERNAL)" nil nil)

(autoload 'list-utils-make-improper-copy "list-utils" "\
Copy a proper LIST into an improper list.

Improper lists consist of proper lists consed to a final
element, and are produced by `list*'.

If optional TREE is non-nil, traverse LIST, making proper
copies of any improper lists contained within.

Optional RECUR-INTERNAL is for internal use only.

\(fn LIST &optional TREE RECUR-INTERNAL)" nil nil)

(autoload 'list-utils-make-improper-inplace "list-utils" "\
Make proper LIST into an improper list.

Improper lists consist of proper lists consed to a final
element, and are produced by `list*'.

If optional TREE is non-nil, traverse LIST, making any
proper lists contained within into improper lists.

Optional RECUR-INTERNAL is for internal use only.

Modifies LIST and returns the modified value.

\(fn LIST &optional TREE RECUR-INTERNAL)" nil nil)

(autoload 'list-utils-linear-subseq "list-utils" "\
Return the linear elements from a partially cyclic LIST.

If there is no cycle in LIST, return LIST.  If all elements of
LIST are included in a cycle, return nil.

As an optimization, CYCLE-LENGTH may be specified if the length
of the cyclic portion is already known.  Otherwise it will be
calculated from LIST.

\(fn LIST &optional CYCLE-LENGTH)" nil nil)

(autoload 'list-utils-cyclic-subseq "list-utils" "\
Return any cyclic elements from LIST as a circular list.

The first element of the cyclic structure is not guaranteed to be
first element of the return value unless FROM-START is non-nil.

To linearize the return value, use `list-utils-make-linear-inplace'.

If there is no cycle in LIST, return nil.

\(fn LIST &optional FROM-START)" nil nil)

(autoload 'list-utils-cyclic-length "list-utils" "\
Return the number of cyclic elements in LIST.

If some portion of LIST is linear, only the cyclic
elements will be counted.

If LIST is completely linear, return 0.

\(fn LIST)" nil nil)

(autoload 'list-utils-cyclic-p "list-utils" "\
Return non-nil if LIST contains any cyclic structures.

If optional PERFECT is set, only return non-nil if LIST is a
perfect non-branching cycle in which the last element points
to the first.

\(fn LIST &optional PERFECT)" nil nil)

(autoload 'list-utils-linear-p "list-utils" "\
Return non-nil if LIST is linear (no cyclic structure).

\(fn LIST)" nil nil)

(defalias 'list-utils-improper-p 'list-utils-cons-cell-p)

(autoload 'list-utils-safe-length "list-utils" "\
Return the number of elements in LIST.

LIST may be linear or cyclic.

If LIST is not really a list, returns 0.

If LIST is an improper list, return the number of proper list
elements, like `safe-length'.

\(fn LIST)" nil nil)

(autoload 'list-utils-flat-length "list-utils" "\
Count simple elements from the beginning of LIST.

Stop counting when a cons is reached.  nil is not a cons,
and is considered to be a \"simple\" element.

If the car of LIST is a cons, return 0.

\(fn LIST)" nil nil)

(autoload 'list-utils-make-linear-copy "list-utils" "\
Return a linearized copy of LIST, which may be cyclic.

If optional TREE is non-nil, traverse LIST, substituting
linearized copies of any cyclic lists contained within.

\(fn LIST &optional TREE)" nil nil)

(autoload 'list-utils-make-linear-inplace "list-utils" "\
Linearize LIST, which may be cyclic.

Modifies LIST and returns the modified value.

If optional TREE is non-nil, traverse LIST, linearizing any
cyclic lists contained within.

\(fn LIST &optional TREE)" nil nil)

(autoload 'list-utils-safe-equal "list-utils" "\
Compare LIST-1 and LIST-2, which may be cyclic lists.

LIST-1 and LIST-2 may also contain cyclic lists, which are
each traversed and compared.  This function will not infloop
when cyclic lists are encountered.

Non-nil is returned only if the leaves of LIST-1 and LIST-2 are
`equal' and the structure is identical.

Optional TEST specifies a test, defaulting to `equal'.

If LIST-1 and LIST-2 are not actually lists, they are still
compared according to TEST.

\(fn LIST-1 LIST-2 &optional TEST)" nil nil)

(autoload 'list-utils-depth "list-utils" "\
Find the depth of LIST, which may contain other lists.

If LIST is not a list or is an empty list, returns a depth
of 0.

If LIST is a cons cell or a list which does not contain other
lists, returns a depth of 1.

\(fn LIST)" nil nil)

(autoload 'list-utils-flatten "list-utils" "\
Return a flattened copy of LIST, which may contain other lists.

This function flattens cons cells as lists, and
flattens circular list structures.

\(fn LIST)" nil nil)

(autoload 'list-utils-insert-before "list-utils" "\
Look in LIST for ELEMENT and insert NEW-ELEMENT before it.

Optional TEST sets the test used for a matching element, and
defaults to `equal'.

LIST is modified and the new value is returned.

\(fn LIST ELEMENT NEW-ELEMENT &optional TEST)" nil nil)

(autoload 'list-utils-insert-after "list-utils" "\
Look in LIST for ELEMENT and insert NEW-ELEMENT after it.

Optional TEST sets the test used for a matching element, and
defaults to `equal'.

LIST is modified and the new value is returned.

\(fn LIST ELEMENT NEW-ELEMENT &optional TEST)" nil nil)

(autoload 'list-utils-insert-before-pos "list-utils" "\
Look in LIST for position POS, and insert NEW-ELEMENT before.

POS is zero-indexed.

LIST is modified and the new value is returned.

\(fn LIST POS NEW-ELEMENT)" nil nil)

(autoload 'list-utils-insert-after-pos "list-utils" "\
Look in LIST for position POS, and insert NEW-ELEMENT after.

LIST is modified and the new value is returned.

\(fn LIST POS NEW-ELEMENT)" nil nil)

(autoload 'list-utils-and "list-utils" "\
Return the elements of LIST1 which are present in LIST2.

This is similar to `cl-intersection' (or `intersection') from
the cl library, except that `list-utils-and' preserves order,
does not uniquify the results, and exhibits more predictable
performance for large lists.

Order will follow LIST1.  Duplicates may be present in the result
as in LIST1.

TEST is an optional comparison function in the form of a
hash-table-test.  The default is `equal'.  Other valid values
include `eq' (built-in), `eql' (built-in), `list-utils-htt-='
\(numeric), `list-utils-htt-case-fold-equal' (case-insensitive).
See `define-hash-table-test' to define your own tests.

HINT is an optional micro-optimization, predicting the size of
the list to be hashed (LIST2 unless FLIP is set).

When optional FLIP is set, the sense of the comparison is
reversed.  When FLIP is set, LIST2 will be the guide for the
order of the result, and will determine whether duplicates may
be returned.  Since this function preserves duplicates, setting
FLIP can change the number of elements in the result.

Performance: `list-utils-and' and friends use a general-purpose
hashing approach.  `intersection' and friends use pure iteration.
Iteration can be much faster in a few special cases, especially
when the number of elements is small.  In other scenarios,
iteration can be much slower.  Hashing has no worst-case
performance scenario, although it uses much more memory.  For
heavy-duty list operations, performance may be improved by
`let'ing `gc-cons-threshold' to a high value around sections that
make frequent use of this function.

\(fn LIST1 LIST2 &optional TEST HINT FLIP)" nil nil)

(autoload 'list-utils-not "list-utils" "\
Return the elements of LIST1 which are not present in LIST2.

This is similar to `cl-set-difference' (or `set-difference') from
the cl library, except that `list-utils-not' preserves order and
exhibits more predictable performance for large lists.  Order will
follow LIST1.  Duplicates may be present as in LIST1.

TEST is an optional comparison function in the form of a
hash-table-test.  The default is `equal'.  Other valid values
include `eq' (built-in), `eql' (built-in), `list-utils-htt-='
\(numeric), `list-utils-htt-case-fold-equal' (case-insensitive).
See `define-hash-table-test' to define your own tests.

HINT is an optional micro-optimization, predicting the size of
the list to be hashed (LIST2 unless FLIP is set).

When optional FLIP is set, the sense of the comparison is
reversed, returning elements of LIST2 which are not present in
LIST1.  When FLIP is set, LIST2 will be the guide for the order
of the result, and will determine whether duplicates may be
returned.

Performance: see notes under `list-utils-and'.

\(fn LIST1 LIST2 &optional TEST HINT FLIP)" nil nil)

(autoload 'list-utils-xor "list-utils" "\
Return elements which are only present in either LIST1 or LIST2.

This is similar to `cl-set-exclusive-or' (or `set-exclusive-or')
from the cl library, except that `list-utils-xor' preserves order,
and exhibits more predictable performance for large lists.  Order
will follow LIST1, then LIST2.  Duplicates may be present as in
LIST1 or LIST2.

TEST is an optional comparison function in the form of a
hash-table-test.  The default is `equal'.  Other valid values
include `eq' (built-in), `eql' (built-in), `list-utils-htt-='
\(numeric), `list-utils-htt-case-fold-equal' (case-insensitive).
See `define-hash-table-test' to define your own tests.

HINT is an optional micro-optimization, predicting the size of
the list to be hashed (LIST2 unless FLIP is set).

When optional FLIP is set, the sense of the comparison is
reversed, causing order and duplicates to follow LIST2, then
LIST1.

Performance: see notes under `list-utils-and'.

\(fn LIST1 LIST2 &optional TEST HINT FLIP)" nil nil)

(autoload 'list-utils-uniq "list-utils" "\
Return a uniquified copy of LIST, preserving order.

This is similar to `cl-remove-duplicates' (or `remove-duplicates')
from the cl library, except that `list-utils-uniq' preserves order,
and exhibits more predictable performance for large lists.  Order
will follow LIST.

TEST is an optional comparison function in the form of a
hash-table-test.  The default is `equal'.  Other valid values
include `eq' (built-in), `eql' (built-in), `list-utils-htt-='
\(numeric), `list-utils-htt-case-fold-equal' (case-insensitive).
See `define-hash-table-test' to define your own tests.

HINT is an optional micro-optimization, predicting the size of
LIST.

Performance: see notes under `list-utils-and'.

\(fn LIST &optional TEST HINT)" nil nil)

(autoload 'list-utils-dupes "list-utils" "\
Return only duplicated elements from LIST, preserving order.

Duplicated elements may still exist in the result: this function
removes singlets.

TEST is an optional comparison function in the form of a
hash-table-test.  The default is `equal'.  Other valid values
include `eq' (built-in), `eql' (built-in), `list-utils-htt-='
\(numeric), `list-utils-htt-case-fold-equal' (case-insensitive).
See `define-hash-table-test' to define your own tests.

HINT is an optional micro-optimization, predicting the size of
LIST.

Performance: see notes under `list-utils-and'.

\(fn LIST &optional TEST HINT)" nil nil)

(autoload 'list-utils-singlets "list-utils" "\
Return only singlet elements from LIST, preserving order.

Duplicated elements may not exist in the result.

TEST is an optional comparison function in the form of a
hash-table-test.  The default is `equal'.  Other valid values
include `eq' (built-in), `eql' (built-in), `list-utils-htt-='
\(numeric), `list-utils-htt-case-fold-equal' (case-insensitive).
See `define-hash-table-test' to define your own tests.

HINT is an optional micro-optimization, predicting the size of
LIST.

Performance: see notes under `list-utils-and'.

\(fn LIST &optional TEST HINT)" nil nil)

(autoload 'list-utils-partition-dupes "list-utils" "\
Partition LIST into duplicates and singlets, preserving order.

The return value is an alist with two keys: 'dupes and 'singlets.
The two values of the alist are lists which, if combined, comprise
a complete copy of the elements of LIST.

Duplicated elements may still exist in the 'dupes partition.

TEST is an optional comparison function in the form of a
hash-table-test.  The default is `equal'.  Other valid values
include `eq' (built-in), `eql' (built-in), `list-utils-htt-='
\(numeric), `list-utils-htt-case-fold-equal' (case-insensitive).
See `define-hash-table-test' to define your own tests.

HINT is an optional micro-optimization, predicting the size of
LIST.

Performance: see notes under `list-utils-and'.

\(fn LIST &optional TEST HINT)" nil nil)

(autoload 'list-utils-alist-or-flat-length "list-utils" "\
Count simple or cons-cell elements from the beginning of LIST.

Stop counting when a proper list of non-zero length is reached.

If the car of LIST is a list, return 0.

\(fn LIST)" nil nil)

(autoload 'list-utils-alist-flatten "list-utils" "\
Flatten LIST, which may contain other lists.  Do not flatten cons cells.

It is not guaranteed that the result contains *only* cons cells.
The result could contain other data types present in LIST.

This function simply avoids flattening single conses or improper
lists where the last two elements would be expressed as a dotted
pair.

\(fn LIST)" nil nil)

(autoload 'list-utils-plist-reverse "list-utils" "\
Return reversed copy of property-list PLIST, maintaining pair associations.

\(fn PLIST)" nil nil)

(autoload 'list-utils-plist-del "list-utils" "\
Delete from PLIST the property PROP and its associated value.

When PROP is not present in PLIST, there is no effect.

The new plist is returned; use `(setq x (list-utils-plist-del x prop))'
to be sure to use the new value.

This functionality overlaps with the undocumented `cl-do-remf'.

\(fn PLIST PROP)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "list-utils" '("list-utils-htt-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/string-utils-20140508.2041/string-utils-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/string-utils-20140508.2041/string-utils-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/string-utils-20140508.2041/string-utils-autoloads.el") (car load-path))))


(autoload 'string-utils-stringify-anything "string-utils" "\
Coerce any object OBJ into a string.

Contrary to usual conventions, return the empty string for nil.

Sequences are flattened down to atoms and joined with string
SEPARATOR, which defaults to a single space.  Cyclic lists
may give unpredictable results (similar to `format') unless
list-utils.el is installed.

When INTS-ARE-CHARS is non-nil, interpret positive integers in
OBJ as characters.

Optional RECORD-SEPARATOR is a string (defaulting to the value of
SEPARATOR) which delimits end-of-record for paired data types
such as hash tables.

This is not a pretty-printer for OBJ, but a way to look at
the *contents* of OBJ (so much as is possible) as if it was
an ordinary string.

\(fn OBJ &optional SEPARATOR INTS-ARE-CHARS RECORD-SEPARATOR)" nil nil)

(autoload 'string-utils-has-darkspace-p "string-utils" "\
Test whether OBJ, when coerced to a string, has any non-whitespace characters.

Returns the position of the first non-whitespace character
on success.

If optional WHITESPACE-TYPE is 'ascii or t, use an ASCII-only
definition of whitespace characters.  If WHITESPACE-TYPE is
'syntax, is the definition of whitespace from the current
`syntax-table'.  Otherwise, use a broad, Unicode-aware
definition of whitespace from `string-utils-whitespace'.

\(fn OBJ &optional WHITESPACE-TYPE)" nil nil)

(autoload 'string-utils-has-whitespace-p "string-utils" "\
Test whether OBJ, when coerced to a string, has any whitespace characters.

Returns the position of the first whitespace character on
success.

If optional WHITESPACE-TYPE is 'ascii or t, use an ASCII-only
definition of whitespace characters.  If WHITESPACE-TYPE is
'syntax, is the definition of whitespace from the current
`syntax-table'.  Otherwise, use a broad, Unicode-aware
definition of whitespace from `string-utils-whitespace'.

\(fn OBJ &optional WHITESPACE-TYPE)" nil nil)

(autoload 'string-utils-trim-whitespace "string-utils" "\
Return STR-VAL with leading and trailing whitespace removed.

If optional WHITESPACE-TYPE is 'ascii or t, use an ASCII-only
definition of whitespace characters.  If WHITESPACE-TYPE is
'syntax, is the definition of whitespace from the current
`syntax-table'.  Otherwise, use a broad, Unicode-aware
definition of whitespace from `string-utils-whitespace'.

If optional MULTI-LINE is set, trim spaces at starts and
ends of all lines throughout STR-VAL.

\(fn STR-VAL &optional WHITESPACE-TYPE MULTI-LINE)" nil nil)

(autoload 'string-utils-compress-whitespace "string-utils" "\
Return STR-VAL with all contiguous whitespace compressed to SEPARATOR.

The default value of SEPARATOR is a single space: \" \".

If optional WHITESPACE-TYPE is 'ascii or t, use an ASCII-only
definition of whitespace characters.  If WHITESPACE-TYPE is
'syntax, is the definition of whitespace from the current
`syntax-table'.  Otherwise, use a broad, Unicode-aware
definition of whitespace from `string-utils-whitespace'.

\(fn STR-VAL &optional WHITESPACE-TYPE SEPARATOR)" nil nil)

(autoload 'string-utils-string-repeat "string-utils" "\
Return a new string formed by repeating STR-VAL, N times.

STR-VAL may be of any length.

\(fn STR-VAL N)" nil nil)

(autoload 'string-utils-escape-double-quotes "string-utils" "\
Return STR-VAL with every double-quote escaped with backslash.

\(fn STR-VAL)" nil nil)

(autoload 'string-utils-quotemeta "string-utils" "\
Return STR-VAL with all non-word characters escaped with backslash.

This is more vigorous than `shell-quote-argument'.

\(fn STR-VAL)" nil nil)

(autoload 'string-utils-pad "string-utils" "\
Pad STR-VAL to WIDTH.

Optional MODE defaults to 'right, but may be 'left, 'center, or
an integer.

When MODE is 'left, padding characters are prepended.  When MODE
is 'center, padding characters are both appended and prepended so
that STR-VAL is centered within WIDTH.

When MODE is a positive integer, the behavior is fixed-position
padding.  Similar to 'center, padding may be added on the right
and on the left.  Exactly MODE-many padding characters are
added on the left before padding to the full WIDTH on the right.
When MODE is a negative integer, the behavior is the same, except
that MODE fixes the right-side padding.

Optional CHAR sets the padding character (defaults to space).

Optional THROW-ERROR throws an error if the length of STR-VAL
already exceeds WIDTH, or if the fixed-position padding requested
would cause the result to exceed WIDTH.  When THROW-ERROR is not
set (the default), a best-attempt result is always returned.

Tabs are expanded to spaces according to the value of
`tab-width'.

Returns a padded copy of string STR-VAL.

\(fn STR-VAL WIDTH &optional MODE CHAR THROW-ERROR)" nil nil)

(autoload 'string-utils-pad-list "string-utils" "\
Pad each member of STR-LIST to match the longest width.

ADDITIONAL-WIDTH sets a relative amount to pad beyond the longest
length.

TARGET-WIDTH sets an absolute target width, causing maximum
string length and ADDITIONAL-WIDTH to be ignored.

Optional MODE, CHAR, and THROW-ERROR are as for `string-utils-pad'.
Fixed-position MODE will attempt to pad all entries consistently,
based on any adjustments made to the longest member of STR-LIST.

Tabs are expanded to spaces according to the value of
`tab-width'.

Returns padded STR-LIST.

\(fn STR-LIST &optional ADDITIONAL-WIDTH TARGET-WIDTH MODE CHAR THROW-ERROR)" nil nil)

(autoload 'string-utils-propertize-fillin "string-utils" "\
Return a copy of STR-VAL with text properties added, without overriding.

Works exactly like `propertize', except that (character-by-character)
already existing properties are respected.

STR-VAL and PROPERTIES are treated as documented for the STRING
and PROPERTIES arguments to `propertize'.

\(fn STR-VAL &rest PROPERTIES)" nil nil)

(autoload 'string-utils-plural-ending "string-utils" "\
Return \"s\" or \"\", depending on whether NUM requires a plural in English.

Intended to be used in a format string as follows:

    (message \"%s item%s deleted\" del-counter (string-utils-plural-ending del-counter))

\(fn NUM)" nil nil)

(autoload 'string-utils-squeeze-filename "string-utils" "\
Intelligibly squeeze file-name or buffer-name NAME to fit within MAXLEN.

When shortening file or buffer names for presentation to human
readers, it is often preferable not to truncate the ends, but to
remove leading or middle portions of the string.

This function keeps basename intact, and (failing that) the
beginning and end of the basename, so that a shortened file or
buffer name is more identifiable to a human reader.

The heuristic

   1.  Works equally for file names or buffer names.

   2.  Applies abbreviations to file names such as \"~\" for home
       directory.

   3.  Selectively removes the longest leading directory
       components from a path, preferring to keep the rightmost
       components, leaving a single ellipsis where any number of
       path elements were removed.

   4.  Shortens the basename of NAME if needed, preserving the
       meaningful file extension.

The string returned is as long as MAXLEN or shorter.

When PATH-REMOVAL is non nil, it is permitted to shorten a
pathname by removing the directory components completely,
substituting no ellipsis.

ELLIPSIS is a string inserted wherever characters were removed.
It defaults to the UCS character \"Horizontal Ellipsis\", or
\"...\" if extended characters are not displayable.

If NO-TAIL is set, do not preserve the trailing letters of
a filename unless there is a dotted extension.

\(fn NAME MAXLEN &optional PATH-REMOVAL ELLIPSIS NO-TAIL)" nil nil)

(autoload 'string-utils-squeeze-url "string-utils" "\
Intelligibly squeeze string URL to fit within MAXLEN.

Fit URL within MAXLEN for presentation to a human reader.
Follows rules similar to `string-utils-squeeze-filename'.

ELLIPSIS is a string inserted wherever characters were removed.
It defaults to the UCS character \"Horizontal Ellipsis\", or
\"...\" if extended characters are not displayable.

\(fn URL MAXLEN &optional ELLIPSIS)" nil nil)

(autoload 'string-utils-split "string-utils" "\
Like `split-string', with additional options.

STRING, SEPARATORS, and OMIT-NULLS are as documented at `split-string'.

INCLUDE-SEPARATORS is currently unimplemented.

When RESPECT-ESCAPES is set, STRING is not split where the
separator is escaped with backslash.  This currently has the
limitation that SEPARATORS must be an explicit string rather than
a regular expression.

\(fn STRING &optional SEPARATORS OMIT-NULLS INCLUDE-SEPARATORS RESPECT-ESCAPES)" nil nil)

(autoload 'string-utils-truncate-to "string-utils" "\
Truncate STRING to MAXLEN.

The returned value is of length MAXLEN or less, including
ELLIPSIS.

ELLIPSIS is a string inserted wherever characters were removed.
It defaults to the UCS character \"Horizontal Ellipsis\", or
\"...\" if extended characters are not displayable.

\(fn STR-VAL MAXLEN &optional ELLIPSIS)" nil nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/string-inflection-20210918.419/string-inflection-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/string-inflection-20210918.419/string-inflection-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/string-inflection-20210918.419/string-inflection-autoloads.el") (car load-path))))



(autoload 'string-inflection-ruby-style-cycle "string-inflection" "\
foo_bar => FOO_BAR => FooBar => foo_bar" t nil)

(autoload 'string-inflection-python-style-cycle "string-inflection" "\
foo_bar => FOO_BAR => FooBar => foo_bar" t nil)

(autoload 'string-inflection-java-style-cycle "string-inflection" "\
fooBar => FOO_BAR => FooBar => fooBar" t nil)

(autoload 'string-inflection-all-cycle "string-inflection" "\
foo_bar => FOO_BAR => FooBar => fooBar => foo-bar => Foo_Bar => foo_bar" t nil)

(autoload 'string-inflection-toggle "string-inflection" "\
toggle foo_bar <=> FooBar" t nil)

(autoload 'string-inflection-camelcase "string-inflection" "\
FooBar format" t nil)

(autoload 'string-inflection-lower-camelcase "string-inflection" "\
fooBar format" t nil)

(autoload 'string-inflection-underscore "string-inflection" "\
foo_bar format" t nil)

(autoload 'string-inflection-capital-underscore "string-inflection" "\
Foo_Bar format" t nil)

(autoload 'string-inflection-upcase "string-inflection" "\
FOO_BAR format" t nil)

(autoload 'string-inflection-kebab-case "string-inflection" "\
foo-bar format" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "string-inflection" '("string-inflection-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/string-edit-20220604.2128/string-edit-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/string-edit-20220604.2128/string-edit-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/string-edit-20220604.2128/string-edit-autoloads.el") (car load-path))))



(autoload 'string-edit-at-point "string-edit" "\
Pop up a buffer to edit the string at point.
This saves you from needing to manually escape characters." t nil)

(register-definition-prefixes "string-edit" '("se/" "string-edit-"))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/f-20220608.943/f-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/f-20220608.943/f-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/f-20220608.943/f-autoloads.el") (car load-path))))



atars/neagleson/.emacs.d/elpa/f-20220608.94



)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/standard-dirs-20200621.1603/standard-dirs-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/standard-dirs-20200621.1603/standard-dirs-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/standard-dirs-20200621.1603/standard-dirs-autoloads.el") (car load-path))))



(autoload 'standard-dirs-user "standard-dirs" "\
Get the current user's home directory." nil nil)

(autoload 'standard-dirs-user-cache "standard-dirs" "\
Get the base directory for user-specific cache files." nil nil)

(autoload 'standard-dirs-user-config "standard-dirs" "\
Get the base directory for user-specific configuration files." nil nil)

(autoload 'standard-dirs-user-data "standard-dirs" "\
Get the base directory for user-specific data files." nil nil)

(autoload 'standard-dirs-user-data-local "standard-dirs" "\
Get the base directory for user-specific data files." nil nil)

(autoload 'standard-dirs-user-audio "standard-dirs" "\
Get the base directory for the current user's audio files." nil nil)

(autoload 'standard-dirs-user-desktop "standard-dirs" "\
Get the base directory for the current user's desktop files." nil nil)

(autoload 'standard-dirs-user-document "standard-dirs" "\
Get the base directory for the current user's document files." nil nil)

(autoload 'standard-dirs-user-downloads "standard-dirs" "\
Get the base directory for the current user's downloaded files." nil nil)

(autoload 'standard-dirs-user-font "standard-dirs" "\
Get the base directory for the current user's fonts." nil nil)

(autoload 'standard-dirs-user-picture "standard-dirs" "\
Get the base directory for the current user's picture files." nil nil)

(autoload 'standard-dirs-user-public "standard-dirs" "\
Get the base directory for the current user's public files." nil nil)

(autoload 'standard-dirs-user-runtime "standard-dirs" "\
Get the base directory for the current user's template files." nil nil)

(autoload 'standard-dirs-user-template "standard-dirs" "\
Get the base directory for the current user's template files." nil nil)

(autoload 'standard-dirs-user-video "standard-dirs" "\
Get the base directory for the current user's video files." nil nil)
 (autoload 'standard-dirs-project-cache "standard-dirs.el")
 (autoload 'standard-dirs-project-config "standard-dirs.el")
 (autoload 'standard-dirs-project-data "standard-dirs.el")
 (autoload 'standard-dirs-project-data-local "standard-dirs.el")
 (autoload 'standard-dirs-project-runtime "standard-dirs.el")

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "standard-dirs" '("standard-dirs--")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/spinner-1.7.4/spinner-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/spinner-1.7.4/spinner-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/spinner-1.7.4/spinner-autoloads.el") (car load-path))))



(autoload 'spinner-create "spinner" "\
Create a spinner of the given TYPE.
The possible TYPEs are described in `spinner--type-to-frames'.

FPS, if given, is the number of desired frames per second.
Default is `spinner-frames-per-second'.

If BUFFER-LOCAL is non-nil, the spinner will be automatically
deactivated if the buffer is killed.  If BUFFER-LOCAL is a
buffer, use that instead of current buffer.

When started, in order to function properly, the spinner runs a
timer which periodically calls `force-mode-line-update' in the
current buffer.  If BUFFER-LOCAL was set at creation time, then
`force-mode-line-update' is called in that buffer instead.  When
the spinner is stopped, the timer is deactivated.

DELAY, if given, is the number of seconds to wait after starting
the spinner before actually displaying it. It is safe to cancel
the spinner before this time, in which case it won't display at
all.

\(fn &optional TYPE BUFFER-LOCAL FPS DELAY)" nil nil)

(autoload 'spinner-start "spinner" "\
Start a mode-line spinner of given TYPE-OR-OBJECT.
If TYPE-OR-OBJECT is an object created with `make-spinner',
simply activate it.  This method is designed for minor modes, so
they can use the spinner as part of their lighter by doing:
    '(:eval (spinner-print THE-SPINNER))
To stop this spinner, call `spinner-stop' on it.

If TYPE-OR-OBJECT is anything else, a buffer-local spinner is
created with this type, and it is displayed in the
`mode-line-process' of the buffer it was created it.  Both
TYPE-OR-OBJECT and FPS are passed to `make-spinner' (which see).
To stop this spinner, call `spinner-stop' in the same buffer.

Either way, the return value is a function which can be called
anywhere to stop this spinner.  You can also call `spinner-stop'
in the same buffer where the spinner was created.

FPS, if given, is the number of desired frames per second.
Default is `spinner-frames-per-second'.

DELAY, if given, is the number of seconds to wait until actually
displaying the spinner. It is safe to cancel the spinner before
this time, in which case it won't display at all.

\(fn &optional TYPE-OR-OBJECT FPS DELAY)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "spinner" '("spinner-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/speed-type-20191204.1107/speed-type-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/speed-type-20191204.1107/speed-type-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/speed-type-20191204.1107/speed-type-autoloads.el") (car load-path))))



(autoload 'speed-type-top-x "speed-type" "\
Speed type the N most common words.

\(fn N)" t nil)

(autoload 'speed-type-top-100 "speed-type" "\
Speed type the top 100 most common words." t nil)

(autoload 'speed-type-top-1000 "speed-type" "\
Speed type the top 1000 most common words." t nil)

(autoload 'speed-type-region "speed-type" "\
Open copy of [START,END] in a new buffer to speed type the text.

\(fn START END)" t nil)

(autoload 'speed-type-buffer "speed-type" "\
Open copy of buffer contents in a new buffer to speed type the text.

If using a prefix while calling this function (C-u), then the FULL text
will be used. Else some text will be picked randomly.

\(fn FULL)" t nil)

(autoload 'speed-type-text "speed-type" "\
Setup a new text sample to practice touch or speed typing." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "speed-type" '("speed-type-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/solarized-theme-20220619.1203/solarized-theme-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/solarized-theme-20220619.1203/solarized-theme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/solarized-theme-20220619.1203/solarized-theme-autoloads.el") (car load-path))))



(autoload 'solarized-color-blend "solarized" "\
Blends COLOR1 onto COLOR2 with ALPHA.

COLOR1 and COLOR2 should be color names (e.g. \"white\") or RGB
triplet strings (e.g. \"#ff12ec\").

Alpha should be a float between 0 and 1.

Optional argument DIGITS-PER-COMPONENT can be either 4 (the default) or 2;
use the latter if you need a 24-bit specification of a color.

\(fn COLOR1 COLOR2 ALPHA &optional DIGITS-PER-COMPONENT)" nil nil)

(autoload 'solarized-create-color-palette "solarized" "\
Create color-palette from CORE-PALETTE.

The Returned color-palette has the same format as `solarized-color-palette'

\(fn CORE-PALETTE)" nil nil)

(when (and (boundp 'custom-theme-load-path) load-file-name) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))

(register-definition-prefixes "solarized" '("solarized-"))



(register-definition-prefixes "solarized-dark-high-contrast-theme" '("solarized-dark-high-contrast"))



(register-definition-prefixes "solarized-dark-theme" '("solarized-dark"))



(register-definition-prefixes "solarized-faces" '("solarized-definition"))



(register-definition-prefixes "solarized-gruvbox-dark-theme" '("solarized-gruvbox-dark"))



(register-definition-prefixes "solarized-gruvbox-light-theme" '("solarized-gruvbox-light"))



(register-definition-prefixes "solarized-light-high-contrast-theme" '("solarized-light-high-contrast"))



(register-definition-prefixes "solarized-light-theme" '("solarized-light"))



(register-definition-prefixes "solarized-palettes" '("solarized-"))



(register-definition-prefixes "solarized-selenized-black-theme" '("solarized-selenized-black"))



(register-definition-prefixes "solarized-selenized-dark-theme" '("solarized-selenized-dark"))



(register-definition-prefixes "solarized-selenized-light-theme" '("solarized-selenized-light"))



(register-definition-prefixes "solarized-selenized-white-theme" '("solarized-selenized-white"))



(register-definition-prefixes "solarized-theme-utils" '("solarized-import-faces"))



(register-definition-prefixes "solarized-wombat-dark-theme" '("solarized-wombat-dark"))



(register-definition-prefixes "solarized-zenburn-theme" '("solarized-zenburn"))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/smex-20151212.2209/smex-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/smex-20151212.2209/smex-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/smex-20151212.2209/smex-autoloads.el") (car load-path))))



(autoload 'smex "smex" nil t nil)

(autoload 'smex-major-mode-commands "smex" "\
Like `smex', but limited to commands that are relevant to the active major mode." t nil)

(autoload 'smex-initialize "smex" nil t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smex" '("smex-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/smart-tabs-mode-20200907.2025/smart-tabs-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/smart-tabs-mode-20200907.2025/smart-tabs-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/smart-tabs-mode-20200907.2025/smart-tabs-mode-autoloads.el") (car load-path))))



(autoload 'smart-tabs-when "smart-tabs-mode" "\


\(fn CONDITION ADVICE-LIST)" nil t)

(function-put 'smart-tabs-when 'lisp-indent-function '1)

(autoload 'smart-tabs-create-advice-list "smart-tabs-mode" "\


\(fn ADVICE-LIST)" nil t)

(autoload 'smart-tabs-create-language-advice "smart-tabs-mode" "\
Create a cons cell containing the actions to take to enable
`smart-tabs-mode' for the language LANG. This usually involved enabling
`smart-tabs-mode' through `smart-tabs-mode-enable' and adding a lambda
function to the MODE-HOOK for the specified language. This macro
simplifies the creation of such a cons cell.

\(fn LANG MODE-HOOK ADVICE-LIST &rest BODY)" nil t)

(function-put 'smart-tabs-create-language-advice 'lisp-indent-function '2)

(autoload 'smart-tabs-mode "smart-tabs-mode" "\
Intelligently indent with tabs, align with spaces!

If called interactively, enable Smart-Tabs mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'smart-tabs-mode-enable "smart-tabs-mode" "\
Enable smart-tabs-mode." nil nil)

(autoload 'smart-tabs-advice "smart-tabs-mode" "\


\(fn FUNCTION OFFSET)" nil t)

(autoload 'smart-tabs-insinuate "smart-tabs-mode" "\
Enable smart-tabs-mode for LANGUAGES.
LANGUAGES is a list of SYMBOL or NAME as defined in
'smart-tabs-insinuate-alist' alist or a language using standard named
indent function and indent level.

\(fn &rest LANGUAGES)" nil nil)

(autoload 'smart-tabs-add-language-support "smart-tabs-mode" "\
Add support for a language not already in the `smart-tabs-insinuate-alist'.

\(fn LANG MODE-HOOK ADVICE-LIST &rest BODY)" nil t)

(function-put 'smart-tabs-add-language-support 'lisp-indent-function '2)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smart-tabs-mode" '("smart-tabs-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/macrostep-20161120.2106/macrostep-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/macrostep-20161120.2106/macrostep-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/macrostep-20161120.2106/macrostep-autoloads.el") (car load-path))))


(autoload 'macrostep-mode "macrostep" "\
Minor mode for inline expansion of macros in Emacs Lisp source buffers.

\\<macrostep-keymap>Progressively expand macro forms with \\[macrostep-expand], collapse them with \\[macrostep-collapse],
and move back and forth with \\[macrostep-next-macro] and \\[macrostep-prev-macro].
Use \\[macrostep-collapse-all] or collapse all visible expansions to
quit and return to normal editing.

\\{macrostep-keymap}

\(fn &optional ARG)" t nil)

(autoload 'macrostep-expand "macrostep" "\
Expand the macro form following point by one step.

Enters `macrostep-mode' if it is not already active, making the
buffer temporarily read-only. If macrostep-mode is active and the
form following point is not a macro form, search forward in the
buffer and expand the next macro form found, if any.

With a prefix argument, the expansion is displayed in a separate
buffer instead of inline in the current buffer.  Setting
`macrostep-expand-in-separate-buffer' to non-nil swaps these two
behaviors.

\(fn &optional TOGGLE-SEPARATE-BUFFER)" t nil)



(autoload 'macrostep-c-mode-hook "macrostep-c" "\


\(fn)" nil nil)

(add-hook 'c-mode-hook #'macrostep-c-mode-hook)




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/slime-20220712.817/slime-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/slime-20220712.817/slime-autoloads.el"))






(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/slime-20220712.817/slime-autoloads.el") (car load-path))))

(autoload 'slime "slime"
  "Start a Lisp subprocess and connect to its Swank server." t)

(autoload 'slime-mode "slime"
  "SLIME: The Superior Lisp Interaction (Minor) Mode for Emacs." t)

(autoload 'slime-connect "slime"
  "Connect to a running Swank server." t)

(autoload 'slime-selector "slime"
  "Select a new by type, indicated by a single character." t)

(autoload 'hyperspec-lookup "lib/hyperspec" nil t)

(autoload 'slime-lisp-mode-hook "slime")

(autoload 'slime-scheme-mode-hook "slime")

(defvar slime-contribs '(slime-fancy)
  "A list of contrib packages to load with SLIME.")

(autoload 'slime-setup "slime"
  "Setup some SLIME contribs.")

(define-obsolete-variable-alias 'slime-setup-contribs
  'slime-contribs "2.3.2")

(add-hook 'lisp-mode-hook 'slime-lisp-mode-hook)

(provide 'slime-autoloads)



(register-definition-prefixes "slime" '("??" "?c" "?d" "?e" "?i" "?l" "?n" "?p" "?q" "?t" "?v" "def-slime-selector-method" "define-sl" "defslimefun" "inferior-lisp-program" "make-slime-" "sldb-" "slime"))





(register-definition-prefixes "slime-tests" '("arglist" "async-eval-debugging" "break" "comp" "def-slime-test" "dis" "end-of-file" "find-definition" "flow-control" "indentation" "inspector" "inter" "locally-bound-debugger-hook" "loop-interrupt-" "macroexpand" "narrowing" "read" "report-condition-with-circular-list" "sbcl-world-lock" "sexp-at-point.1" "symbol-at-point." "traditional-recipe" "unwind-to-previous-sldb-level" "utf-8-source"))

)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/simple-httpd-20191103.1446/simple-httpd-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/simple-httpd-20191103.1446/simple-httpd-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/simple-httpd-20191103.1446/simple-httpd-autoloads.el") (car load-path))))



(autoload 'httpd-start "simple-httpd" "\
Start the web server process. If the server is already
running, this will restart the server. There is only one server
instance per Emacs instance." t nil)

(autoload 'httpd-stop "simple-httpd" "\
Stop the web server if it is currently running, otherwise do nothing." t nil)

(autoload 'httpd-running-p "simple-httpd" "\
Return non-nil if the simple-httpd server is running." nil nil)

(autoload 'httpd-serve-directory "simple-httpd" "\
Start the web server with given `directory' as `httpd-root'.

\(fn DIRECTORY)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "simple-httpd" '("defservlet" "httpd" "with-httpd-buffer")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/js2-mode-20220710.57/js2-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/js2-mode-20220710.57/js2-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/js2-mode-20220710.57/js2-mode-autoloads.el") (car load-path))))



atars/neagleson/.emacs.d/elpa/js2-mode-20220710.57/js2-mode-autolo
(autoload 'js2-imenu-extras-mode "js2-imenu-extras" "\
Toggle Imenu support for frameworks and structural patterns.

This is a minor mode.  If called interactively, toggle the
`Js2-Imenu-Extras mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `js2-imenu-extras-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "js2-imenu-extras" '("js2-imenu-"))



(autoload 'js2-highlight-unused-variables-mode "js2-mode" "\
Toggle highlight of unused variables.

This is a minor mode.  If called interactively, toggle the
`Js2-Highlight-Unused-Variables mode' mode.  If the prefix
argument is positive, enable the mode, and if it is zero or
negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `js2-highlight-unused-variables-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'js2-minor-mode "js2-mode" "\
Minor mode for running js2 as a background linter.
This allows you to use a different major mode for JavaScript editing,
such as `js-mode', while retaining the asynchronous error/warning
highlighting features of `js2-mode'.

This is a minor mode.  If called interactively, toggle the `Js2
minor mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `js2-minor-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(autoload 'js2-mode "js2-mode" "\
Major mode for editing JavaScript code.

\(fn)" t nil)

(autoload 'js2-jsx-mode "js2-mode" "\
Major mode for editing JSX code in Emacs 26 and earlier.

To edit JSX code in Emacs 27, use `js-mode' as your major mode
with `js2-minor-mode' enabled.

To customize the indentation for this mode, set the SGML offset
variables (`sgml-basic-offset' et al) locally, like so:

  (defun set-jsx-indentation ()
    (setq-local sgml-basic-offset js2-basic-offset))
  (add-hook \\='js2-jsx-mode-hook #\\='set-jsx-indentation)

\(fn)" t nil)

(register-definition-prefixes "js2-mode" '("js2-"))



(register-definition-prefixes "js2-old-indent" '("js2-"))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/skewer-mode-20200304.1142/skewer-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/skewer-mode-20200304.1142/skewer-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/skewer-mode-20200304.1142/skewer-mode-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cache-table" '("cache-table-")))



(autoload 'skewer-bower-refresh "skewer-bower" "\
Update the package listing and packages synchronously." t nil)

(autoload 'skewer-bower-load "skewer-bower" "\
Dynamically load a library from bower into the current page.

\(fn PACKAGE &optional VERSION)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "skewer-bower" '("skewer")))



(autoload 'skewer-css-mode "skewer-css" "\
Minor mode for interactively loading new CSS rules.

If called interactively, enable Skewer-Css mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "skewer-css" '("skewer-css")))



(autoload 'skewer-html-mode "skewer-html" "\
Minor mode for interactively loading new HTML.

If called interactively, enable Skewer-Html mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "skewer-html" '("skewer-html-")))



(autoload 'list-skewer-clients "skewer-mode" "\
List the attached browsers in a buffer." t nil)

(autoload 'skewer-mode "skewer-mode" "\
Minor mode for interacting with a browser.

If called interactively, enable Skewer mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'run-skewer "skewer-mode" "\
Attach a browser to Emacs for a skewer JavaScript REPL. Uses
`browse-url' to launch a browser.

With a prefix arugment (C-u), it will ask the filename of the
root document.  With two prefix arguments (C-u C-u), it will use
the contents of the current buffer as the root document.

\(fn &optional ARG)" t nil)

(autoload 'skewer-run-phantomjs "skewer-mode" "\
Connect an inferior PhantomJS process to Skewer, returning the process." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "skewer-mode" '("httpd/skewer/" "phantomjs-program-name" "skewer")))



(autoload 'skewer-repl--response-hook "skewer-repl" "\
Catches all browser messages logging some to the REPL.

\(fn RESPONSE)" nil nil)

(autoload 'skewer-repl "skewer-repl" "\
Start a JavaScript REPL to be evaluated in the visiting browser." t nil)

(eval-after-load 'skewer-mode '(progn (add-hook 'skewer-response-hook #'skewer-repl--response-hook) (add-hook 'skewer-repl-mode-hook #'skewer-repl-mode-compilation-shell-hook) (define-key skewer-mode-map (kbd "C-c C-z") #'skewer-repl)))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "skewer-repl" '("company-skewer-repl" "skewer-")))



(autoload 'skewer-setup "skewer-setup" "\
Fully integrate Skewer into js2-mode, css-mode, and html-mode buffers." nil nil)




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/skewer-reload-stylesheets-20160725.1220/skewer-reload-stylesheets-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/skewer-reload-stylesheets-20160725.1220/skewer-reload-stylesheets-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/skewer-reload-stylesheets-20160725.1220/skewer-reload-stylesheets-autoloads.el") (car load-path))))


(autoload 'skewer-reload-stylesheets-start-editing "skewer-reload-stylesheets" "\
Configure current buffer for live-editing.

Add this to your stylesheet editing mode hook to make every
stylesheet live-editable by default.

\(fn)" nil nil)

(autoload 'skewer-reload-stylesheets-mode "skewer-reload-stylesheets" "\
Minor mode for interactively reloading CSS stylesheets.

\(fn &optional ARG)" t nil)




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/request-20220614.1604/request-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/request-20220614.1604/request-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/request-20220614.1604/request-autoloads.el") (car load-path))))



(register-definition-prefixes "request" '("request-"))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/skerrick-20220306.2139/skerrick-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/skerrick-20220306.2139/skerrick-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/skerrick-20220306.2139/skerrick-autoloads.el") (car load-path))))



(autoload 'skerrick-eval-region "skerrick" "\
Evaluate the selected JS code." t nil)

(autoload 'skerrick-install-or-upgrade-server-binary "skerrick" "\
Install or upgrade skerrick from NPM." t nil)

(autoload 'skerrick-start-server "skerrick" "\
Start skerrick server." t nil)

(autoload 'skerrick-stop-server "skerrick" "\
Stop skerrick server." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "skerrick" '("skerrick-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/sidecar-locals-20220211.548/sidecar-locals-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/sidecar-locals-20220211.548/sidecar-locals-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/sidecar-locals-20220211.548/sidecar-locals-autoloads.el") (car load-path))))



(autoload 'sidecar-locals-report "sidecar-locals" "\
Report paths that are used to detect locals.

This creates a buffer with links that visit that file." t nil)

(defvar sidecar-locals-mode nil "\
Non-nil if Sidecar-Locals mode is enabled.
See the `sidecar-locals-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `sidecar-locals-mode'.")

(custom-autoload 'sidecar-locals-mode "sidecar-locals" nil)

(autoload 'sidecar-locals-mode "sidecar-locals" "\
Toggle variable `sidecar-locals-mode' in the current buffer.

If called interactively, enable Sidecar-Locals mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "sidecar-locals" '("sidecar-locals-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/sicp-20200512.1137/sicp-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/sicp-20200512.1137/sicp-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/sicp-20200512.1137/sicp-autoloads.el") (car load-path))))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/shut-up-20210403.1249/shut-up-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/shut-up-20210403.1249/shut-up-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/shut-up-20210403.1249/shut-up-autoloads.el") (car load-path))))



(autoload 'shut-up "shut-up" "\
Evaluate BODY with silenced output.

While BODY is evaluated, all output is redirected to a buffer,
unless `shut-up-ignore' is non-nil.  This affects:

- `message'
- All functions using `standard-output' (e.g. `print', `princ', etc.)

Inside BODY, the buffer is bound to the lexical variable
`shut-up-sink'.  Additionally provide a lexical function
`shut-up-current-output', which returns the current contents of
`shut-up-sink' when called with no arguments.

Changes to the variable `shut-up-ignore' inside BODY does not
have any affect.

\(fn &rest BODY)" nil t)

(function-put 'shut-up 'lisp-indent-function '0)

(autoload 'shut-up-silence-emacs "shut-up" "\
Silence Emacs.

Change Emacs settings to reduce the output.

WARNING: This function has GLOBAL SIDE-EFFECTS.  You should only
call this function in `noninteractive' sessions." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "shut-up" '("inhibit-message" "shut-up-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/show-eol-20210715.1227/show-eol-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/show-eol-20210715.1227/show-eol-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/show-eol-20210715.1227/show-eol-autoloads.el") (car load-path))))



(autoload 'show-eol-mode "show-eol" "\
Minor mode 'show-eol-mode'.

If called interactively, enable Show-Eol mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'global-show-eol-mode 'globalized-minor-mode t)

(defvar global-show-eol-mode nil "\
Non-nil if Global Show-Eol mode is enabled.
See the `global-show-eol-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-show-eol-mode'.")

(custom-autoload 'global-show-eol-mode "show-eol" nil)

(autoload 'global-show-eol-mode "show-eol" "\
Toggle Show-Eol mode in all buffers.
With prefix ARG, enable Global Show-Eol mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Show-Eol mode is enabled in all buffers where
`show-eol-turn-on-show-eol-mode' would do it.
See `show-eol-mode' for more information on Show-Eol mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "show-eol" '("show-eol-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/reformatter-20210831.1405/reformatter-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/reformatter-20210831.1405/reformatter-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/reformatter-20210831.1405/reformatter-autoloads.el") (car load-path))))



(autoload 'reformatter-define "reformatter" "\
Define a reformatter command with NAME.

When called, the reformatter will use PROGRAM and any ARGS to
reformat the current buffer.  The contents of the buffer will be
passed as standard input to the reformatter, which should output
them to standard output.  A nonzero exit code will be reported as
failure, and the output of the command to standard error will be
displayed to the user.

The macro accepts the following keyword arguments:

PROGRAM (required)

  Provides a form which should evaluate to a string at runtime,
  e.g. a literal string, or the name of a variable which holds
  the program path.

ARGS

  Command-line arguments for the program.  If provided, this is a
  form which evaluates to a list of strings at runtime.  Default
  is the empty list.  This form is evaluated at runtime so that
  you can use buffer-local variables to influence the args passed
  to the reformatter program: the variable `input-file' will be
  lexically bound to the path of a file containing the text to be
  reformatted: see the keyword options INPUT-FILE, STDIN and
  STDOUT for more information.

STDIN

  When non-nil (the default), the program is passed the input
  data on stdin.  Set this to nil when your reformatter can only
  operate on files in place.  In such a case, your ARGS should
  include a reference to the `input-file' variable, which will be
  bound to an input path when evaluated.

STDOUT

  When non-nil (the default), the program is expected to write
  the reformatted text to stdout.  Set this to nil if your
  reformatter can only operate on files in place, in which case
  the contents of the temporary input file will be used as the
  replacement text.

INPUT-FILE

  Sometimes your reformatter program might expect files to be in
  a certain directory or have a certain file extension.  This option
  lets you handle that.

  If provided, it is a form which will be evaluated before each
  run of the formatter, and is expected to return a temporary
  file path suitable for holding the region to be reformatted.
  It must not produce the same path as the current buffer's file
  if that is set: you shouldn't be operating directly on the
  buffer's backing file.  The temporary input file will be
  deleted automatically.  You might find the function
  `reformatter-temp-file-in-current-directory' helpful.

MODE

  Unless nil, also generate a minor mode that will call the
  reformatter command from `before-save-hook' when enabled.
  Default is t.

GROUP

  If provided, this is the custom group used for any generated
  modes or custom variables.  Don't forget to declare this group
  using a `defgroup' form.

LIGHTER

  If provided, this is a mode lighter string which will be used
  for the \"-on-save\" minor mode.  It should have a leading
  space.  The supplied value will be used as the default for a
  generated custom variable which specifies the mode lighter.
  Default is nil, ie. no lighter.

KEYMAP

  If provided, this is the symbol name of the \"-on-save\" mode's
  keymap, which you must declare yourself.  Default is no keymap.

EXIT-CODE-SUCCESS-P

  If provided, this is a function object callable with `funcall'
  which accepts an integer process exit code, and returns non-nil
  if that exit code is considered successful.  This could be a
  lambda, quoted symbol or sharp-quoted symbol.  If not supplied,
  the code is considered successful if it is `zerop'.

\(fn NAME &key PROGRAM ARGS (MODE t) (STDIN t) (STDOUT t) INPUT-FILE LIGHTER KEYMAP GROUP (EXIT-CODE-SUCCESS-P \\='zerop))" nil t)

(function-put 'reformatter-define 'lisp-indent-function 'defun)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "reformatter" '("reformatter-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/shfmt-20210803.222/shfmt-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/shfmt-20210803.222/shfmt-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/shfmt-20210803.222/shfmt-autoloads.el") (car load-path))))


 (autoload 'shfmt-buffer "shfmt" nil t)
 (autoload 'shfmt-region "shfmt" nil t)
 (autoload 'shfmt-on-save-mode "shfmt" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "shfmt" '("shfmt-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/shell-pop-20200315.1139/shell-pop-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/shell-pop-20200315.1139/shell-pop-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/shell-pop-20200315.1139/shell-pop-autoloads.el") (car load-path))))



(defvar shell-pop-universal-key nil "\
Key binding used to pop in and out of the shell.

The input format is the same as that of `kbd'.")

(custom-autoload 'shell-pop-universal-key "shell-pop" nil)

(autoload 'shell-pop "shell-pop" "\


\(fn ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "shell-pop" '("shell-pop-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/sexp-diff-20200314.2018/sexp-diff-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/sexp-diff-20200314.2018/sexp-diff-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/sexp-diff-20200314.2018/sexp-diff-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "sexp-diff" '("sexp-diff--")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/sesman-20210901.1134/sesman-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/sesman-20210901.1134/sesman-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/sesman-20210901.1134/sesman-autoloads.el") (car load-path))))



(autoload 'sesman-start "sesman" "\
Start a Sesman session." t nil)

(autoload 'sesman-restart "sesman" "\
Restart sesman session.
When WHICH is nil, restart the current session; when a single universal
argument or 'linked, restart all linked sessions; when a double universal
argument, t or 'all, restart all sessions. For programmatic use, WHICH can also
be a session or a name of the session, in which case that session is restarted.

\(fn &optional WHICH)" t nil)

(autoload 'sesman-quit "sesman" "\
Terminate a Sesman session.
When WHICH is nil, kill only the current session; when a single universal
argument or 'linked, kill all linked sessions; when a double universal argument,
t or 'all, kill all sessions. For programmatic use, WHICH can also be a session
or a name of the session, in which case that session is killed.

\(fn &optional WHICH)" t nil)

(autoload 'sesman-info "sesman" "\
Display info for all current sessions (`sesman-current-sessions').
In the resulting minibuffer display linked sessions are numbered and the
other (friendly) sessions are not. When ALL is non-nil, show info for all
sessions.

\(fn &optional ALL)" t nil)

(autoload 'sesman-link-with-buffer "sesman" "\
Ask for SESSION and link with BUFFER.
BUFFER defaults to current buffer. On universal argument, or if BUFFER is 'ask,
ask for buffer.

\(fn &optional BUFFER SESSION)" t nil)

(autoload 'sesman-link-with-directory "sesman" "\
Ask for SESSION and link with DIR.
DIR defaults to `default-directory'. On universal argument, or if DIR is 'ask,
ask for directory.

\(fn &optional DIR SESSION)" t nil)

(autoload 'sesman-link-with-project "sesman" "\
Ask for SESSION and link with PROJECT.
PROJECT defaults to current project. On universal argument, or if PROJECT is
'ask, ask for the project. SESSION defaults to the current session.

\(fn &optional PROJECT SESSION)" t nil)

(autoload 'sesman-link-with-least-specific "sesman" "\
Ask for SESSION and link with the least specific context available.
Normally the least specific context is the project. If not in a project, link
with the `default-directory'. If `default-directory' is nil, link with current
buffer.

\(fn &optional SESSION)" t nil)

(autoload 'sesman-unlink "sesman" "\
Break sesman LINKS.
If LINKS is nil, ask interactively for a link. With a prefix argument break all
links.

\(fn &optional LINKS)" t nil)
 (autoload 'sesman-map "sesman" "Session management prefix keymap." t 'keymap)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "sesman" '("sesman-")))



(autoload 'sesman-browser "sesman-browser" "\
Display an interactive session browser.
See `sesman-browser-mode' for more details." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "sesman-browser" '("sesman-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/edit-indirect-20220216.1812/edit-indirect-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/edit-indirect-20220216.1812/edit-indirect-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/edit-indirect-20220216.1812/edit-indirect-autoloads.el") (car load-path))))



(autoload 'edit-indirect-region "edit-indirect" "\
Edit the region BEG..END in a separate buffer.
The region is copied, without text properties, to a separate
buffer, called edit-indirect buffer, and
`edit-indirect-guess-mode-function' is called to set the major
mode.
When done, exit with `edit-indirect-commit', which will remove the
original region and replace it with the edited version; or with
`edit-indirect-abort', which will drop the modifications.

This differs from `clone-indirect-buffer' with narrowing in that
the text properties are not shared, so the parent buffer major mode
and the edit-indirect buffer major mode will not be able to tread
on each other's toes by setting up potentially conflicting text
properties, which happens surprisingly often when the font-lock
mode is used.

Edit-indirect buffers use the `edit-indirect-mode-map' keymap.

If there's already an edit-indirect buffer for BEG..END, use that.
If there's already an edit-indirect buffer active overlapping any
portion of BEG..END, an `edit-indirect-overlapping' error is
signaled.

When DISPLAY-BUFFER is non-nil or when called interactively,
display the edit-indirect buffer in some window and select it.

In any case, return the edit-indirect buffer.

\(fn BEG END &optional DISPLAY-BUFFER)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "edit-indirect" '("edit-indirect-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/separedit-20220226.1344/separedit-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/separedit-20220226.1344/separedit-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/separedit-20220226.1344/separedit-autoloads.el") (car load-path))))



(autoload 'separedit-dwim-described-variable "separedit" "\
Edit value of variable at poin in help/helpful buffer." t nil)

(autoload 'separedit-dwim-default "separedit" "\
Edit comment or docstring or code BLOCK in them.

Normally, the major mode of the edit buffer will be selected automatically,
but users can also manually select it by pressing `C-u \\[separedit]'.

\(fn &optional BLOCK)" t nil)

(autoload 'separedit-dwim "separedit" "\


\(fn &optional BLOCK)" t nil)

(defalias 'separedit 'separedit-dwim)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "separedit" '("separedit-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/scss-mode-20180123.1708/scss-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/scss-mode-20180123.1708/scss-mode-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/scss-mode-20180123.1708/scss-mode-autoloads.el") (car load-path))))


(autoload 'scss-mode "scss-mode" "\
Major mode for editing SCSS files, http://sass-lang.com/
Special commands:
\\{scss-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.scss\\'" . scss-mode))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/quick-peek-20200130.2059/quick-peek-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/quick-peek-20200130.2059/quick-peek-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/quick-peek-20200130.2059/quick-peek-autoloads.el") (car load-path))))



(autoload 'quick-peek-overlay-at "quick-peek" "\
Find overlay for line at POS.

\(fn POS)" nil nil)

(autoload 'quick-peek-show "quick-peek" "\
Show STR in an inline window at POS.
MIN-H (default: 4) and MAX-H (default: 16) are bounds on the
height of the window.  Setting MAX-H to `none' allows the inline
window to expand past the bottom of the current Emacs window.

\(fn STR &optional POS MIN-H MAX-H)" nil nil)

(autoload 'quick-peek-hide "quick-peek" "\
Hide inline windows.
With non-nil POS, clear only overlays on line of POS.
Return the number of overlays hidden.

\(fn &optional POS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "quick-peek" '("quick-peek-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/scrollable-quick-peek-20201224.329/scrollable-quick-peek-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/scrollable-quick-peek-20201224.329/scrollable-quick-peek-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/scrollable-quick-peek-20201224.329/scrollable-quick-peek-autoloads.el") (car load-path))))



(autoload 'scrollable-quick-peek-scroll-up "scrollable-quick-peek" "\
Scroll up in the currently displayed overlay." t nil)

(autoload 'scrollable-quick-peek-scroll-down "scrollable-quick-peek" "\
Scroll down in the currently displayed overlay." t nil)

(autoload 'scrollable-quick-peek-show "scrollable-quick-peek" "\
Show STR in an inline scrollable window at POS.
MIN-H (default: 4) and MAX-H (default: 16) are passed directly to
`quick-peek'. `quick-peek' also accepts a `'none' option for MIN-H
and MAX-H but these will not get passed given these don't make
sense for `scrollale-quick-peek'.

\(fn STR &optional POS MIN-H MAX-H)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "scrollable-quick-peek" '("scrollable-quick-peek")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/scratch-comment-20200812.1025/scratch-comment-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/scratch-comment-20200812.1025/scratch-comment-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/scratch-comment-20200812.1025/scratch-comment-autoloads.el") (car load-path))))



(autoload 'scratch-comment-eval-sexp "scratch-comment" "\
Eval sexp before point and print result as comment.
see `eval-print-last-sexp'." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "scratch-comment" '("scratch-comment-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/sane-term-20181130.101/sane-term-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/sane-term-20181130.101/sane-term-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/sane-term-20181130.101/sane-term-autoloads.el") (car load-path))))


(autoload 'sane-term-create "sane-term" "\
Create new term buffer.

\(fn)" t nil)

(autoload 'sane-term "sane-term" "\
Cycle through term buffers, creating if necessary.

\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/rjsx-mode-20200120.1446/rjsx-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/rjsx-mode-20200120.1446/rjsx-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/rjsx-mode-20200120.1446/rjsx-mode-autoloads.el") (car load-path))))



(autoload 'rjsx-mode "rjsx-mode" "\
Major mode for editing JSX files.

\(fn)" t nil)

(autoload 'rjsx-minor-mode "rjsx-mode" "\
Minor mode for parsing JSX syntax into an AST.

If called interactively, enable Rjsx minor mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it
if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))

(autoload 'rjsx-comment-dwim "rjsx-mode" "\
RJSX implementation of `comment-dwim'. If called on a region,
this function delegates to `comment-or-uncomment-region'. If the
point is not in a JSX context, it delegates to the
`comment-dwim', otherwise it will comment the JSX AST node at
point using the apppriate comment delimiters.

For example: If point is on a JSX attribute or JSX expression, it
will comment the entire attribute using \"/* */\". , otherwise if
it's on a descendent JSX Element, it will use \"{/* */}\"
instead.

\(fn ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rjsx-mode" '("rjsx-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/rfc-mode-20210615.1721/rfc-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/rfc-mode-20210615.1721/rfc-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/rfc-mode-20210615.1721/rfc-mode-autoloads.el") (car load-path))))



(autoload 'rfc-mode-read "rfc-mode" "\
Read the RFC document NUMBER.
Offer the number at point as default.

\(fn NUMBER)" t nil)

(autoload 'rfc-mode-browse "rfc-mode" "\
Browse through all RFC documents referenced in the index." t nil)

(autoload 'rfc-mode "rfc-mode" "\
Major mode to browse and read RFC documents.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("/rfc[0-9]+\\.txt\\'" . rfc-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rfc-mode" '("rfc-mode-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/reveal-in-osx-finder-20150802.1657/reveal-in-osx-finder-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/reveal-in-osx-finder-20150802.1657/reveal-in-osx-finder-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/reveal-in-osx-finder-20150802.1657/reveal-in-osx-finder-autoloads.el") (car load-path))))



(autoload 'reveal-in-osx-finder "reveal-in-osx-finder" "\
Reveal the file associated with the current buffer in the OS X Finder.
In a dired buffer, it will open the current directory.

\(fn)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "reveal-in-osx-finder" '("reveal-in-osx-finder-as")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/reveal-in-folder-20220110.1821/reveal-in-folder-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/reveal-in-folder-20220110.1821/reveal-in-folder-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/reveal-in-folder-20220110.1821/reveal-in-folder-autoloads.el") (car load-path))))



(autoload 'reveal-in-folder-at-point "reveal-in-folder" "\
Reveal the current file in folder at point." t nil)

(autoload 'reveal-in-folder-this-buffer "reveal-in-folder" "\
Reveal the current buffer in folder." t nil)

(autoload 'reveal-in-folder "reveal-in-folder" "\
Reveal buffer/path depends on cursor condition." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "reveal-in-folder" '("reveal-in-folder-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/regex-tool-20170104.1918/regex-tool-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/regex-tool-20170104.1918/regex-tool-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/regex-tool-20170104.1918/regex-tool-autoloads.el") (car load-path))))


(autoload 'regex-tool "regex-tool" "\


\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/rainbow-mode-1.0.5/rainbow-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/rainbow-mode-1.0.5/rainbow-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/rainbow-mode-1.0.5/rainbow-mode-autoloads.el") (car load-path))))



(autoload 'rainbow-mode "rainbow-mode" "\
Colorize strings that represent colors.
This will fontify with colors the string like \"#aabbcc\" or \"blue\".

If called interactively, enable Rainbow mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rainbow-mode" '("rainbow-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/racket-mode-20220405.1747/racket-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/racket-mode-20220405.1747/racket-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/racket-mode-20220405.1747/racket-mode-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-back-end" '("racket-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-browse-url" '("racket-browse-")))



(autoload 'racket-bug-report "racket-bug-report" "\
Fill a buffer with data to make a Racket Mode bug report." t nil)



(defvar racket-start-back-end-hook nil "\
Hook run after `racket-start-back-end' finishes successfully.")

(defvar racket-stop-back-end-hook nil "\
Hook run before `racket-stop-back-end'.")

(autoload 'racket-start-back-end "racket-cmd" "\
Start a back end process used by Racket Mode.

If a process is already started, this command will stop and restart it.

When successful runs the hook `racket-start-back-end-hook'." t nil)

(autoload 'racket-stop-back-end "racket-cmd" "\
Stop a back end process used by Racket Mode.

Before doing anything runs the hook `racket-stop-back-end-hook'." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-cmd" '("racket--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-collection" '("racket-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-common" '("racket-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-company-doc" '("racket--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-complete" '("racket--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-custom" '("defface-racket" "racket-")))



(autoload 'racket--debug-send-definition "racket-debug" "\


\(fn BEG END)" nil nil)

(autoload 'racket--debug-on-break "racket-debug" "\


\(fn RESPONSE)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-debug" '("racket-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-describe" '("racket-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-doc" '("racket--")))



(add-to-list 'hs-special-modes-alist '(racket-mode "(" ")" ";" nil nil))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-edit" '("racket-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-eldoc" '("racket--do-eldoc")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-font-lock" '("load-theme" "racket-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-imenu" '("racket-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-indent" '("racket-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-keywords-and-builtins" '("racket-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-logger" '("racket-")))



(autoload 'racket-mode "racket-mode" "\
Major mode for editing Racket source files.

\\{racket-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.rkt\\'" . racket-mode))

(add-to-list 'auto-mode-alist '("\\.rktd\\'" . racket-mode))

(add-to-list 'auto-mode-alist '("\\.rktl\\'" . racket-mode))

(modify-coding-system-alist 'file "\\.rkt[dl]?\\'" 'utf-8)

(add-to-list 'interpreter-mode-alist '("racket" . racket-mode))

(autoload 'racket-mode-start-faster "racket-mode" "\
Compile Racket Mode's .rkt files for faster startup.

Racket Mode is implemented as an Emacs Lisp \"front end\" that
talks to a Racket process \"back end\". Because Racket Mode is
delivered as an Emacs package instead of a Racket package,
installing it does not do the `raco setup` that is normally done
for Racket packages.

This command will do a `raco make` of Racket Mode's .rkt files,
creating bytecode files in `compiled/` subdirectories. As a
result, when a command must start the Racket process, it will
start somewhat faster.

On many computers, the resulting speed up is negligible, and
might not be worth the complication.

If you run this command, ever, you will need to run it again
after:

- Installing an updated version of Racket Mode. Otherwise, you
  might lose some of the speed-up.

- Installing a new version of Racket and/or changing the value of
  the variable `racket-program'. Otherwise, you might get an
  error message due to the bytecode being different versions.

To revert to compiling on startup, use
`racket-mode-start-slower'. " t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-mode" '("racket-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-parens" '("racket-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-ppss" '("racket--ppss-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-profile" '("racket-")))



(autoload 'racket-repl "racket-repl" "\
Show a Racket REPL buffer in some window.

*IMPORTANT*

The main, intended use of Racket Mode's REPL is that you
`find-file' some specific .rkt file, then run it using
`racket-run' or `racket-run-module-at-point'. The resulting REPL
will correspond to those definitions and match your expectations.

If you really want to start a REPL for no file in particular,
then you could use this `racket-repl' command. But the resulting
REPL will have a minimal \"#lang racket/base\" namespace. You
could enter \"(require racket)\" if you want the equivalent of
\"#lang racket\". You could also \"(require racket/enter)\" if
you want things like \"enter!\". But in some sense you'd be
\"using it wrong\". If you actually don't want to use Racket
Mode's REPL as intended, then consider using a plain Emacs
`shell' buffer to run command-line Racket.

\(fn &optional NOSELECT)" t nil)

(autoload 'racket-run "racket-repl" "\
Save the buffer in REPL and run your program.

As well as evaluating the outermost, file module, automatically
runs the submodules specified by the customization variable
`racket-submodules-to-run'.

See also `racket-run-module-at-point', which runs just the
specific module at point.

With \\[universal-argument] uses errortrace for improved stack traces.
Otherwise follows the `racket-error-context' setting.

With \\[universal-argument] \\[universal-argument] instruments
code for step debugging. See `racket-debug-mode' and the variable
`racket-debuggable-files'.

Each run occurs within a Racket custodian. Any prior run's
custodian is shut down, releasing resources like threads and
ports. Each run's evaluation environment is reset to the contents
of the source file. In other words, like Dr Racket, this provides
the benefit that your source file is the \"single source of
truth\". At the same time, the run gives you a REPL inside the
namespace of the module, giving you the ability to explore it
interactively. Any explorations are temporary, unless you also
make them to your source file, they will be lost on the next run.

See also `racket-run-and-switch-to-repl', which is even more like
Dr Racket's Run command because it selects the REPL window after
running.

In the `racket-repl-mode' buffer, output that describes a file
and position is automatically \"linkified\". Examples of such
text include:

- Racket error messages.
- rackunit test failure location messages.
- print representation of path objects.

To visit these locations, move point there and press RET or mouse
click. Or, use the standard `next-error' and `previous-error'
commands.

\(fn &optional PREFIX)" t nil)

(autoload 'racket-run-module-at-point "racket-repl" "\
Save the buffer and run the module at point.

Like `racket-run' but runs the innermost module around point,
which is determined textually by looking for \"module\",
\"module*\", or \"module+\" forms nested to any depth, else
simply the outermost, file module.

\(fn &optional PREFIX)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-repl" '("racket-" "with-racket-repl-buffer")))



(autoload 'racket-call-racket-repl-buffer-name-function "racket-repl-buffer-name" nil nil nil)

(autoload 'racket-repl-buffer-name-shared "racket-repl-buffer-name" "\
All `racket-mode' edit buffers share one `racket-repl-mode' buffer per back end.

A value for the variable `racket-repl-buffer-name-function'." t nil)

(autoload 'racket-repl-buffer-name-unique "racket-repl-buffer-name" "\
Each `racket-mode' edit buffer gets its own `racket-repl-mode' buffer.

A value for the variable `racket-repl-buffer-name-function'." t nil)

(autoload 'racket-repl-buffer-name-project "racket-repl-buffer-name" "\
All `racket-mode' buffers in a project share a `racket-repl-mode' buffer.

A value for the variable `racket-repl-buffer-name-function'.

The \"project\" is determined by `racket-project-root'." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-repl-buffer-name" '("racket-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-scribble" '("racket--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-show" '("racket-")))



(autoload 'racket-smart-open-bracket-mode "racket-smart-open" "\
Minor mode to let you always type `[`' to insert `(` or `[` automatically.

If called interactively, enable Racket-Smart-Open-Bracket mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

Behaves like the \"Automatically adjust opening square brackets\"
feature in Dr. Racket.

By default, inserts a `(`. Inserts a `[` in the following cases:

  - `let`-like bindings -- forms with `let` in the name as well
    as things like `parameterize`, `with-handlers`, and
    `with-syntax`.

  - `case`, `cond`, `match`, `syntax-case`, `syntax-parse`, and
    `syntax-rules` clauses.

  - `for`-like bindings and `for/fold` accumulators.

  - `class` declaration syntax, such as `init` and `inherit`.

When the previous s-expression in a sequence is a compound
expression, uses the same kind of delimiter.

To force insert `[`, use `quoted-insert'.

Combined with `racket-insert-closing' this means that you can
press the unshifted `[` and `]` keys to get whatever delimiters
follow the Racket conventions for these forms. When something
like `electric-pair-mode' or `paredit-mode' is active, you need
not even press `]`.

Tip: When also using `paredit-mode', enable that first so that
the binding for the `[`' key in the map for
`racket-smart-open-bracket-mode' has higher priority. See also
the variable `minor-mode-map-alist'.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-smart-open" '("racket-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-stepper" '("racket-")))



(autoload 'racket-unicode-input-method-enable "racket-unicode-input-method" "\
Set input method to racket-unicode.

The racket-unicode input method lets you easily type various
Unicode symbols that might be useful when writing Racket code.

To automatically enable the racket-unicode input method in
racket-mode and racket-repl-mode buffers, put the following code
in your Emacs init file:

#+BEGIN_SRC elisp
    (add-hook 'racket-mode-hook #'racket-unicode-input-method-enable)
    (add-hook 'racket-repl-mode-hook #'racket-unicode-input-method-enable)
#+END_SRC

To temporarily enable this input method for a single buffer you
can use \"M-x racket-unicode-input-method-enable\".

Use the standard Emacs key C-\\ to toggle the input method.

When the racket-unicode input method is active, you can for
example type \"All\" and it is immediately replaced with \"∀\". A
few other examples:

| omega     | ω                        |
| x_1       | x₁                       |
| x^1       | x¹                       |
| A         | 𝔸                        |
| test-->>E | test-->>∃ (racket/redex) |
| vdash     | ⊢                        |

To see a table of all key sequences use \"M-x
describe-input-method <RET> racket-unicode\".

If you want to add your own mappings to the \"racket-unicode\"
input method, you may add code like the following example in your
Emacs init file:

#+BEGIN_SRC elisp
    ;; Either (require 'racket-mode) here, or, if you use
    ;; use-package, put the code below in the :config section.
    (with-temp-buffer
      (racket-unicode-input-method-enable)
      (set-input-method \"racket-unicode\")
      (let ((quail-current-package (assoc \"racket-unicode\"
                                          quail-package-alist)))
        (quail-define-rules ((append . t))
                            (\"^o\" [\"ᵒ\"]))))
#+END_SRC

If you don’t like the highlighting of partially matching tokens you
can turn it off by setting `input-method-highlight-flag' to nil." t nil)



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-util" '("racket-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-visit" '("racket--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-wsl" '("racket-")))



(autoload 'racket-xp-mode "racket-xp" "\
A minor mode that analyzes expanded code to explain and explore.

If called interactively, enable Racket-Xp mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

This minor mode is an optional enhancement to `racket-mode' edit
buffers. Like any minor mode, you can turn it on or off for a
specific buffer. If you always want to use it, put the following
code in your Emacs init file:

#+BEGIN_SRC elisp
    (require 'racket-xp)
    (add-hook 'racket-mode-hook #'racket-xp-mode)
#+END_SRC

Note: This mode won't do anything unless/until the Racket Mode
back end is running. It will try to start the back end
automatically. You do /not/ need to `racket-run' the buffer you
are editing.

This mode uses the drracket/check-syntax package to analyze
fully-expanded programs, without needing to evaluate a.k.a.
\"run\" them. The resulting analysis provides information for:

- Visually annotating bindings -- local or imported definitions
  and references to them.

- Visually annotating expressions in a tail position, as well as
  the enclosing expression with respect to which they are in a
  tail position.

- Completion candidates.

- Defintions' source and documentation.

When point is on a definition or use, related items are
highlighted using `racket-xp-def-face' and `racket-xp-use-face'
-- instead of drawing arrows as in Dr Racket. Information is
displayed using the function(s) in the hook variable
`racket-show-functions'; it is also available when hovering the
mouse cursor.

Note: If you find these point-motion features too distracting
and/or slow, in your `racket-xp-mode-hook' you may disable them:

#+BEGIN_SRC elisp
  (require 'racket-xp)
  (add-hook 'racket-xp-mode-hook
            (lambda ()
              (remove-hook 'pre-redisplay-functions
                           #'racket-xp-pre-redisplay
                           t)))
#+END_SRC

The remaining features discussed below will still work.

You may also use commands to navigate among a definition and its
uses, or to rename a local definitions and all its uses:

  - `racket-xp-next-definition'
  - `racket-xp-previous-definition'
  - `racket-xp-next-use'
  - `racket-xp-previous-use'

In the following little example, not only does
drracket/check-syntax distinguish the various \"x\" bindings, it
understands the two different imports of \"define\":

#+BEGIN_SRC racket
  #lang racket/base
  (define x 1)
  x
  (let ([x x])
    (+ x 1))
  (module m typed/racket/base
    (define x 2)
    x)
#+END_SRC

When point is on the opening parenthesis of an expression in tail
position, it is highlighted using the face
`racket-xp-tail-position-face'.

When point is on the opening parenthesis of an enclosing
expression with respect to which one or more expressions are in
tail position, it is highlighted using the face
`racket-xp-tail-target-face'.

Furthermore, when point is on the opening parenthesis of either
kind of expression, all of the immediately related expressions
are also highlighted. Various commands move among them:

  - `racket-xp-tail-up'
  - `racket-xp-tail-down'
  - `racket-xp-tail-next-sibling'
  - `racket-xp-tail-previous-sibling'

The function `racket-xp-complete-at-point' is added to the
variable `completion-at-point-functions'. Note that in this case,
it is not smart about submodules; identifiers are assumed to be
definitions from the file's module or its imports. In addition to
supplying completion candidates, it supports the
\":company-location\" property to inspect the definition of a
candidate and the \":company-doc-buffer\" property to view its
documentation.

When you edit the buffer, existing annotations are retained;
their positions are updated to reflect the edit. Annotations for
new or deleted text are not requested until after
`racket-xp-after-change-refresh-delay' seconds. The request is
made asynchronously so that Emacs will not block -- for
moderately complex source files, it can take some seconds simply
to fully expand them, as well as a little more time for the
drracket/check-syntax analysis. When the results are ready, all
annotations for the buffer are completely refreshed.

You may also set `racket-xp-after-change-refresh-delay' to nil
and use the `racket-xp-annotate' command manually.

The mode line changes to reflect the current status of
annotations, and whether or not you had a syntax error.

If you have one or more syntax errors, `racket-xp-next-error' and
`racket-xp-previous-error' navigate among them. Although most
languages will stop after the first syntax error, some like Typed
Racket will try to collect and report multiple errors.

You may use `xref-find-definitions' \\[xref-find-definitions],
`xref-pop-marker-stack' \\[xref-pop-marker-stack], and
`xref-find-references': `racket-xp-mode' adds a backend to the
variable `xref-backend-functions'. This backend uses information
from the drracket/check-syntax static analysis. Its ability to
find references is limited to the current file; when it finds
none it will try the default xref backend implementation which is
grep-based.

Tip: This mode follows the convention that a minor mode may only
use a prefix key consisting of \"C-c\" followed by a punctuation
key. As a result, `racket-xp-control-c-hash-keymap' is bound to
\"C-c #\" by default. Although you might find this awkward to
type, remember that as an Emacs user, you are free to bind this
map to a more convenient prefix, and/or bind any individual
commands directly to whatever keys you prefer.

\\{racket-xp-mode-map}

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-xp" '("racket-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "racket-xp-complete" '("racket-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/qrencode-20211010.1334/qrencode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/qrencode-20211010.1334/qrencode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/qrencode-20211010.1334/qrencode-autoloads.el") (car load-path))))



(autoload 'qrencode-region "qrencode" "\
Encode region between BEG and END into a QR code and show in a buffer.

\(fn BEG END)" t nil)

(autoload 'qrencode-url-at-point "qrencode" "\
Encode any URL found at point." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "qrencode" '("qrencode")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/pyvenv-20211014.707/pyvenv-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/pyvenv-20211014.707/pyvenv-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/pyvenv-20211014.707/pyvenv-autoloads.el") (car load-path))))



(autoload 'pyvenv-activate "pyvenv" "\
Activate the virtual environment in DIRECTORY.

\(fn DIRECTORY)" t nil)

(autoload 'pyvenv-deactivate "pyvenv" "\
Deactivate any current virtual environment." t nil)

(autoload 'pyvenv-workon "pyvenv" "\
Activate a virtual environment from $WORKON_HOME.

If the virtual environment NAME is already active, this function
does not try to reactivate the environment.

\(fn NAME)" t nil)

(defvar pyvenv-mode nil "\
Non-nil if Pyvenv mode is enabled.
See the `pyvenv-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyvenv-mode'.")

(custom-autoload 'pyvenv-mode "pyvenv" nil)

(autoload 'pyvenv-mode "pyvenv" "\
Global minor mode for pyvenv.

If called interactively, enable Pyvenv mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

Will show the current virtualenv in the mode line, and respect a
`pyvenv-workon' setting in files.

\(fn &optional ARG)" t nil)

(defvar pyvenv-tracking-mode nil "\
Non-nil if Pyvenv-Tracking mode is enabled.
See the `pyvenv-tracking-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyvenv-tracking-mode'.")

(custom-autoload 'pyvenv-tracking-mode "pyvenv" nil)

(autoload 'pyvenv-tracking-mode "pyvenv" "\
Global minor mode to track the current virtualenv.

If called interactively, enable Pyvenv-Tracking mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When this mode is active, pyvenv will activate a buffer-specific
virtualenv whenever the user switches to a buffer with a
buffer-local `pyvenv-workon' or `pyvenv-activate' variable.

\(fn &optional ARG)" t nil)

(autoload 'pyvenv-restart-python "pyvenv" "\
Restart Python inferior processes." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyvenv" '("pyvenv-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/pyvenv-auto-20220315.1606/pyvenv-auto-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/pyvenv-auto-20220315.1606/pyvenv-auto-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/pyvenv-auto-20220315.1606/pyvenv-auto-autoloads.el") (car load-path))))



(defvar pyvenv-auto-mode nil "\
Non-nil if Pyvenv-Auto mode is enabled.
See the `pyvenv-auto-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyvenv-auto-mode'.")

(custom-autoload 'pyvenv-auto-mode "pyvenv-auto" nil)

(autoload 'pyvenv-auto-mode "pyvenv-auto" "\
Turn on pyvenv-auto-mode.

If called interactively, enable Pyvenv-Auto mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyvenv-auto" '("pyvenv-auto-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/pythonic-20210122.1247/pythonic-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/pythonic-20210122.1247/pythonic-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/pythonic-20210122.1247/pythonic-autoloads.el") (car load-path))))



(autoload 'pythonic-activate "pythonic" "\
Activate python VIRTUALENV.

\(fn VIRTUALENV)" t nil)

(autoload 'pythonic-deactivate "pythonic" "\
Deactivate python virtual environment." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pythonic" '("pythonic-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/python-mode-20220327.1842/python-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/python-mode-20220327.1842/python-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/python-mode-20220327.1842/python-mode-autoloads.el") (car load-path))))



(autoload 'py-backward-class-bol "python-mode" "\
Go to beginning of ‘class’, go to BOL.
If already at beginning, go one ‘class’ backward.
Return beginning of ‘class’ if successful, nil otherwise" t nil)

(autoload 'py-backward-def-bol "python-mode" "\
Go to beginning of ‘def’, go to BOL.
If already at beginning, go one ‘def’ backward.
Return beginning of ‘def’ if successful, nil otherwise" t nil)

(autoload 'py-backward-def-or-class-bol "python-mode" "\
Go to beginning of ‘def-or-class’, go to BOL.
If already at beginning, go one ‘def-or-class’ backward.
Return beginning of ‘def-or-class’ if successful, nil otherwise" t nil)

(autoload 'py-forward-class "python-mode" "\
Go to end of class.

Return end of ‘class’ if successful, nil otherwise
Optional ORIG: start position
Optional BOL: go to beginning of line following end-position

\(fn &optional ORIG BOL)" t nil)

(autoload 'py-forward-def "python-mode" "\
Go to end of def.

Return end of ‘def’ if successful, nil otherwise
Optional ORIG: start position
Optional BOL: go to beginning of line following end-position

\(fn &optional ORIG BOL)" t nil)

(autoload 'py-forward-def-or-class "python-mode" "\
Go to end of def-or-class.

Return end of ‘def-or-class’ if successful, nil otherwise
Optional ORIG: start position
Optional BOL: go to beginning of line following end-position

\(fn &optional ORIG BOL)" t nil)

(autoload 'py-auto-completion-mode "python-mode" "\
Run auto-completion

\(fn)" t nil)

(autoload 'python-mode "python-mode" "\
Major mode for editing Python files.

To submit a report, enter `\\[py-submit-bug-report]'
from a`python-mode' buffer.
Do `\\[py-describe-mode]' for detailed documentation.
To see what version of `python-mode' you are running,
enter `\\[py-version]'.

This mode knows about Python indentation,
tokens, comments (and continuation lines.
Paragraphs are separated by blank lines only.

COMMANDS

`py-shell'	Start an interactive Python interpreter in another window
`py-execute-statement'	Send statement at point to Python default interpreter
`py-backward-statement'	Go to the initial line of a simple statement

etc.

See available commands listed in files commands-python-mode at directory doc

VARIABLES

`py-indent-offset'	indentation increment
`py-shell-name'		shell command to invoke Python interpreter
`py-split-window-on-execute'		When non-nil split windows
`py-switch-buffers-on-execute-p'	When non-nil switch to the Python output buffer

\\{python-mode-map}

\(fn)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "python-mode" '("all-mode-setting" "autopair-mode" "flake8" "force-py-shell-name-p-o" "highlight-indent-active" "hs-hide-comments-when-hiding-all" "info-lookup-mode" "ipython" "iypthon" "jython" "pdb-track-stack-from-shell-p" "pep8" "pst-here" "stri" "toggle-force-py-shell-name-p" "turn-o" "virtualenv-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/deferred-20170901.1330/deferred-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/deferred-20170901.1330/deferred-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/deferred-20170901.1330/deferred-autoloads.el") (car load-path))))



)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/python-environment-20150310.853/python-environment-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/python-environment-20150310.853/python-environment-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/python-environment-20150310.853/python-environment-autoloads.el") (car load-path))))



)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/pyimpsort-20160130.453/pyimpsort-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/pyimpsort-20160130.453/pyimpsort-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/pyimpsort-20160130.453/pyimpsort-autoloads.el") (car load-path))))


(autoload 'pyimpsort-region "pyimpsort" "\
Sort python imports from region BEGIN to END points.

\(fn BEGIN END)" t nil)

(autoload 'pyimpsort-buffer "pyimpsort" "\
Sort python imports from current buffer.

\(fn)" t nil)




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/pyenv-mode-20200518.1521/pyenv-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/pyenv-mode-20200518.1521/pyenv-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/pyenv-mode-20200518.1521/pyenv-mode-autoloads.el") (car load-path))))



(autoload 'pyenv-mode-set "pyenv-mode" "\
Set python shell VERSION.

\(fn VERSION)" t nil)

(autoload 'pyenv-mode-unset "pyenv-mode" "\
Unset python shell version." t nil)

(defvar pyenv-mode nil "\
Non-nil if Pyenv mode is enabled.
See the `pyenv-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyenv-mode'.")

(custom-autoload 'pyenv-mode "pyenv-mode" nil)

(autoload 'pyenv-mode "pyenv-mode" "\
Minor mode for pyenv interaction.

If called interactively, enable Pyenv mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\\{pyenv-mode-map}

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pyenv-mode" '("pyenv-mode-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/puppet-mode-20210305.645/puppet-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/puppet-mode-20210305.645/puppet-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/puppet-mode-20210305.645/puppet-mode-autoloads.el") (car load-path))))



(autoload 'puppet-mode "puppet-mode" "\


\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.pp\\'" . puppet-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "puppet-mode" '("puppet-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/php-runtime-20181212.1825/php-runtime-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/php-runtime-20181212.1825/php-runtime-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/php-runtime-20181212.1825/php-runtime-autoloads.el") (car load-path))))



(eieio-defclass-autoload 'php-runtime-execute 'nil "php-runtime" nil)

(autoload 'php-runtime-expr "php-runtime" "\
Evalute and echo PHP expression `PHP-EXPR'.

Pass `INPUT-BUFFER' to PHP executable as STDIN.

\(fn PHP-EXPR &optional INPUT-BUFFER)" nil nil)

(autoload 'php-runtime-eval "php-runtime" "\
Evalute PHP code `CODE' without open tag, and return buffer.

Pass `INPUT-BUFFER' to PHP executable as STDIN.

\(fn CODE &optional INPUT-BUFFER)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-runtime" '("php-runtime-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/psysh-20190709.106/psysh-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/psysh-20190709.106/psysh-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/psysh-20190709.106/psysh-autoloads.el") (car load-path))))



(autoload 'psysh-doc-buffer "psysh" "\
Execute PsySH Doc `TARGET' and Return PsySH buffer `BUF'.

\(fn TARGET &optional BUF)" nil nil)

(autoload 'psysh-doc-mode "psysh" "\
Major mode for viewing PsySH Doc.

\(fn)" t nil)

(autoload 'psysh-doc-string "psysh" "\
Return string of PsySH Doc `TARGET'.

\(fn TARGET)" nil nil)

(autoload 'psysh-doc "psysh" "\
Display PsySH doc `TARGET'.

\(fn TARGET)" t nil)

(autoload 'psysh "psysh" "\
Run PsySH interactive shell.

\(fn)" t nil)

(autoload 'psysh-run "psysh" "\
Run PsySH interactive-shell in `BUFFER-NAME' and `PROCESS'.

\(fn BUFFER-NAME PROCESS)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "psysh" '("psysh-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/project-shells-20210625.647/project-shells-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/project-shells-20210625.647/project-shells-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/project-shells-20210625.647/project-shells-autoloads.el") (car load-path))))



(autoload 'project-shells-activate-for-key "project-shells" "\
Create or switch to the shell buffer for the key, the project
name, and the project root directory.

\(fn KEY &optional PROJ PROJ-ROOT)" nil nil)

(autoload 'project-shells-activate "project-shells" "\
Create or switch to the shell buffer for the key just typed

\(fn P)" t nil)

(autoload 'project-shells-setup "project-shells" "\
Configure the project shells with the prefix keymap and the
setup, for format of setup, please refer to document of
project-shells-setup.

\(fn MAP &optional SETUP)" nil nil)

(autoload 'project-shells-mode "project-shells" "\
Toggle Project-Shells mode on or off.

If called interactively, enable Project-Shells mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\\{project-shells-mode-map}

\(fn &optional ARG)" t nil)

(put 'global-project-shells-mode 'globalized-minor-mode t)

(defvar global-project-shells-mode nil "\
Non-nil if Global Project-Shells mode is enabled.
See the `global-project-shells-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-project-shells-mode'.")

(custom-autoload 'global-project-shells-mode "project-shells" nil)

(autoload 'global-project-shells-mode "project-shells" "\
Toggle Project-Shells mode in all buffers.
With prefix ARG, enable Global Project-Shells mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Project-Shells mode is enabled in all buffers where
`project-shells-mode' would do it.
See `project-shells-mode' for more information on Project-Shells mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "project-shells" '("project-shells-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/prog-fill-20180607.132/prog-fill-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/prog-fill-20180607.132/prog-fill-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/prog-fill-20180607.132/prog-fill-autoloads.el") (car load-path))))


(autoload 'prog-fill "prog-fill" "\
Either use the custom fill, or standard fill if in a comment region.

\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/pretty-hydra-20210221.834/pretty-hydra-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/pretty-hydra-20210221.834/pretty-hydra-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/pretty-hydra-20210221.834/pretty-hydra-autoloads.el") (car load-path))))



(autoload 'pretty-hydra-define "pretty-hydra" "\
Define a pretty hydra with given NAME, BODY options and HEADS-PLIST.
The generated hydra has a nice-looking docstring which is a table
with columns of command keys and hints.

NAME should be a symbol and is passed to `defhydra' as is.

BODY is the same as that in `defhydra', withe the following
pretty hydra specific ones:

  - `:separator' a single char used to generate the separator
    line.

  - `:title' a string that's added to the beginning of the
    docstring as a title of the hydra.

  - `:formatter' a function that takes the generated docstring
    and return a decorated one.  It can be used to further
    customize the hydra docstring.

  - `:quit-key' a key of list of keys for quitting the hydra.
    When specified, invisible head(s) are created with the
    specified keys for quitting the hydra.

HEADS-PLIST is a plist of columns of hydra heads.  The keys of
the plist should be column names.  The values should be lists of
hydra heads.  Each head has exactly the same syntax as that of
`defhydra', except hint is required for the head to appear in the
docstring.  The following additional options are supported:

  - `:width' the max width of a dynamic hint, used to calculate
    the final width of the entire column.  It is ignored when the
    hint is a string.

  - `:toggle' when specified, it makes the head a toggle and adds
    an indicator to the end of the hint for the status of the
    toggle.  The value of this option can be a symbol, an s-exp
    or t.  The toggle status is read from the given variable, by
    evaluating the given expression or checking the `cmd' as if
    it's a variable.  The latter is especially useful for minior
    modes, e.g.

       (\"n\" `linum-mode' \"line number\" :toggle t)

\(fn NAME BODY HEADS-PLIST)" nil t)

(function-put 'pretty-hydra-define 'lisp-indent-function 'defun)

(autoload 'pretty-hydra-define+ "pretty-hydra" "\
Redefine an existing pretty-hydra by adding new HEADS-PLIST.
If heads are added to a column already in NAME, the heads are
appended to that column.  Existing BODY is replaced with the new
one if specified.  Arguments are the same as `pretty-hydra-define'.

\(fn NAME BODY HEADS-PLIST)" nil t)

(function-put 'pretty-hydra-define+ 'lisp-indent-function 'defun)

(autoload 'pretty-hydra-toggle "pretty-hydra" "\
Create a dynamic hint that look like a radio button with given NAME.
Radio is considered on when STATUS is non-nil, otherwise off.

\(fn NAME STATUS)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pretty-hydra" '("pretty-hydra-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/iter2-20211119.1718/iter2-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/iter2-20211119.1718/iter2-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/iter2-20211119.1718/iter2-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "iter2" '("iter2-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/nvm-20210826.1000/nvm-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/nvm-20210826.1000/nvm-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/nvm-20210826.1000/nvm-autoloads.el") (car load-path))))



(autoload 'nvm-use "nvm" "\
Activate Node VERSION.

If CALLBACK is specified, active in that scope and then reset to
previously used version.

\(fn VERSION &optional CALLBACK)" nil nil)

(autoload 'nvm-use-for "nvm" "\
Activate Node for PATH or `default-directory'.

This function will look for a .nvmrc file in that path and
activate the version specified in that file.

If CALLBACK is specified, active in that scope and then reset to
previously used version.

\(fn &optional PATH CALLBACK)" nil nil)

(autoload 'nvm-use-for-buffer "nvm" "\
Activate Node based on an .nvmrc for the current file.
If buffer is not visiting a file, do nothing." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nvm" '("nvm-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/prettier-20211018.955/prettier-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/prettier-20211018.955/prettier-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/prettier-20211018.955/prettier-autoloads.el") (car load-path))))



(put 'prettier-mode-sync-config-flag 'safe-local-variable 'booleanp)

(put 'prettier-editorconfig-flag 'safe-local-variable 'booleanp)

(put 'prettier-infer-parser-flag 'safe-local-variable 'booleanp)

(put 'prettier-parsers 'safe-local-variable 'listp)

(autoload 'prettier-prettify "prettier" "\
Prettify the whole current buffer, or the part it is narrowed to.

With prefix, ask for the parser to use" t nil)

(autoload 'prettier-prettify-region "prettier" "\
Prettify the current region.

With prefix, ask for the parser to use" t nil)

(autoload 'prettier-mode "prettier" "\
Runs prettier on file save when this mode is turned on

If called interactively, enable Prettier mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'global-prettier-mode 'globalized-minor-mode t)

(defvar global-prettier-mode nil "\
Non-nil if Global Prettier mode is enabled.
See the `global-prettier-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-prettier-mode'.")

(custom-autoload 'global-prettier-mode "prettier" nil)

(autoload 'global-prettier-mode "prettier" "\
Toggle Prettier mode in all buffers.
With prefix ARG, enable Global Prettier mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Prettier mode is enabled in all buffers where
`(lambda nil (when (and (not prettier-mode) (or (null prettier-mode-ignore-buffer-function) (not (funcall prettier-mode-ignore-buffer-function))) (prettier--parsers)) (with-temp-message (unless (eq prettier-pre-warm 'none) Prettier pre-warming...) (prettier-mode))))' would do it.
See `prettier-mode' for more information on Prettier mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "prettier" '("prettier-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/pos-tip-20191227.1356/pos-tip-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/pos-tip-20191227.1356/pos-tip-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/pos-tip-20191227.1356/pos-tip-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pos-tip" '("pos-tip-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/popwin-20210215.1849/popwin-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/popwin-20210215.1849/popwin-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/popwin-20210215.1849/popwin-autoloads.el") (car load-path))))



(autoload 'popwin:popup-buffer "popwin" "\
Show BUFFER in a popup window and return the popup window. If
NOSELECT is non-nil, the popup window will not be selected. If
STICK is non-nil, the popup window will be stuck. If TAIL is
non-nil, the popup window will show the last contents. Calling
`popwin:popup-buffer' during `popwin:popup-buffer' is allowed. In
that case, the buffer of the popup window will be replaced with
BUFFER.

\(fn BUFFER &key (WIDTH popwin:popup-window-width) (HEIGHT popwin:popup-window-height) (POSITION popwin:popup-window-position) NOSELECT DEDICATED STICK TAIL)" t nil)

(autoload 'popwin:display-buffer "popwin" "\
Display BUFFER-OR-NAME, if possible, in a popup window, or as usual.
This function can be used as a value of
`display-buffer-function'.

\(fn BUFFER-OR-NAME &optional NOT-THIS-WINDOW)" t nil)

(autoload 'popwin:pop-to-buffer "popwin" "\
Same as `pop-to-buffer' except that this function will use `popwin:display-buffer-1' instead of `display-buffer'.  BUFFER,
OTHER-WINDOW amd NORECORD are the same arguments.

\(fn BUFFER &optional OTHER-WINDOW NORECORD)" t nil)

(autoload 'popwin:universal-display "popwin" "\
Call the following command interactively with letting `popwin:special-display-config' be `popwin:universal-display-config'.
This will be useful when displaying buffers in popup windows temporarily." t nil)

(autoload 'popwin:one-window "popwin" "\
Delete other window than the popup window. C-g restores the original window configuration." t nil)

(autoload 'popwin:popup-buffer-tail "popwin" "\
Same as `popwin:popup-buffer' except that the buffer will be `recenter'ed at the bottom.

\(fn &rest SAME-AS-POPWIN:POPUP-BUFFER)" t nil)

(autoload 'popwin:find-file "popwin" "\
Edit file FILENAME with popup window by `popwin:popup-buffer'.

\(fn FILENAME &optional WILDCARDS)" t nil)

(autoload 'popwin:find-file-tail "popwin" "\
Edit file FILENAME with popup window by `popwin:popup-buffer-tail'.

\(fn FILE &optional WILDCARD)" t nil)

(autoload 'popwin:messages "popwin" "\
Display *Messages* buffer in a popup window." t nil)

(defvar popwin-mode nil "\
Non-nil if Popwin mode is enabled.
See the `popwin-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `popwin-mode'.")

(custom-autoload 'popwin-mode "popwin" nil)

(autoload 'popwin-mode "popwin" "\
Minor mode for `popwin-mode'.

If called interactively, enable Popwin mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "popwin" '("popwin:")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/polymode-20220322.824/polymode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/polymode-20220322.824/polymode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/polymode-20220322.824/polymode-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "poly-lock" '("poly-lock-")))



(autoload 'define-polymode "polymode" "\
Define a new polymode MODE.
This macro defines command MODE and an indicator variable MODE
which becomes t when MODE is active and nil otherwise.

MODE command can be used as both major and minor mode. Using
polymodes as minor modes makes sense when :hostmode (see below)
is not specified, in which case polymode installs only inner
modes and doesn't touch current major mode.

Standard hook MODE-hook is run at the end of the initialization
of each polymode buffer (both indirect and base buffers).

This macro also defines the MODE-map keymap from the :keymap
argument and PARENT-map (see below) and poly-[MODE-NAME]-polymode
variable which holds an object of class `pm-polymode' which holds
the entire configuration for this polymode.

PARENT is either the polymode configuration object or a polymode
mode (there is 1-to-1 correspondence between config
objects (`pm-polymode') and mode functions). The new polymode
MODE inherits alll the behavior from PARENT except for the
overwrites specified by the keywords (see below). The new MODE
runs all the hooks from the PARENT-mode and inherits its MODE-map
from PARENT-map.

DOC is an optional documentation string. If present PARENT must
be provided, but can be nil.

BODY is executed after the complete initialization of the
polymode but before MODE-hook. It is executed once for each
polymode buffer - host buffer on initialization and every inner
buffer subsequently created.

Before the BODY code keyword arguments (i.e. alternating keywords
and values) are allowed. The following special keywords
controlling the behavior of the new MODE are supported:

:lighter Optional LIGHTER is displayed in the mode line when the
   mode is on. If omitted, it defaults to the :lighter slot of
   CONFIG object.

:keymap If nil, a new MODE-map keymap is created what directly
  inherits from the PARENT's keymap. The last keymap in the
  inheritance chain is always `polymode-minor-mode-map'. If a
  keymap it is used directly as it is. If a list of binding of
  the form (KEY . BINDING) it is merged the bindings are added to
  the newly create keymap.

:after-hook A single form which is evaluated after the mode hooks
  have been run. It should not be quoted.

Other keywords are added to the `pm-polymode' configuration
object and should be valid slots in PARENT config object or the
root config `pm-polymode' object if PARENT is nil. By far the
most frequently used slots are:

:hostmode Symbol pointing to a `pm-host-chunkmode' object
  specifying the behavior of the hostmode. If missing or nil,
  MODE will behave as a minor-mode in the sense that it will
  reuse the currently installed major mode and will install only
  the inner modes.

:innermodes List of symbols pointing to `pm-inner-chunkmode'
  objects which specify the behavior of inner modes (or submodes).

\(fn MODE &optional PARENT DOC &rest BODY)" nil t)

(function-put 'define-polymode 'lisp-indent-function 'defun)

(function-put 'define-polymode 'doc-string-elt '3)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "polymode" '("pm-" "poly")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "polymode-base" '("poly-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "polymode-classes" '("pm-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "polymode-compat" '("*span*" "pm-" "polymode-")))



(defvar-local polymode-default-inner-mode nil "\
Inner mode for chunks with unspecified modes.
Intended to be used as local variable in polymode buffers. A
special value 'host means use the host mode.")

(put 'polymode-default-inner-mode 'safe-local-variable 'symbolp)

(autoload 'define-hostmode "polymode-core" "\
Define a hostmode with name NAME.
Optional PARENT is a name of a hostmode to be derived (cloned)
from. If missing, the optional documentation string DOC is
generated automatically. KEY-ARGS is a list of key-value pairs.
See the documentation of the class `pm-host-chunkmode' for
possible values.

\(fn NAME &optional PARENT DOC &rest KEY-ARGS)" nil t)

(function-put 'define-hostmode 'doc-string-elt '3)

(function-put 'define-hostmode 'lisp-indent-function 'defun)

(autoload 'define-innermode "polymode-core" "\
Ddefine an innermode with name NAME.
Optional PARENT is a name of a innermode to be derived (cloned)
from. If missing the optional documentation string DOC is
generated automatically. KEY-ARGS is a list of key-value pairs.
See the documentation of the class `pm-inner-chunkmode' for
possible values.

\(fn NAME &optional PARENT DOC &rest KEY-ARGS)" nil t)

(function-put 'define-innermode 'doc-string-elt '3)

(function-put 'define-innermode 'lisp-indent-function 'defun)

(autoload 'define-auto-innermode "polymode-core" "\
Ddefine an auto innermode with name NAME.
Optional PARENT is a name of an auto innermode to be
derived (cloned) from. If missing the optional documentation
string DOC is generated automatically. KEY-ARGS is a list of
key-value pairs. See the documentation of the class
`pm-inner-auto-chunkmode' for possible values.

\(fn NAME &optional PARENT DOC &rest KEY-ARGS)" nil t)

(function-put 'define-auto-innermode 'doc-string-elt '3)

(function-put 'define-auto-innermode 'lisp-indent-function 'defun)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "polymode-core" '("*span*" "polymode-")))



(autoload 'pm-debug-minor-mode "polymode-debug" "\
Turns on/off useful facilities for debugging polymode.

If called interactively, enable Pm-Debug minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Key bindings:
\\{pm-debug-minor-mode-map}

\(fn &optional ARG)" t nil)

(autoload 'pm-debug-minor-mode-on "polymode-debug" nil nil nil)

(put 'pm-debug-mode 'globalized-minor-mode t)

(defvar pm-debug-mode nil "\
Non-nil if Pm-Debug mode is enabled.
See the `pm-debug-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pm-debug-mode'.")

(custom-autoload 'pm-debug-mode "polymode-debug" nil)

(autoload 'pm-debug-mode "polymode-debug" "\
Toggle Pm-Debug minor mode in all buffers.
With prefix ARG, enable Pm-Debug mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Pm-Debug minor mode is enabled in all buffers where
`pm-debug-minor-mode-on' would do it.
See `pm-debug-minor-mode' for more information on Pm-Debug minor mode.

\(fn &optional ARG)" t nil)

(autoload 'pm-toggle-tracing "polymode-debug" "\
Toggle polymode tracing.
With numeric prefix toggle tracing for that LEVEL. Currently
universal argument toggles maximum level of tracing (15). See
`pm-traced-functions'. Default level is 4.

\(fn LEVEL)" t nil)

(autoload 'pm-trace "polymode-debug" "\
Trace function FN.
Use `untrace-function' to untrace or `untrace-all' to untrace all
currently traced functions.

\(fn FN)" t nil)

(autoload 'pm-debug-relevant-variables "polymode-debug" "\
Get the relevant polymode variables.
If OUT-TYPE is 'buffer, print the variables in the dedicated
buffer, if 'message issue a message, if nil just return a list of values.

\(fn &optional OUT-TYPE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "polymode-debug" '("pm-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "polymode-export" '("pm-" "poly")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "polymode-methods" '("pm-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "polymode-test-utils" '("pm-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "polymode-weave" '("pm-" "polymode-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/ansible-20220114.45/ansible-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/ansible-20220114.45/ansible-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/ansible-20220114.45/ansible-autoloads.el") (car load-path))))



(defvar ansible-key-map (make-sparse-keymap) "\
Keymap for Ansible.")

(autoload 'ansible "ansible" "\
Ansible minor mode.

If called interactively, enable Ansible mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'ansible-dict-initialize "ansible" "\
Initialize Ansible auto-complete." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ansible" '("ansible-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/ansible-doc-20160924.824/ansible-doc-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/ansible-doc-20160924.824/ansible-doc-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/ansible-doc-20160924.824/ansible-doc-autoloads.el") (car load-path))))



(autoload 'ansible-doc "ansible-doc" "\
Show ansible documentation for MODULE.

\(fn MODULE)" t nil)

(autoload 'ansible-doc-mode "ansible-doc" "\
Minor mode for Ansible documentation.

When called interactively, toggle `ansible-doc-mode'.  With
prefix ARG, enable `ansible-doc-mode' if ARG is positive,
otherwise disable it.

When called from Lisp, enable `ansible-doc-mode' if ARG is
omitted, nil or positive.  If ARG is `toggle', toggle
`ansible-doc-mode'.  Otherwise behave as if called interactively.

In `ansible-doc-mode' provide the following keybindings for
Ansible documentation lookup:

\\{ansible-doc-mode-map}

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ansible-doc" '("ansible-doc-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/jinja2-mode-20220117.807/jinja2-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/jinja2-mode-20220117.807/jinja2-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/jinja2-mode-20220117.807/jinja2-mode-autoloads.el") (car load-path))))



(autoload 'jinja2-mode "jinja2-mode" "\
Major mode for editing jinja2 files

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.jinja2\\'" . jinja2-mode))

(add-to-list 'auto-mode-alist '("\\.j2\\'" . jinja2-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "jinja2-mode" '("jinja2-" "sgml-indent-line-num")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/poly-ansible-20220113.1656/poly-ansible-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/poly-ansible-20220113.1656/poly-ansible-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/poly-ansible-20220113.1656/poly-ansible-autoloads.el") (car load-path))))


 (autoload 'poly-ansible-mode "poly-ansible")

(add-to-list 'auto-mode-alist '("/ansible/.*\\.ya?ml\\'" . poly-ansible-mode))

(add-to-list 'auto-mode-alist '("/\\(?:group\\|host\\)_vars/" . poly-ansible-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "poly-ansible" '("jinja2-ansible-functions-keywords" "pm-inner/jinja2" "poly-ansible-mode")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "poly-ansible-jinja2-filters" '("poly-ansible-jinja2-filters")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/pip-requirements-20181027.1629/pip-requirements-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/pip-requirements-20181027.1629/pip-requirements-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/pip-requirements-20181027.1629/pip-requirements-autoloads.el") (car load-path))))


(add-to-list 'auto-mode-alist `(,(rx ".pip" string-end) . pip-requirements-mode))

(add-to-list 'auto-mode-alist `(,(rx "requirements" (zero-or-more anything) ".txt" string-end) . pip-requirements-mode))

(add-to-list 'auto-mode-alist `(,(rx "requirements.in") . pip-requirements-mode))

(autoload 'pip-requirements-auto-complete-setup "pip-requirements" "\
Setup Auto-Complete for Pip Requirements.

See URL `https://github.com/auto-complete/auto-complete' for
information about Auto Complete.

\(fn)" nil nil)

(autoload 'pip-requirements-mode "pip-requirements" "\
Major mode for editing pip requirements files.

\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/php-mode-20220120.1959/php-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/php-mode-20220120.1959/php-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/php-mode-20220120.1959/php-mode-autoloads.el") (car load-path))))



(let ((loads (get 'php 'custom-loads))) (if (member '"php" loads) nil (put 'php 'custom-loads (cons '"php" loads))))

(autoload 'php-mode-maybe "php" "\
Select PHP mode or other major mode." t nil)

(autoload 'php-current-class "php" "\
Insert current class name if cursor in class context." t nil)

(autoload 'php-current-namespace "php" "\
Insert current namespace if cursor in namespace context." t nil)

(autoload 'php-copyit-fqsen "php" "\
Copy/kill class/method FQSEN." t nil)

(autoload 'php-run-builtin-web-server "php" "\
Run PHP Built-in web server.

`ROUTER-OR-DIR': Path to router PHP script or Document root.
`HOSTNAME': Hostname or IP address of Built-in web server.
`PORT': Port number of Built-in web server.
`DOCUMENT-ROOT': Path to Document root.

When `DOCUMENT-ROOT' is NIL, the document root is obtained from `ROUTER-OR-DIR'.

\(fn ROUTER-OR-DIR HOSTNAME PORT &optional DOCUMENT-ROOT)" t nil)

(autoload 'php-find-system-php-ini-file "php" "\
Find php.ini FILE by `php --ini'.

\(fn &optional FILE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php" '("php-")))



(autoload 'php-align-setup "php-align" "\
Setup alignment configuration for PHP code." nil nil)

(autoload 'php-align-mode "php-align" "\
Alignment lines for PHP script.

If called interactively, enable Php-Align mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-align" '("php-align-")))



(let ((loads (get 'php-faces 'custom-loads))) (if (member '"php-face" loads) nil (put 'php-faces 'custom-loads (cons '"php-face" loads))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-face" '("php-annotations-annotation-face")))



(autoload 'php-local-manual-search "php-local-manual" "\
Search the local PHP documentation (i.e. in `php-manual-path') for
the word at point.  The function returns t if the requested documentation
exists, and nil otherwise.

With a prefix argument, prompt (with completion) for a word to search for.

\(fn WORD)" t nil)

(define-obsolete-function-alias 'php-search-local-documentation #'php-local-manual-search "2.0.0")

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-local-manual" '("php-local-manual-")))



(let ((loads (get 'php-mode 'custom-loads))) (if (member '"php-mode" loads) nil (put 'php-mode 'custom-loads (cons '"php-mode" loads))))

(add-to-list 'interpreter-mode-alist (cons "php\\(?:-?[34578]\\(?:\\.[0-9]+\\)*\\)?" 'php-mode))

(define-obsolete-variable-alias 'php-available-project-root-files 'php-project-available-root-files "1.19.0")

(autoload 'php-mode "php-mode" "\
Major mode for editing PHP code.

\\{php-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("/\\.php_cs\\(?:\\.dist\\)?\\'" . php-mode))

(add-to-list 'auto-mode-alist '("\\.\\(?:php\\.inc\\|stub\\)\\'" . php-mode))

(add-to-list 'auto-mode-alist '("\\.\\(?:php[s345]?\\|phtml\\)\\'" . php-mode-maybe))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-mode" '("php-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-mode-debug" '("php-mode-debug")))



(defvar-local php-project-root 'auto "\
Method of searching for the top level directory.

`auto' (default)
      Try to search file in order of `php-project-available-root-files'.

SYMBOL
      Key of `php-project-available-root-files'.

STRING
      A file/directory name of top level marker.
      If the string is an actual directory path, it is set as the absolute path
      of the root directory, not the marker.")

(put 'php-project-root 'safe-local-variable #'(lambda (v) (or (stringp v) (assq v php-project-available-root-files))))

(defvar-local php-project-etags-file nil)

(put 'php-project-etags-file 'safe-local-variable #'(lambda (v) (or (functionp v) (eq v t) (php-project--eval-bootstrap-scripts v))))

(defvar-local php-project-bootstrap-scripts nil "\
List of path to bootstrap php script file.

The ideal bootstrap file is silent, it only includes dependent files,
defines constants, and sets the class loaders.")

(put 'php-project-bootstrap-scripts 'safe-local-variable #'php-project--eval-bootstrap-scripts)

(defvar-local php-project-php-executable nil "\
Path to php executable file.")

(put 'php-project-php-executable 'safe-local-variable #'(lambda (v) (and (stringp v) (file-executable-p v))))

(defvar-local php-project-phan-executable nil "\
Path to phan executable file.")

(put 'php-project-phan-executable 'safe-local-variable #'php-project--eval-bootstrap-scripts)

(defvar-local php-project-coding-style nil "\
Symbol value of the coding style of the project that PHP major mode refers to.

Typically it is `pear', `drupal', `wordpress', `symfony2' and `psr2'.")

(put 'php-project-coding-style 'safe-local-variable #'symbolp)

(defvar-local php-project-align-lines t "\
If T, automatically turn on `php-align-mode' by `php-align-setup'.")

(put 'php-project-align-lines 'safe-local-variable #'booleanp)

(defvar-local php-project-php-file-as-template 'auto "\

`auto' (default)
      Automatically switch to mode for template when HTML tag detected in file.

`t'
      Switch all PHP files in that directory to mode for HTML template.

`nil'
      Any .php  in that directory is just a PHP script.

\((PATTERN . SYMBOL))
      Alist of file name pattern regular expressions and the above symbol pairs.
      PATTERN is regexp pattern.
")

(put 'php-project-php-file-as-template 'safe-local-variable #'php-project--validate-php-file-as-template)

(defvar-local php-project-repl nil "\
Function name or path to REPL (interactive shell) script.")

(put 'php-project-repl 'safe-local-variable #'(lambda (v) (or (functionp v) (php-project--eval-bootstrap-scripts v))))

(defvar-local php-project-unit-test nil "\
Function name or path to unit test script.")

(put 'php-project-unit-test 'safe-local-variable #'(lambda (v) (or (functionp v) (php-project--eval-bootstrap-scripts v))))

(defvar-local php-project-deploy nil "\
Function name or path to deploy script.")

(put 'php-project-deploy 'safe-local-variable #'(lambda (v) (or (functionp v) (php-project--eval-bootstrap-scripts v))))

(defvar-local php-project-build nil "\
Function name or path to build script.")

(put 'php-project-build 'safe-local-variable #'(lambda (v) (or (functionp v) (php-project--eval-bootstrap-scripts v))))

(defvar-local php-project-server-start nil "\
Function name or path to server-start script.")

(put 'php-project-server-start 'safe-local-variable #'(lambda (v) (or (functionp v) (php-project--eval-bootstrap-scripts v))))

(autoload 'php-project-get-bootstrap-scripts "php-project" "\
Return list of bootstrap script." nil nil)

(autoload 'php-project-get-root-dir "php-project" "\
Return path to current PHP project." nil nil)

(autoload 'php-project-project-find-function "php-project" "\
Return path to current PHP project from DIR.

This function is compatible with `project-find-functions'.

\(fn DIR)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "php-project" '("php-project-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/phpstan-20210714.1805/phpstan-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/phpstan-20210714.1805/phpstan-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/phpstan-20210714.1805/phpstan-autoloads.el") (car load-path))))



(defvar phpstan-working-dir nil "\
Path to working directory of PHPStan.

*NOTICE*: This is different from the project root.

STRING
     Absolute path to `phpstan' working directory.

`(root . STRING)'
     Relative path to `phpstan' working directory from project root directory.

NIL
     Use (php-project-get-root-dir) as working directory.")

(make-variable-buffer-local 'phpstan-working-dir)

(put 'phpstan-working-dir 'safe-local-variable #'(lambda (v) (if (consp v) (and (eq 'root (car v)) (stringp (cdr v))) (null v) (stringp v))))

(defvar phpstan-config-file nil "\
Path to project specific configuration file of PHPStan.

STRING
     Absolute path to `phpstan' configuration file.

`(root . STRING)'
     Relative path to `phpstan' configuration file from project root directory.

NIL
     Search phpstan.neon(.dist) in (phpstan-get-working-dir).")

(make-variable-buffer-local 'phpstan-config-file)

(put 'phpstan-config-file 'safe-local-variable #'(lambda (v) (if (consp v) (and (eq 'root (car v)) (stringp (cdr v))) (null v) (stringp v))))

(defvar-local phpstan-autoload-file nil "\
Path to autoload file for PHPStan.

STRING
     Path to `phpstan' autoload file.

`(root . STRING)'
     Relative path to `phpstan' configuration file from project root directory.

NIL
     If `phpstan-enable-on-no-config-file', search \"vendor/autoload.php\" in (phpstan-get-working-dir).")

(put 'phpstan-autoload-file 'safe-local-variable #'(lambda (v) (if (consp v) (and (eq 'root (car v)) (stringp (cdr v))) (null v) (stringp v))))

(defvar-local phpstan-level nil "\
Rule level of PHPStan.

INTEGER or STRING
     Number of PHPStan rule level.

max
     The highest of PHPStan rule level.

NIL
     Use rule level specified in `phpstan' configuration file.")

(put 'phpstan-level 'safe-local-variable #'(lambda (v) (or (null v) (integerp v) (eq 'max v) (and (stringp v) (string= "max" v) (string-match-p "\\`[0-9]\\'" v)))))

(defvar phpstan-replace-path-prefix)

(make-variable-buffer-local 'phpstan-replace-path-prefix)

(put 'phpstan-replace-path-prefix 'safe-local-variable #'(lambda (v) (or (null v) (stringp v))))

(defvar phpstan-executable nil "\
PHPStan excutable file.

STRING
     Absolute path to `phpstan' executable file.

`docker'
     Use Docker using phpstan/docker-image.

`(root . STRING)'
     Relative path to `phpstan' executable file.

`(STRING . (ARGUMENTS ...))'
     Command name and arguments.

NIL
     Auto detect `phpstan' executable file.")

(make-variable-buffer-local 'phpstan-executable)

(put 'phpstan-executable 'safe-local-variable #'(lambda (v) (if (consp v) (or (and (eq 'root (car v)) (stringp (cdr v))) (and (stringp (car v)) (listp (cdr v)))) (or (eq 'docker v) (null v) (stringp v)))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "phpstan" '("phpstan-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/pdf-tools-20220214.344/pdf-tools-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/pdf-tools-20220214.344/pdf-tools-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/pdf-tools-20220214.344/pdf-tools-autoloads.el") (car load-path))))



(autoload 'pdf-annot-minor-mode "pdf-annot" "\
Support for PDF Annotations.

If called interactively, enable Pdf-Annot minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\\{pdf-annot-minor-mode-map}

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-annot" '("pdf-annot-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-cache" '("boundingbox" "define-pdf-cache-function" "page" "pdf-cache-" "textregions")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-dev" '("pdf-dev-")))



(autoload 'pdf-history-minor-mode "pdf-history" "\
Keep a history of previously visited pages.

If called interactively, enable Pdf-History minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

This is a simple stack-based history.  Turning the page or
following a link pushes the left-behind page on the stack, which
may be navigated with the following keys.

\\{pdf-history-minor-mode-map}

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-history" '("pdf-history-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-info" '("pdf-info-")))



(autoload 'pdf-isearch-minor-mode "pdf-isearch" "\
Isearch mode for PDF buffer.

If called interactively, enable Pdf-Isearch minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When this mode is enabled \\[isearch-forward], among other keys,
starts an incremental search in this PDF document.  Since this mode
uses external programs to highlight found matches via
image-processing, proceeding to the next match may be slow.

Therefore two isearch behaviours have been defined: Normal isearch and
batch mode.  The later one is a minor mode
\(`pdf-isearch-batch-mode'), which when activated inhibits isearch
from stopping at and highlighting every single match, but rather
display them batch-wise.  Here a batch means a number of matches
currently visible in the selected window.

The kind of highlighting is determined by three faces
`pdf-isearch-match' (for the current match), `pdf-isearch-lazy'
\(for all other matches) and `pdf-isearch-batch' (when in batch
mode), which see.

Colors may also be influenced by the minor-mode
`pdf-view-dark-minor-mode'.  If this is minor mode enabled, each face's
dark colors, are used (see e.g. `frame-background-mode'), instead
of the light ones.

\\{pdf-isearch-minor-mode-map}
While in `isearch-mode' the following keys are available. Note
that not every isearch command work as expected.

\\{pdf-isearch-active-mode-map}

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-isearch" '("pdf-isearch-")))



(autoload 'pdf-links-minor-mode "pdf-links" "\
Handle links in PDF documents.\\<pdf-links-minor-mode-map>

If called interactively, enable Pdf-Links minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

If this mode is enabled, most links in the document may be
activated by clicking on them or by pressing \\[pdf-links-action-perform] and selecting
one of the displayed keys, or by using isearch limited to
links via \\[pdf-links-isearch-link].

\\{pdf-links-minor-mode-map}

\(fn &optional ARG)" t nil)

(autoload 'pdf-links-action-perform "pdf-links" "\
Follow LINK, depending on its type.

This may turn to another page, switch to another PDF buffer or
invoke `pdf-links-browse-uri-function'.

Interactively, link is read via `pdf-links-read-link-action'.
This function displays characters around the links in the current
page and starts reading characters (ignoring case).  After a
sufficient number of characters have been read, the corresponding
link's link is invoked.  Additionally, SPC may be used to
scroll the current page.

\(fn LINK)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-links" '("pdf-links-")))



(autoload 'pdf-loader-install "pdf-loader" "\
Prepare Emacs for using PDF Tools.

This function acts as a replacement for `pdf-tools-install' and
makes Emacs load and use PDF Tools as soon as a PDF file is
opened, but not sooner.

The arguments are passed verbatim to `pdf-tools-install', which
see.

\(fn &optional NO-QUERY-P SKIP-DEPENDENCIES-P NO-ERROR-P FORCE-DEPENDENCIES-P)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-loader" '("pdf-loader--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-macs" '("pdf-view-")))



(autoload 'pdf-misc-minor-mode "pdf-misc" "\
FIXME:  Not documented.

If called interactively, enable Pdf-Misc minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'pdf-misc-size-indication-minor-mode "pdf-misc" "\
Provide a working size indication in the mode-line.

If called interactively, enable Pdf-Misc-Size-Indication minor
mode if ARG is positive, and disable it if ARG is zero or
negative.  If called from Lisp, also enable the mode if ARG is
omitted or nil, and toggle it if ARG is `toggle'; disable the
mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'pdf-misc-menu-bar-minor-mode "pdf-misc" "\
Display a PDF Tools menu in the menu-bar.

If called interactively, enable Pdf-Misc-Menu-Bar minor mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'pdf-misc-context-menu-minor-mode "pdf-misc" "\
Provide a right-click context menu in PDF buffers.

If called interactively, enable Pdf-Misc-Context-Menu minor mode
if ARG is positive, and disable it if ARG is zero or negative.
If called from Lisp, also enable the mode if ARG is omitted or
nil, and toggle it if ARG is `toggle'; disable the mode
otherwise.

\\{pdf-misc-context-menu-minor-mode-map}

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-misc" '("pdf-misc-")))



(autoload 'pdf-occur "pdf-occur" "\
List lines matching STRING or PCRE.

Interactively search for a regexp. Unless a prefix arg was given,
in which case this functions performs a string search.

If `pdf-occur-prefer-string-search' is non-nil, the meaning of
the prefix-arg is inverted.

\(fn STRING &optional REGEXP-P)" t nil)

(autoload 'pdf-occur-multi-command "pdf-occur" "\
Perform `pdf-occur' on multiple buffer.

For a programmatic search of multiple documents see
`pdf-occur-search'." t nil)

(defvar pdf-occur-global-minor-mode nil "\
Non-nil if Pdf-Occur-Global minor mode is enabled.
See the `pdf-occur-global-minor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pdf-occur-global-minor-mode'.")

(custom-autoload 'pdf-occur-global-minor-mode "pdf-occur" nil)

(autoload 'pdf-occur-global-minor-mode "pdf-occur" "\
Enable integration of Pdf Occur with other modes.

If called interactively, enable Pdf-Occur-Global minor mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

This global minor mode enables (or disables)
`pdf-occur-ibuffer-minor-mode' and `pdf-occur-dired-minor-mode'
in all current and future ibuffer/dired buffer.

\(fn &optional ARG)" t nil)

(autoload 'pdf-occur-ibuffer-minor-mode "pdf-occur" "\
Hack into ibuffer's do-occur binding.

If called interactively, enable Pdf-Occur-Ibuffer minor mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

This mode remaps `ibuffer-do-occur' to
`pdf-occur-ibuffer-do-occur', which will start the PDF Tools
version of `occur', if all marked buffer's are in `pdf-view-mode'
and otherwise fallback to `ibuffer-do-occur'.

\(fn &optional ARG)" t nil)

(autoload 'pdf-occur-dired-minor-mode "pdf-occur" "\
Hack into dired's `dired-do-search' binding.

If called interactively, enable Pdf-Occur-Dired minor mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

This mode remaps `dired-do-search' to
`pdf-occur-dired-do-search', which will start the PDF Tools
version of `occur', if all marked buffer's are in `pdf-view-mode'
and otherwise fallback to `dired-do-search'.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-occur" '("pdf-occur-")))



(autoload 'pdf-outline-minor-mode "pdf-outline" "\
Display an outline of a PDF document.

If called interactively, enable Pdf-Outline minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

This provides a PDF's outline on the menu bar via imenu.
Additionally the same outline may be viewed in a designated
buffer.

\\{pdf-outline-minor-mode-map}

\(fn &optional ARG)" t nil)

(autoload 'pdf-outline "pdf-outline" "\
Display an PDF outline of BUFFER.

BUFFER defaults to the current buffer.  Select the outline
buffer, unless NO-SELECT-WINDOW-P is non-nil.

\(fn &optional BUFFER NO-SELECT-WINDOW-P)" t nil)

(autoload 'pdf-outline-imenu-enable "pdf-outline" "\
Enable imenu in the current PDF buffer." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-outline" '("pdf-outline")))



(autoload 'pdf-sync-minor-mode "pdf-sync" "\
Correlate a PDF position with the TeX file.
\\<pdf-sync-minor-mode-map>
This works via SyncTeX, which means the TeX sources need to have
been compiled with `--synctex=1'.  In AUCTeX this can be done by
setting `TeX-source-correlate-method' to 'synctex (before AUCTeX
is loaded) and enabling `TeX-source-correlate-mode'.

If called interactively, enable Pdf-Sync minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Then \\[pdf-sync-backward-search-mouse] in the PDF buffer will open the
corresponding TeX location.

If AUCTeX is your preferred tex-mode, this library arranges to
bind `pdf-sync-forward-display-pdf-key' (the default is `C-c C-g')
to `pdf-sync-forward-search' in `TeX-source-correlate-map'.  This
function displays the PDF page corresponding to the current
position in the TeX buffer.  This function only works together
with AUCTeX.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-sync" '("pdf-sync-")))



(defvar pdf-tools-handle-upgrades t "\
Whether PDF Tools should handle upgrading itself.")

(custom-autoload 'pdf-tools-handle-upgrades "pdf-tools" t)

(autoload 'pdf-tools-install "pdf-tools" "\
Install PDF-Tools in all current and future PDF buffers.

If the `pdf-info-epdfinfo-program' is not running or does not
appear to be working, attempt to rebuild it.  If this build
succeeded, continue with the activation of the package.
Otherwise fail silently, i.e. no error is signaled.

Build the program (if necessary) without asking first, if
NO-QUERY-P is non-nil.

Don't attempt to install system packages, if SKIP-DEPENDENCIES-P
is non-nil.

Do not signal an error in case the build failed, if NO-ERROR-P is
non-nil.

Attempt to install system packages (even if it is deemed
unnecessary), if FORCE-DEPENDENCIES-P is non-nil.

Note that SKIP-DEPENDENCIES-P and FORCE-DEPENDENCIES-P are
mutually exclusive.

Note further, that you can influence the installation directory
by setting `pdf-info-epdfinfo-program' to an appropriate
value (e.g. ~/bin/epdfinfo) before calling this function.

See `pdf-view-mode' and `pdf-tools-enabled-modes'.

\(fn &optional NO-QUERY-P SKIP-DEPENDENCIES-P NO-ERROR-P FORCE-DEPENDENCIES-P)" t nil)

(autoload 'pdf-tools-enable-minor-modes "pdf-tools" "\
Enable MODES in the current buffer.

MODES defaults to `pdf-tools-enabled-modes'.

\(fn &optional MODES)" t nil)

(autoload 'pdf-tools-help "pdf-tools" "\
Show a Help buffer for `pdf-tools'." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-tools" '("pdf-tools-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-util" '("display-buffer-split-below-and-attach" "pdf-util-")))



(autoload 'pdf-view-bookmark-jump-handler "pdf-view" "\
The bookmark handler-function interface for bookmark BMK.

See also `pdf-view-bookmark-make-record'.

\(fn BMK)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-view" '("pdf-view-")))



(autoload 'pdf-virtual-edit-mode "pdf-virtual" "\
Major mode when editing a virtual PDF buffer.

\(fn)" t nil)

(autoload 'pdf-virtual-view-mode "pdf-virtual" "\
Major mode in virtual PDF buffers.

\(fn)" t nil)

(defvar pdf-virtual-global-minor-mode nil "\
Non-nil if Pdf-Virtual-Global minor mode is enabled.
See the `pdf-virtual-global-minor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pdf-virtual-global-minor-mode'.")

(custom-autoload 'pdf-virtual-global-minor-mode "pdf-virtual" nil)

(autoload 'pdf-virtual-global-minor-mode "pdf-virtual" "\
Enable recognition and handling of VPDF files.

If called interactively, enable Pdf-Virtual-Global minor mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'pdf-virtual-buffer-create "pdf-virtual" "\


\(fn &optional FILENAMES BUFFER-NAME DISPLAY-P)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pdf-virtual" '("pdf-virtual-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/pcre2el-20161120.2103/pcre2el-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/pcre2el-20161120.2103/pcre2el-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/pcre2el-20161120.2103/pcre2el-autoloads.el") (car load-path))))


(defvar pcre-mode nil "\
Non-nil if PCRE mode is enabled.
See the `pcre-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pcre-mode'.")

(custom-autoload 'pcre-mode "pcre2el" nil)

(autoload 'pcre-mode "pcre2el" "\
Use emulated PCRE syntax for regexps wherever possible.

Advises the `interactive' specs of `read-regexp' and the
following other functions so that they read PCRE syntax and
translate to its Emacs equivalent:

- `align-regexp'
- `find-tag-regexp'
- `sort-regexp-fields'
- `isearch-message-prefix'
- `ibuffer-do-replace-regexp'

Also alters the behavior of `isearch-mode' when searching by regexp.

\(fn &optional ARG)" t nil)

(autoload 'pcre-query-replace-regexp "pcre2el" "\
Perform `query-replace-regexp' using PCRE syntax.

Consider using `pcre-mode' instead of this function.

\(fn)" t nil)

(autoload 'rxt-elisp-to-pcre "pcre2el" "\
Translate REGEXP, a regexp in Emacs Lisp syntax, to Perl-compatible syntax.

Interactively, reads the regexp in one of three ways. With a
prefix arg, reads from minibuffer without string escaping, like
`query-replace-regexp'. Without a prefix arg, uses the text of
the region if it is active. Otherwise, uses the result of
evaluating the sexp before point (which might be a string regexp
literal or an expression that produces a string).

Displays the translated PCRE regexp in the echo area and copies
it to the kill ring.

Emacs regexp features such as syntax classes which cannot be
translated to PCRE will cause an error.

\(fn REGEXP)" t nil)

(autoload 'rxt-elisp-to-rx "pcre2el" "\
Translate REGEXP, a regexp in Emacs Lisp syntax, to `rx' syntax.

See `rxt-elisp-to-pcre' for a description of the interactive
behavior and `rx' for documentation of the S-expression based
regexp syntax.

\(fn REGEXP)" t nil)

(autoload 'rxt-elisp-to-strings "pcre2el" "\
Return a list of all strings matched by REGEXP, an Emacs Lisp regexp.

See `rxt-elisp-to-pcre' for a description of the interactive behavior.

This is useful primarily for getting back the original list of
strings from a regexp generated by `regexp-opt', but it will work
with any regexp without unbounded quantifiers (*, +, {2, } and so
on).

Throws an error if REGEXP contains any infinite quantifiers.

\(fn REGEXP)" t nil)

(autoload 'rxt-toggle-elisp-rx "pcre2el" "\
Toggle the regexp near point between Elisp string and rx syntax.

\(fn)" t nil)

(autoload 'rxt-pcre-to-elisp "pcre2el" "\
Translate PCRE, a regexp in Perl-compatible syntax, to Emacs Lisp.

Interactively, uses the contents of the region if it is active,
otherwise reads from the minibuffer. Prints the Emacs translation
in the echo area and copies it to the kill ring.

PCRE regexp features that cannot be translated into Emacs syntax
will cause an error. See the commentary section of pcre2el.el for
more details.

\(fn PCRE &optional FLAGS)" t nil)

(defalias 'pcre-to-elisp 'rxt-pcre-to-elisp)

(autoload 'rxt-pcre-to-rx "pcre2el" "\
Translate PCRE, a regexp in Perl-compatible syntax, to `rx' syntax.

See `rxt-pcre-to-elisp' for a description of the interactive behavior.

\(fn PCRE &optional FLAGS)" t nil)

(autoload 'rxt-pcre-to-strings "pcre2el" "\
Return a list of all strings matched by PCRE, a Perl-compatible regexp.

See `rxt-elisp-to-pcre' for a description of the interactive
behavior and `rxt-elisp-to-strings' for why this might be useful.

Throws an error if PCRE contains any infinite quantifiers.

\(fn PCRE &optional FLAGS)" t nil)

(autoload 'rxt-explain-elisp "pcre2el" "\
Insert the pretty-printed `rx' syntax for REGEXP in a new buffer.

REGEXP is a regular expression in Emacs Lisp syntax. See
`rxt-elisp-to-pcre' for a description of how REGEXP is read
interactively.

\(fn REGEXP)" t nil)

(autoload 'rxt-explain-pcre "pcre2el" "\
Insert the pretty-printed `rx' syntax for REGEXP in a new buffer.

REGEXP is a regular expression in PCRE syntax. See
`rxt-pcre-to-elisp' for a description of how REGEXP is read
interactively.

\(fn REGEXP &optional FLAGS)" t nil)

(autoload 'rxt-quote-pcre "pcre2el" "\
Return a PCRE regexp which matches TEXT literally.

Any PCRE metacharacters in TEXT will be quoted with a backslash.

\(fn TEXT)" nil nil)

(autoload 'rxt-explain "pcre2el" "\
Pop up a buffer with pretty-printed `rx' syntax for the regex at point.

Chooses regex syntax to read based on current major mode, calling
`rxt-explain-elisp' if buffer is in `emacs-lisp-mode' or
`lisp-interaction-mode', or `rxt-explain-pcre' otherwise.

\(fn)" t nil)

(autoload 'rxt-convert-syntax "pcre2el" "\
Convert regex at point to other kind of syntax, depending on major mode.

For buffers in `emacs-lisp-mode' or `lisp-interaction-mode',
calls `rxt-elisp-to-pcre' to convert to PCRE syntax. Otherwise,
calls `rxt-pcre-to-elisp' to convert to Emacs syntax.

The converted syntax is displayed in the echo area and copied to
the kill ring; see the two functions named above for details.

\(fn)" t nil)

(autoload 'rxt-convert-to-rx "pcre2el" "\
Convert regex at point to RX syntax. Chooses Emacs or PCRE syntax by major mode.

\(fn)" t nil)

(autoload 'rxt-convert-to-strings "pcre2el" "\
Convert regex at point to RX syntax. Chooses Emacs or PCRE syntax by major mode.

\(fn)" t nil)

(autoload 'rxt-mode "pcre2el" "\
Regex translation utilities.

\(fn &optional ARG)" t nil)

(autoload 'turn-on-rxt-mode "pcre2el" "\
Turn on `rxt-mode' in the current buffer.

\(fn)" t nil)

(defvar rxt-global-mode nil "\
Non-nil if Rxt-Global mode is enabled.
See the `rxt-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `rxt-global-mode'.")

(custom-autoload 'rxt-global-mode "pcre2el" nil)

(autoload 'rxt-global-mode "pcre2el" "\
Toggle Rxt mode in all buffers.
With prefix ARG, enable Rxt-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Rxt mode is enabled in all buffers where
`turn-on-rxt-mode' would do it.
See `rxt-mode' for more information on Rxt mode.

\(fn &optional ARG)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/parseclj-20220328.558/parseclj-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/parseclj-20220328.558/parseclj-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/parseclj-20220328.558/parseclj-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parseclj" '("parseclj-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parseclj-alist" '("parseclj-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parseclj-ast" '("parseclj-ast-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parseclj-lex" '("parseclj-lex-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parseclj-parser" '("parseclj-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/parseedn-20220207.1352/parseedn-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/parseedn-20220207.1352/parseedn-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/parseedn-20220207.1352/parseedn-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parseedn" '("parseedn-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/parse-it-20220214.1531/parse-it-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/parse-it-20220214.1531/parse-it-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/parse-it-20220214.1531/parse-it-autoloads.el") (car load-path))))



(autoload 'parse-it "parse-it" "\
Parse the PATH with symbol language LAN support.

If optional argument is nil; then it will use current buffer instead.

\(fn LAN &optional PATH)" nil nil)



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-actionscript" '("parse-it-actionscript")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-asm" '("parse-it-asm")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-ast" '("parse-it-ast-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-c" '("parse-it-c")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-c++" '("parse-it-c++")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-csharp" '("parse-it-csharp")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-css" '("parse-it-css")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-elisp" '("parse-it-elisp")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-go" '("parse-it-go")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-html" '("parse-it-html")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-java" '("parse-it-java")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-js" '("parse-it-js")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-json" '("parse-it-json")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-kotlin" '("parse-it-kotlin")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-lex" '("parse-it-lex-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-lisp" '("parse-it-lisp")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-lua" '("parse-it-lua")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-markdown" '("parse-it-markdown")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-objc" '("parse-it-objc")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-php" '("parse-it-php")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-python" '("parse-it-python")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-r" '("parse-it-r")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-sql" '("parse-it-sql")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-swift" '("parse-it-swift")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-typescript" '("parse-it-typescript")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-util" '("parse-it-util--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "parse-it-xml" '("parse-it-xml")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/pair-tree-20211219.1816/pair-tree-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/pair-tree-20211219.1816/pair-tree-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/pair-tree-20211219.1816/pair-tree-autoloads.el") (car load-path))))



(autoload 'pair-tree "pair-tree" "\
Draw a pair tree for PAIR.

\(fn PAIR)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "pair-tree" '("pair-tree-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/packed-20220402.1638/packed-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/packed-20220402.1638/packed-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/packed-20220402.1638/packed-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "packed" '("packed-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/package-lint-20220404.1243/package-lint-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/package-lint-20220404.1243/package-lint-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/package-lint-20220404.1243/package-lint-autoloads.el") (car load-path))))



(autoload 'package-lint-describe-symbol-history "package-lint" "\
Show the version history of SYM, if any.

\(fn SYM)" t nil)

(autoload 'package-lint-buffer "package-lint" "\
Get linter errors and warnings for BUFFER.

Returns a list, each element of which is list of

   (LINE COL TYPE MESSAGE)

where TYPE is either 'warning or 'error.

Current buffer is used if none is specified.

\(fn &optional BUFFER)" nil nil)

(autoload 'package-lint-current-buffer "package-lint" "\
Display lint errors and warnings for the current buffer." t nil)

(autoload 'package-lint-batch-and-exit "package-lint" "\
Run `package-lint-buffer' on the files remaining on the command line.
Use this only with -batch, it won't work interactively.

When done, exit Emacs with status 1 in case of any errors, otherwise exit
with status 0.  The variable `package-lint-batch-fail-on-warnings' controls
whether or not warnings alone produce a non-zero exit code." nil nil)

(autoload 'package-lint-looks-like-a-package-p "package-lint" "\
Return non-nil if the current buffer appears to be intended as a package." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "package-lint" '("package-lint-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/osx-plist-20200212.1724/osx-plist-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/osx-plist-20200212.1724/osx-plist-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/osx-plist-20200212.1724/osx-plist-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "osx-plist" '("osx-plist-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/osm-20220403.904/osm-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/osm-20220403.904/osm-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/osm-20220403.904/osm-autoloads.el") (car load-path))))



(autoload 'osm-home "osm" "\
Go to home coordinates." t nil)

(autoload 'osm-goto "osm" "\
Go to LAT/LON/ZOOM.

\(fn LAT LON ZOOM)" t nil)

(autoload 'osm "osm" "\
Go to LINK.

\(fn &rest LINK)" nil t)

(autoload 'osm-bookmark-jump "osm" "\
Jump to osm bookmark BM.

\(fn BM)" t nil)

(autoload 'osm-bookmark-delete "osm" "\
Delete osm bookmark BM.

\(fn BM)" t nil)

(autoload 'osm-bookmark-rename "osm" "\
Rename osm bookmark OLD-NAME.

\(fn OLD-NAME)" t nil)

(autoload 'osm-search "osm" "\
Search for SEARCH and display the map.
If the prefix argument LUCKY is non-nil take the first result and jump there.

\(fn SEARCH &optional LUCKY)" t nil)

(autoload 'osm-gpx-show "osm" "\
Show the tracks of gpx FILE in an `osm-mode' buffer.

\(fn FILE)" t nil)

(autoload 'osm-server "osm" "\
Select tile SERVER.

\(fn SERVER)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "osm" '("osm-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "osm-ol" '("osm-ol-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/origami-20200331.1019/origami-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/origami-20200331.1019/origami-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/origami-20200331.1019/origami-autoloads.el") (car load-path))))



(autoload 'origami-mode "origami" "\
Minor mode to selectively hide/show text in the current buffer.
With a prefix argument ARG, enable the mode if ARG is positive,
and disable it otherwise.  If called from Lisp, enable the mode
if ARG is omitted or nil.

Lastly, the normal hook `origami-mode-hook' is run using
`run-hooks'.

Key bindings:
\\{origami-mode-map}

\(fn &optional ARG)" t nil)

(put 'global-origami-mode 'globalized-minor-mode t)

(defvar global-origami-mode nil "\
Non-nil if Global Origami mode is enabled.
See the `global-origami-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-origami-mode'.")

(custom-autoload 'global-origami-mode "origami" nil)

(autoload 'global-origami-mode "origami" "\
Toggle Origami mode in all buffers.
With prefix ARG, enable Global Origami mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Origami mode is enabled in all buffers where
`(lambda nil (origami-mode 1))' would do it.
See `origami-mode' for more information on Origami mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "origami" '("origami-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "origami-parsers" '("origami-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/csharp-mode-20211124.1105/csharp-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/csharp-mode-20211124.1105/csharp-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/csharp-mode-20211124.1105/csharp-mode-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "csharp-compilation" '("csharp-")))



(add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-mode))

(autoload 'csharp-mode "csharp-mode" "\
Major mode for editing Csharp code.

Key bindings:
\\{csharp-mode-map}

\(fn)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "csharp-mode" '("codedoc-font-lock-" "csharp-")))



(autoload 'csharp-tree-sitter-mode "csharp-tree-sitter" "\
Major mode for editing Csharp code.

Key bindings:
\\{csharp-tree-sitter-mode-map}

\(fn)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "csharp-tree-sitter" '("csharp-" "tree-sitter-indent-csharp-tree-sitter-scopes")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/omnisharp-20210725.1955/omnisharp-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/omnisharp-20210725.1955/omnisharp-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/omnisharp-20210725.1955/omnisharp-autoloads.el") (car load-path))))



(autoload 'omnisharp-mode "omnisharp" "\
Omnicompletion (intellisense) and more for C# using an OmniSharp
server backend.

If called interactively, enable Omnisharp mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'omnisharp-start-omnisharp-server "omnisharp" "\
Starts an OmniSharp server for a given path to a project or solution file

\(fn &optional NO-AUTODETECT)" t nil)

(autoload 'omnisharp-stop-server "omnisharp" "\
Stops Omnisharp server if running." t nil)

(autoload 'omnisharp-reload-solution "omnisharp" "\
Restarts omnisharp server on solution last loaded" t nil)

(autoload 'omnisharp-check-alive-status "omnisharp" "\
Shows a message to the user describing whether the
OmniSharpServer process specified in the current configuration is
alive.
\"Alive\" means it is running and not stuck. It also means the connection
to the server is functional - I.e. The user has the correct host and
port specified." t nil)

(autoload 'omnisharp-check-ready-status "omnisharp" "\
Shows a message to the user describing whether the
OmniSharpServer process specified in the current configuration has
finished loading the solution." t nil)

(autoload 'omnisharp-install-server "omnisharp" "\
Installs OmniSharp server locally into ~/.emacs/cache/omnisharp/server/$(version)

\(fn REINSTALL)" t nil)

(autoload 'company-omnisharp "omnisharp" "\


\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "omnisharp" '("omnisharp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "omnisharp-auto-complete-actions" '("ac-" "omnisharp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "omnisharp-code-structure" '("omnisharp--cs-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "omnisharp-current-symbol-actions" '("omnisharp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "omnisharp-format-actions" '("omnisharp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "omnisharp-http-utils" '("omnisharp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "omnisharp-navigation-actions" '("omnisharp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "omnisharp-server-actions" '("omnisharp--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "omnisharp-server-installation" '("omnisharp--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "omnisharp-server-management" '("comment" "make-omnisharp--server-info" "omnisharp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "omnisharp-settings" '("omnisharp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "omnisharp-solution-actions" '("omnisharp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "omnisharp-unit-test-actions" '("omnisharp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "omnisharp-utils" '("omnisharp-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/notmuch-20220226.1200/notmuch-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/notmuch-20220226.1200/notmuch-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/notmuch-20220226.1200/notmuch-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "coolj" '("coolj-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "make-deps" '("batch-make-deps" "make-deps")))



(autoload 'notmuch-search "notmuch" "\
Display threads matching QUERY in a notmuch-search buffer.

If QUERY is nil, it is read interactively from the minibuffer.
Other optional parameters are used as follows:

  OLDEST-FIRST: A Boolean controlling the sort order of returned threads
  TARGET-THREAD: A thread ID (without the thread: prefix) that will be made
                 current if it appears in the search results.
  TARGET-LINE: The line number to move to if the target thread does not
               appear in the search results.
  NO-DISPLAY: Do not try to foreground the search results buffer. If it is
              already foregrounded i.e. displayed in a window, this has no
              effect, meaning the buffer will remain visible.

When called interactively, this will prompt for a query and use
the configured default sort order.

\(fn &optional QUERY OLDEST-FIRST TARGET-THREAD TARGET-LINE NO-DISPLAY)" t nil)

(autoload 'notmuch "notmuch" "\
Run notmuch and display saved searches, known tags, etc." t nil)

(autoload 'notmuch-cycle-notmuch-buffers "notmuch" "\
Cycle through any existing notmuch buffers (search, show or hello).

If the current buffer is the only notmuch buffer, bury it.
If no notmuch buffers exist, run `notmuch'." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch" '("notmuch-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-address" '("notmuch-address-")))



(autoload 'notmuch-company-setup "notmuch-company" nil nil nil)

(autoload 'notmuch-company "notmuch-company" "\
`company-mode' completion back-end for `notmuch'.

\(fn COMMAND &optional ARG &rest IGNORE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-company" '("notmuch-company-last-prefix")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-compat" '("notmuch-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-crypto" '("notmuch-crypto-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-draft" '("notmuch-draft-")))



(autoload 'notmuch-hello "notmuch-hello" "\
Run notmuch and display saved searches, known tags, etc.

\(fn &optional NO-DISPLAY)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-hello" '("notmuch-")))



(autoload 'notmuch-jump-search "notmuch-jump" "\
Jump to a saved search by shortcut key.

This prompts for and performs a saved search using the shortcut
keys configured in the :key property of `notmuch-saved-searches'.
Typically these shortcuts are a single key long, so this is a
fast way to jump to a saved search from anywhere in Notmuch." t nil)

(autoload 'notmuch-jump "notmuch-jump" "\
Interactively prompt for one of the keys in ACTION-MAP.

Displays a summary of all bindings in ACTION-MAP in the
minibuffer, reads a key from the minibuffer, and performs the
corresponding action.  The prompt can be canceled with C-g or
RET.  PROMPT must be a string to use for the prompt.  PROMPT
should include a space at the end.

ACTION-MAP must be a list of triples of the form
  (KEY LABEL ACTION)
where KEY is a key binding, LABEL is a string label to display in
the buffer, and ACTION is a nullary function to call.  LABEL may
be null, in which case the action will still be bound, but will
not appear in the pop-up buffer.

\(fn ACTION-MAP PROMPT)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-jump" '("notmuch-jump-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-lib" '("notmuch-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-maildir-fcc" '("notmuch-" "with-temporary-notmuch-message-buffer")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-message" '("notmuch-message-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-mua" '("notmuch-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-parser" '("notmuch-sexp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-print" '("notmuch-print-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-query" '("notmuch-query-")))



(autoload 'notmuch-show "notmuch-show" "\
Run \"notmuch show\" with the given thread ID and display results.

ELIDE-TOGGLE, if non-nil, inverts the default elide behavior.

The optional PARENT-BUFFER is the notmuch-search buffer from
which this notmuch-show command was executed, (so that the
next thread from that buffer can be show when done with this
one).

The optional QUERY-CONTEXT is a notmuch search term. Only
messages from the thread matching this search term are shown if
non-nil.

The optional BUFFER-NAME provides the name of the buffer in
which the message thread is shown. If it is nil (which occurs
when the command is called interactively) the argument to the
function is used.

Returns the buffer containing the messages, or NIL if no messages
matched.

\(fn THREAD-ID &optional ELIDE-TOGGLE PARENT-BUFFER QUERY-CONTEXT BUFFER-NAME)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-show" '("notmuch-" "with-current-notmuch-show-message")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-tag" '("notmuch-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-tree" '("notmuch-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-wash" '("notmuch-wash-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rstdoc" '("rst")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/notmuch-transient-20220402.1625/notmuch-transient-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/notmuch-transient-20220402.1625/notmuch-transient-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/notmuch-transient-20220402.1625/notmuch-transient-autoloads.el") (car load-path))))


 (autoload 'notmuch-hello-mode-transient "notmuch-transient" nil t)
 (autoload 'notmuch-tree-mode-transient "notmuch-transient" nil t)
 (autoload 'notmuch-search-mode-transient "notmuch-transient" nil t)
 (autoload 'notmuch-search-stash-transient "notmuch-transient" nil t)
 (autoload 'notmuch-show-mode-transient "notmuch-transient" nil t)
 (autoload 'notmuch-show-stash-transient "notmuch-transient" nil t)
 (autoload 'notmuch-show-part-transient "notmuch-transient" nil t)
 (autoload 'notmuch-search-transient "notmuch-transient" nil t)
 (autoload 'notmuch-tag-transient "notmuch-transient" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-transient" '("notmuch-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/notmuch-addr-20220402.1624/notmuch-addr-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/notmuch-addr-20220402.1624/notmuch-addr-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/notmuch-addr-20220402.1624/notmuch-addr-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "notmuch-addr" '("notmuch-addr")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/nodejs-repl-20200802.1310/nodejs-repl-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/nodejs-repl-20200802.1310/nodejs-repl-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/nodejs-repl-20200802.1310/nodejs-repl-autoloads.el") (car load-path))))



(autoload 'nodejs-repl-send-line "nodejs-repl" "\
Send the current line to the `nodejs-repl-process'" t nil)

(autoload 'nodejs-repl-send-region "nodejs-repl" "\
Send the current region to the `nodejs-repl-process'

\(fn START END)" t nil)

(autoload 'nodejs-repl-send-buffer "nodejs-repl" "\
Send the current buffer to the `nodejs-repl-process'" t nil)

(autoload 'nodejs-repl-load-file "nodejs-repl" "\
Load the file to the `nodejs-repl-process'

\(fn FILE)" t nil)

(autoload 'nodejs-repl-send-last-expression "nodejs-repl" "\
Send the expression before point to the `nodejs-repl-process'" t nil)

(autoload 'nodejs-repl-switch-to-repl "nodejs-repl" "\
If there is a `nodejs-repl-process' running switch to it,
otherwise spawn one." t nil)

(autoload 'nodejs-repl "nodejs-repl" "\
Run Node.js REPL." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nodejs-repl" '("nodejs-repl-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/nixpkgs-fmt-20200327.2302/nixpkgs-fmt-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/nixpkgs-fmt-20200327.2302/nixpkgs-fmt-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/nixpkgs-fmt-20200327.2302/nixpkgs-fmt-autoloads.el") (car load-path))))


 (autoload 'nixpkgs-fmt-buffer "nixpkgs-fmt" nil t)
 (autoload 'nixpkgs-fmt-region "nixpkgs-fmt" nil t)
 (autoload 'nixpkgs-fmt-on-save-mode "nixpkgs-fmt" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nixpkgs-fmt" '("nixpkgs-fmt-command")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/nixos-options-20160209.1841/nixos-options-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/nixos-options-20160209.1841/nixos-options-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/nixos-options-20160209.1841/nixos-options-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nixos-options" '("define-nixos-options-item" "nixos-options")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/nix-update-20190124.1935/nix-update-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/nix-update-20190124.1935/nix-update-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/nix-update-20190124.1935/nix-update-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-update" '("nix-update-fetch")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/nix-sandbox-20210325.1622/nix-sandbox-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/nix-sandbox-20210325.1622/nix-sandbox-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/nix-sandbox-20210325.1622/nix-sandbox-autoloads.el") (car load-path))))



(autoload 'nix-shell-command "nix-sandbox" "\
Assemble a command from ARGS that can be executed in the specified SANDBOX.

\(fn SANDBOX &rest ARGS)" nil nil)

(autoload 'nix-compile "nix-sandbox" "\
Compile a program using the given COMMAND in SANDBOX.

\(fn SANDBOX &rest COMMAND)" t nil)

(autoload 'nix-sandbox/nix-shell "nix-sandbox" "\
Run a COMMAND in the given SANDBOX and return the output.

\(fn SANDBOX &rest COMMAND)" nil nil)

(autoload 'nix-exec-path "nix-sandbox" "\
Return the `exec-path' of the given SANDBOX.

\(fn SANDBOX)" nil nil)

(autoload 'nix-executable-find "nix-sandbox" "\
Search for an EXECUTABLE in the given SANDBOX.

\(fn SANDBOX EXECUTABLE)" nil nil)

(autoload 'nix-find-sandbox "nix-sandbox" "\
Search for a sandbox starting at PATH traversing upwards the directory tree.
If the directory contains a `shell.nix' file, the path to this
file is returned.  Otherwise if the directory contains a
`default.nix' file, the parent directory is returned.

\(fn PATH)" nil nil)

(autoload 'nix-current-sandbox "nix-sandbox" "\
Return the path of the sandbox that is closest to the current working directory." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-sandbox" '("nix-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/magit-section-20220329.1154/magit-section-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/magit-section-20220329.1154/magit-section-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/magit-section-20220329.1154/magit-section-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-section" '("isearch-clean-overlays@magit-mode" "magit-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/nix-mode-20220228.1520/nix-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/nix-mode-20220228.1520/nix-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/nix-mode-20220228.1520/nix-mode-autoloads.el") (car load-path))))



(autoload 'pcomplete/nix "nix" "\
Completion for the nix command." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix" '("nix-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-build" '("nix-build")))



(autoload 'nix-drv-mode "nix-drv-mode" "\
Pretty print Nix’s .drv files.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\`/nix/store/.+\\.drv\\'" . nix-drv-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-drv-mode" '("nix-drv-mode-dejsonify-buffer")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-edit" '("nix-edit")))


 (autoload 'nix-flake-dispatch "nix-flake" nil t)

(autoload 'nix-flake "nix-flake" "\
Dispatch a transient interface for Nix commands.

DIR is a directory on the file system in which flake.nix resides.

Alternatively, you can specify FLAKE-REF which follows the syntax
of flake-url. It can refer to a remote url, a local file path, or
whatever supported by Nix.

\(fn DIR &key FLAKE-REF)" t nil)
 (autoload 'nix-flake-init "nix-flake" nil t)

(autoload 'nix-flake-init "nix-flake" "\
Run \"nix flake init\" command via a transient interface." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-flake" '("nix-flake-")))



(autoload 'nix-format-before-save "nix-format" "\
Add this to `before-save-hook' to run nixfmt when saving." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-format" '("nix-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-instantiate" '("nix-instantiate")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-log" '("nix-log")))



(autoload 'nix-mode-format "nix-mode" "\
Format the entire `nix-mode' buffer." t nil)

(autoload 'nix-indent-line "nix-mode" "\
Indent current line in a Nix expression." t nil)

(autoload 'nix-indent-region "nix-mode" "\
Indent on a whole region. Enabled by default.
START where to start in region.
END where to end the region.

\(fn START END)" t nil)

(autoload 'nix-mode-ffap-nixpkgs-path "nix-mode" "\
Support `ffap' for <nixpkgs> declarations.
If STR contains brackets, call `nix-instantiate' to find the
location of STR. If `nix-instantiate' has a nonzero exit code,
don’t do anything

\(fn STR)" nil nil)

(autoload 'nix-mode "nix-mode" "\
Major mode for editing Nix expressions.

The following commands may be useful:

  '\\[newline-and-indent]'
    Insert a newline and move the cursor to align with the previous
    non-empty line.

  '\\[fill-paragraph]'
    Refill a paragraph so that all lines are at most `fill-column'
    lines long.  This should do the right thing for comments beginning
    with `#'.  However, this command doesn't work properly yet if the
    comment is adjacent to code (i.e., no intervening empty lines).
    In that case, select the text to be refilled and use
    `\\[fill-region]' instead.

The hook `nix-mode-hook' is run when Nix mode is started.

\\{nix-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.nix\\'" . nix-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-mode" '("nix-")))



(autoload 'nix-prettify-mode "nix-prettify-mode" "\
Toggle Nix Prettify mode.

With a prefix argument ARG, enable Nix Prettify mode if ARG is
positive, and disable it otherwise.  If called from Lisp, enable
the mode if ARG is omitted or nil.

When Nix Prettify mode is enabled, hash-parts of the Nix store
file names (see `nix-prettify-regexp') are prettified,
i.e. displayed as `nix-prettify-char' character.  This mode can
be enabled programmatically using hooks:

  (add-hook 'shell-mode-hook 'nix-prettify-mode)

It is possible to enable the mode in any buffer, however not any
buffer's highlighting may survive after adding new elements to
`font-lock-keywords' (see `nix-prettify-special-modes' for
details).

Also you can use `global-nix-prettify-mode' to enable Nix
Prettify mode for all modes that support font-locking.

\(fn &optional ARG)" t nil)

(put 'nix-prettify-global-mode 'globalized-minor-mode t)

(defvar nix-prettify-global-mode nil "\
Non-nil if Nix-Prettify-Global mode is enabled.
See the `nix-prettify-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `nix-prettify-global-mode'.")

(custom-autoload 'nix-prettify-global-mode "nix-prettify-mode" nil)

(autoload 'nix-prettify-global-mode "nix-prettify-mode" "\
Toggle Nix-Prettify mode in all buffers.
With prefix ARG, enable Nix-Prettify-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Nix-Prettify mode is enabled in all buffers where
`nix-prettify-turn-on' would do it.
See `nix-prettify-mode' for more information on Nix-Prettify mode.

\(fn &optional ARG)" t nil)

(define-obsolete-function-alias 'global-nix-prettify-mode 'nix-prettify-global-mode "v1.2.2")

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-prettify-mode" '("nix-prettify-")))



(autoload 'nix-repl "nix-repl" "\
Load the Nix-REPL." t nil)

(autoload 'nix-repl-completion-at-point "nix-repl" "\
Completion at point function for Nix using \"nix-repl\".
See `completion-at-point-functions'." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-repl" '("nix-")))



(autoload 'nix-search--search "nix-search" "\


\(fn SEARCH FILE &optional NO-CACHE USE-FLAKES)" nil nil)

(autoload 'nix-search--display "nix-search" "\


\(fn RESULTS &optional DISPLAY-BUFFER USE-FLAKES SEARCH FILE)" nil nil)

(autoload 'nix-search "nix-search" "\
Run nix search.
SEARCH a search term to use.
FILE a Nix expression to search in.

\(fn SEARCH &optional FILE DISPLAY-BUFFER)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-search" '("nix-search-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-shebang" '("nix-shebang-")))



(autoload 'nix-shell-unpack "nix-shell" "\
Run Nix’s unpackPhase.
FILE is the file to unpack from.
ATTR is the attribute to unpack.

\(fn FILE ATTR)" t nil)

(autoload 'nix-shell-configure "nix-shell" "\
Run Nix’s configurePhase.
FILE is the file to configure from.
ATTR is the attribute to configure.

\(fn FILE ATTR)" t nil)

(autoload 'nix-shell-build "nix-shell" "\
Run Nix’s buildPhase.
FILE is the file to build from.
ATTR is the attribute to build.

\(fn FILE ATTR)" t nil)

(autoload 'nix-eshell-with-packages "nix-shell" "\
Create an Eshell buffer that has the shell environment in it.
PACKAGES a list of packages to pull in.
PKGS-FILE a file to use to get the packages.

\(fn PACKAGES &optional PKGS-FILE)" nil nil)

(autoload 'nix-eshell "nix-shell" "\
Create an Eshell buffer that has the shell environment in it.
FILE the .nix expression to create a shell for.
ATTR attribute to instantiate in NIX-FILE.

\(fn FILE &optional ATTR)" t nil)

(autoload 'nix-shell-with-string "nix-shell" "\
A nix-shell emulator in Emacs from a string.
STRING the nix expression to use.

\(fn STRING)" nil nil)

(autoload 'nix-shell "nix-shell" "\
A nix-shell emulator in Emacs.
FILE the file to instantiate.
ATTR an attribute of the Nix file to use.

\(fn FILE &optional ATTR)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-shell" '("nix-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-store" '("nix-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/nix-env-install-20200812.1305/nix-env-install-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/nix-env-install-20200812.1305/nix-env-install-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/nix-env-install-20200812.1305/nix-env-install-autoloads.el") (car load-path))))



(autoload 'nix-env-install-cachix-use "nix-env-install" "\
Enable binary cache of NAME.

\(fn NAME)" t nil)

(autoload 'nix-env-install-uninstall "nix-env-install" "\
Uninstall PACKAGE installed by nix-env.

\(fn PACKAGE)" t nil)

(autoload 'nix-env-install-npm "nix-env-install" "\
Install PACKAGES from npm using Nix.

\(fn PACKAGES)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-env-install" '("nix-env-install-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/nix-buffer-20180212.1518/nix-buffer-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/nix-buffer-20180212.1518/nix-buffer-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/nix-buffer-20180212.1518/nix-buffer-autoloads.el") (car load-path))))



(autoload 'nix-buffer "nix-buffer" "\
Set up the buffer according to the directory-local nix expression.
Looks for dir-locals.nix upward from the current directory.  If found,
asynchronously builds the derivation defined there with the 'root' arg
set to the current buffer file name or directory and evaluates the
resulting elisp if safe to do so.  'nix-buffer-after-load-hook' can be
used to detect when the elisp load occurs.

If we have previously built dir-locals.nix for the current file or
directory, the elisp corresponding to the last build is evaluated
synchronously and the new elisp is evaluated when the build completes,
unless the newly-built file is identical.  As such, the elisp
generated by dir-locals.nix should be written with multiple
evaluations in mind.

Because in practice dir-locals.nix will always want to do things that
are unsafe in dir-locals.el (e.g. append to 'exec-path'), we don't
reuse that mechanism and instead just load the file as elisp.  Because
this allows arbitrary code execution, the first time we're asked to
load a particular store path we query the user to verify if it's safe
to load beforehand.

The Lisp code generated by dir-locals.nix should limit itself to
modifying buffer-local variables, but there is no actual enforcement
of this.  'setq-local' is your friend.

If dir-locals.nix does not evaluate to any derivations (e.g. it
evaluates to {}), then nothing is loaded and the cached result, if any,
is removed." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nix-buffer" '("nix-buffer-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/nginx-mode-20170612.437/nginx-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/nginx-mode-20170612.437/nginx-mode-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/nginx-mode-20170612.437/nginx-mode-autoloads.el") (car load-path))))


(autoload 'nginx-mode "nginx-mode" "\
Major mode for highlighting nginx config files.

The variable nginx-indent-level controls the amount of indentation.
\\{nginx-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("nginx\\.conf\\'" . nginx-mode))

(add-to-list 'auto-mode-alist '("/nginx/.+\\.conf\\'" . nginx-mode))

(add-to-list 'magic-fallback-mode-alist '("\\(?:.*\n\\)*\\(?:http\\|server\\|location .+\\|upstream .+\\)[ \n	]+{" . nginx-mode))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/network-watch-20171123.1146/network-watch-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/network-watch-20171123.1146/network-watch-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/network-watch-20171123.1146/network-watch-autoloads.el") (car load-path))))


(defvar network-watch-mode t "\
Non-nil if Network-Watch mode is enabled.
See the `network-watch-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `network-watch-mode'.")

(custom-autoload 'network-watch-mode "network-watch" nil)

(autoload 'network-watch-mode "network-watch" "\
Network is automatically on when there is a valid network interface active.

\(fn &optional ARG)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/neotree-20200324.1946/neotree-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/neotree-20200324.1946/neotree-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/neotree-20200324.1946/neotree-autoloads.el") (car load-path))))



(autoload 'neotree-find "neotree" "\
Quick select node which specified PATH in NeoTree.
If path is nil and no buffer file name, then use DEFAULT-PATH,

\(fn &optional PATH DEFAULT-PATH)" t nil)

(autoload 'neotree-projectile-action "neotree" "\
Integration with `Projectile'.

Usage:
    (setq projectile-switch-project-action 'neotree-projectile-action).

When running `projectile-switch-project' (C-c p p), `neotree' will change root
automatically." t nil)

(autoload 'neotree-toggle "neotree" "\
Toggle show the NeoTree window." t nil)

(autoload 'neotree-show "neotree" "\
Show the NeoTree window." t nil)

(autoload 'neotree-hide "neotree" "\
Close the NeoTree window." t nil)

(autoload 'neotree-dir "neotree" "\
Show the NeoTree window, and change root to PATH.

\(fn PATH)" t nil)

(defalias 'neotree 'neotree-show "\
Show the NeoTree window.")

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "neotree" '("neo" "off-p")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/names-20180321.1155/names-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/names-20180321.1155/names-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/names-20180321.1155/names-autoloads.el") (car load-path))))


(defvar names--inside-make-autoload nil "\
Used in `make-autoload' to indicate we're making autoloads.")

(autoload 'define-namespace "names" "\
Inside the namespace NAME, execute BODY.
NAME can be any symbol (not quoted), but it's highly recommended
to use some form of separator (such as :, /, or -). For a
complete description of this macro, please visit the frontpage
with \\[names-view-manual].

In summary, this macro has two main effects:

1. Any definitions inside BODY will have NAME prepended to the
symbol given. Ex:

    (define-namespace foo-
    (defvar bar 1 \"docs\")
    )

expands to

    (defvar foo-bar 1 \"docs\")


2. Any function calls and variable names get NAME prepended to
them if such a variable or function exists. Ex:

    (define-namespace foo:
    (defun message (x y) nil)
    (message \"%s\" my-var)
    )

expands to

    (defun foo:message (x y) nil)
    (foo:message \"%s\" my-var)

Note how `message' is expanded to `foo:message' in the second
form, because that function exists. Meanwhile, `bar' is left
untouched because `foo:bar' is not a known variable name.

===============================

AUTOLOAD

In order for `define-namespace' to work with \";;;###autoload\"
comments must replace all instances of \";;;###autoload\" inside
your `define-namespace' with `:autoload'.
Afterwards, add an \";;;###autoload\" comment just above your
`define-namespace'.

===============================

KEYWORDS

Immediately after NAME you may add keywords which customize the
behaviour of `define-namespace'. For a list of possible keywords
and a description of their effects, see the variable
`names--keyword-list'.

\(fn NAME [KEYWORD ...] BODY)" nil t)

(function-put 'define-namespace 'lisp-indent-function '(lambda (&rest x) 0))

(eval-after-load 'find-func '(defadvice find-function-search-for-symbol (around names-around-find-function-search-for-symbol-advice (symbol type library) activate) "Make sure `find-function-search-for-symbol' understands namespaces." ad-do-it (ignore-errors (unless (cdr ad-return-value) (with-current-buffer (car ad-return-value) (search-forward-regexp "^(define-namespace\\_>") (skip-chars-forward "\n[:blank:]") (let* ((names--regexp (concat "\\`" (regexp-quote (symbol-name (read (current-buffer)))))) (short-symbol (let ((name (symbol-name symbol))) (when (string-match names--regexp name) (intern (replace-match "" nil nil name)))))) (when short-symbol (ad-set-arg 0 short-symbol) ad-do-it)))))))

(defadvice make-autoload (around names-before-make-autoload-advice (form file &optional expansion) activate) "\
Make sure `make-autoload' understands `define-namespace'.
Use the `names--inside-make-autoload' variable to indicate to
`define-namespace' that we're generating autoloads." (require (quote names)) (if (null (eq (car-safe form) (quote define-namespace))) ad-do-it (setq names--inside-make-autoload t) (setq form (macroexpand form)) (setq names--inside-make-autoload nil) (if (version< emacs-version "24.3") (setq ad-return-value (cons (quote progn) (mapcar (lambda (x) (names--make-autoload-compat x file)) (cdr form)))) (ad-set-arg 2 (quote expansion)) (ad-set-arg 0 form) ad-do-it)))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/multiple-cursors-20220328.1724/multiple-cursors-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/multiple-cursors-20220328.1724/multiple-cursors-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/multiple-cursors-20220328.1724/multiple-cursors-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "mc-cycle-cursors" '("mc/")))



(autoload 'mc/edit-lines "mc-edit-lines" "\
Add one cursor to each line of the active region.
Starts from mark and moves in straight down or up towards the
line point is on.

What is done with lines which are not long enough is governed by
`mc/edit-lines-empty-lines'.  The prefix argument ARG can be used
to override this.  If ARG is a symbol (when called from Lisp),
that symbol is used instead of `mc/edit-lines-empty-lines'.
Otherwise, if ARG negative, short lines will be ignored.  Any
other non-nil value will cause short lines to be padded.

\(fn &optional ARG)" t nil)

(autoload 'mc/edit-ends-of-lines "mc-edit-lines" "\
Add one cursor to the end of each line in the active region." t nil)

(autoload 'mc/edit-beginnings-of-lines "mc-edit-lines" "\
Add one cursor to the beginning of each line in the active region." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "mc-edit-lines" '("mc/edit-lines-empty-lines")))



(autoload 'mc-hide-unmatched-lines-mode "mc-hide-unmatched-lines-mode" "\
Minor mode when enabled hides all lines where no cursors (and
also hum/lines-to-expand below and above) To make use of this
mode press \"C-'\" while multiple-cursor-mode is active. You can
still edit lines while you are in mc-hide-unmatched-lines
mode. To leave this mode press <return> or \"C-g\"

If called interactively, enable Mc-Hide-Unmatched-Lines mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "mc-hide-unmatched-lines-mode" '("hum/")))



(autoload 'mc/mark-next-like-this "mc-mark-more" "\
Find and mark the next part of the buffer matching the currently active region
If no region is active add a cursor on the next line
With negative ARG, delete the last one instead.
With zero ARG, skip the last one and mark next.

\(fn ARG)" t nil)

(autoload 'mc/mark-next-like-this-word "mc-mark-more" "\
Find and mark the next part of the buffer matching the currently active region
If no region is active, mark the word at the point and find the next match
With negative ARG, delete the last one instead.
With zero ARG, skip the last one and mark next.

\(fn ARG)" t nil)

(autoload 'mc/mark-next-word-like-this "mc-mark-more" "\
Find and mark the next word of the buffer matching the currently active region
The matching region must be a whole word to be a match
If no region is active add a cursor on the next line
With negative ARG, delete the last one instead.
With zero ARG, skip the last one and mark next.

\(fn ARG)" t nil)

(autoload 'mc/mark-next-symbol-like-this "mc-mark-more" "\
Find and mark the next symbol of the buffer matching the currently active region
The matching region must be a whole symbol to be a match
If no region is active add a cursor on the next line
With negative ARG, delete the last one instead.
With zero ARG, skip the last one and mark next.

\(fn ARG)" t nil)

(autoload 'mc/mark-previous-like-this "mc-mark-more" "\
Find and mark the previous part of the buffer matching the
currently active region.

If no region is active ,add a cursor on the previous line.

With negative ARG, delete the last one instead.

With zero ARG, skip the last one and mark next.

\(fn ARG)" t nil)

(autoload 'mc/mark-previous-like-this-word "mc-mark-more" "\
Find and mark the previous part of the buffer matching the
currently active region.

If no region is active, mark the word at the point and find the
previous match.

With negative ARG, delete the last one instead.

With zero ARG, skip the last one and mark previous.

\(fn ARG)" t nil)

(autoload 'mc/mark-previous-word-like-this "mc-mark-more" "\
Find and mark the previous part of the buffer matching the
currently active region.

The matching region must be a whole word to be a match.

If no region is active, add a cursor on the previous line.

With negative ARG, delete the last one instead.

With zero ARG, skip the last one and mark next.

\(fn ARG)" t nil)

(autoload 'mc/mark-previous-symbol-like-this "mc-mark-more" "\
Find and mark the previous part of the buffer matching
the currently active region.

The matching region must be a whole symbol to be a match.

If no region is active add a cursor on the previous line.

With negative ARG, delete the last one instead.

With zero ARG, skip the last one and mark next.

\(fn ARG)" t nil)

(autoload 'mc/mark-next-lines "mc-mark-more" "\


\(fn ARG)" t nil)

(autoload 'mc/mark-previous-lines "mc-mark-more" "\


\(fn ARG)" t nil)

(autoload 'mc/unmark-next-like-this "mc-mark-more" "\
Deselect next part of the buffer matching the currently active region." t nil)

(autoload 'mc/unmark-previous-like-this "mc-mark-more" "\
Deselect prev part of the buffer matching the currently active region." t nil)

(autoload 'mc/skip-to-next-like-this "mc-mark-more" "\
Skip the current one and select the next part of the buffer
matching the currently active region." t nil)

(autoload 'mc/skip-to-previous-like-this "mc-mark-more" "\
Skip the current one and select the prev part of the buffer
matching the currently active region." t nil)

(autoload 'mc/mark-all-like-this "mc-mark-more" "\
Find and mark all the parts of the buffer matching the currently active region" t nil)

(autoload 'mc/mark-all-words-like-this "mc-mark-more" nil t nil)

(autoload 'mc/mark-all-symbols-like-this "mc-mark-more" nil t nil)

(autoload 'mc/mark-all-in-region "mc-mark-more" "\
Find and mark all the parts in the region matching the given search

\(fn BEG END &optional SEARCH)" t nil)

(autoload 'mc/mark-all-in-region-regexp "mc-mark-more" "\
Find and mark all the parts in the region matching the given regexp.

\(fn BEG END)" t nil)

(autoload 'mc/mark-more-like-this-extended "mc-mark-more" "\
Like mark-more-like-this, but then lets you adjust with arrow keys.
The adjustments work like this:

   <up>    Mark previous like this and set direction to 'up
   <down>  Mark next like this and set direction to 'down

If direction is 'up:

   <left>  Skip past the cursor furthest up
   <right> Remove the cursor furthest up

If direction is 'down:

   <left>  Remove the cursor furthest down
   <right> Skip past the cursor furthest down

The bindings for these commands can be changed.
See `mc/mark-more-like-this-extended-keymap'." t nil)

(autoload 'mc/mark-all-like-this-dwim "mc-mark-more" "\
Tries to guess what you want to mark all of.
Can be pressed multiple times to increase selection.

With prefix, it behaves the same as original `mc/mark-all-like-this'

\(fn ARG)" t nil)

(autoload 'mc/mark-all-dwim "mc-mark-more" "\
Tries even harder to guess what you want to mark all of.

If the region is active and spans multiple lines, it will behave
as if `mc/mark-all-in-region'. With the prefix ARG, it will call
`mc/edit-lines' instead.

If the region is inactive or on a single line, it will behave like
`mc/mark-all-like-this-dwim'.

\(fn ARG)" t nil)

(autoload 'mc/mark-all-like-this-in-defun "mc-mark-more" "\
Mark all like this in defun." t nil)

(autoload 'mc/mark-all-words-like-this-in-defun "mc-mark-more" "\
Mark all words like this in defun." t nil)

(autoload 'mc/mark-all-symbols-like-this-in-defun "mc-mark-more" "\
Mark all symbols like this in defun." t nil)

(autoload 'mc/toggle-cursor-on-click "mc-mark-more" "\
Add a cursor where you click, or remove a fake cursor that is
already there.

\(fn EVENT)" t nil)

(defalias 'mc/add-cursor-on-click 'mc/toggle-cursor-on-click)

(autoload 'mc/mark-sgml-tag-pair "mc-mark-more" "\
Mark the tag we're in and its pair for renaming." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "mc-mark-more" '("mc--" "mc/")))



(autoload 'mc/mark-pop "mc-mark-pop" "\
Add a cursor at the current point, pop off mark ring and jump
to the popped mark." t nil)



(autoload 'mc/insert-numbers "mc-separate-operations" "\
Insert increasing numbers for each cursor, starting at
`mc/insert-numbers-default' or ARG.

\(fn ARG)" t nil)

(autoload 'mc/insert-letters "mc-separate-operations" "\
Insert increasing letters for each cursor, starting at 0 or ARG.
     Where letter[0]=a letter[2]=c letter[26]=aa

\(fn ARG)" t nil)

(autoload 'mc/reverse-regions "mc-separate-operations" nil t nil)

(autoload 'mc/sort-regions "mc-separate-operations" nil t nil)

(autoload 'mc/vertical-align "mc-separate-operations" "\
Aligns all cursors vertically with a given CHARACTER to the one with the
highest column number (the rightest).
Might not behave as intended if more than one cursors are on the same line.

\(fn CHARACTER)" t nil)

(autoload 'mc/vertical-align-with-space "mc-separate-operations" "\
Aligns all cursors with whitespace like `mc/vertical-align' does" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "mc-separate-operations" '("mc--" "mc/insert-numbers-default")))



(autoload 'multiple-cursors-mode "multiple-cursors-core" "\
Mode while multiple cursors are active.

If called interactively, enable Multiple-Cursors mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "multiple-cursors-core" '("activate-cursor-for-undo" "deactivate-cursor-after-undo" "multiple-cursors-mode" "unsupported-cmd")))



(autoload 'set-rectangular-region-anchor "rectangular-region-mode" "\
Anchors the rectangular region at point.

Think of this one as `set-mark' except you're marking a
rectangular region. It is an exceedingly quick way of adding
multiple cursors to multiple lines." t nil)

(autoload 'rectangular-region-mode "rectangular-region-mode" "\
A mode for creating a rectangular region to edit

If called interactively, enable Rectangular-Region mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "rectangular-region-mode" '("rectangular-region-mode" "rrm/")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/multi-term-20200514.428/multi-term-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/multi-term-20200514.428/multi-term-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/multi-term-20200514.428/multi-term-autoloads.el") (car load-path))))



(autoload 'multi-term "multi-term" "\
Create new term buffer.
Will prompt you shell name when you type `C-u' before this command." t nil)

(autoload 'multi-term-next "multi-term" "\
Go to the next term buffer.
If OFFSET is `non-nil', will goto next term buffer with OFFSET.

\(fn &optional OFFSET)" t nil)

(autoload 'multi-term-prev "multi-term" "\
Go to the previous term buffer.
If OFFSET is `non-nil', will goto previous term buffer with OFFSET.

\(fn &optional OFFSET)" t nil)

(autoload 'multi-term-dedicated-open "multi-term" "\
Open dedicated `multi-term' window.
Will prompt you shell name when you type `C-u' before this command." t nil)

(autoload 'multi-term-dedicated-toggle "multi-term" "\
Toggle dedicated `multi-term' window." t nil)

(autoload 'multi-term-dedicated-select "multi-term" "\
Select the `multi-term' dedicated window." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "multi-term" '("multi-term-" "term-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/moody-20220402.1624/moody-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/moody-20220402.1624/moody-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/moody-20220402.1624/moody-autoloads.el") (car load-path))))



(autoload 'moody-replace-mode-line-buffer-identification "moody" "\
Use moody's variant of `mode-line-buffer-identification'.

If optional RESTORE is true, then go back to the default.
If called interactively, then toggle between the variants.

\(fn &optional RESTORE)" t nil)

(autoload 'moody-replace-sml/mode-line-buffer-identification "moody" "\
Use moody's variant of `mode-line-buffer-identification'.

If optional RESTORE is true, then go back to the default.
If called interactively, then toggle between the variants.

Use instead of `moody-replace-mode-line-buffer-identification'
if you use the `smart-mode-line' package, after `sml/setup' has
already been called.

\(fn &optional RESTORE)" t nil)

(autoload 'moody-replace-vc-mode "moody" "\
Use moody's variant of `vc-mode' mode-line element.

If optional RESTORE is true, then go back to the default.
If called interactively, then toggle between the variants.

\(fn &optional RESTORE)" t nil)

(autoload 'moody-replace-eldoc-minibuffer-message-function "moody" "\
Use moody's variant of `eldoc-minibuffer-message'.

If optional RESTORE is true, then go back to the default.
If called interactively, then toggle between the variants.

\(fn &optional RESTORE)" t nil)

(autoload 'moody-replace-mode-line-front-space "moody" "\
Use moody's variant of `mode-line-front-space'.

If optional RESTORE is true, then go back to the default.
If called interactively, then toggle between the variants.

Adjust the display width so that subsequent character in the
mode-line are aligned with those in the buffer.  Unlike other
moody variants do not use any tab or ribbon.

\(fn &optional RESTORE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "moody" '("moody-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/monkeytype-20210110.513/monkeytype-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/monkeytype-20210110.513/monkeytype-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/monkeytype-20210110.513/monkeytype-autoloads.el") (car load-path))))



(autoload 'monkeytype-region "monkeytype" "\
Type marked region from START to END.

\\[monkeytype-region]

\(fn START END)" t nil)

(autoload 'monkeytype-repeat "monkeytype" "\
Repeat run.

\\[monkeytype-repeat]" t nil)

(autoload 'monkeytype-fortune "monkeytype" "\
Type fortune.

\\[monkeytype-fortune]" t nil)

(autoload 'monkeytype-buffer "monkeytype" "\
Type entire current buffet.

\\[monkeytype-buffer]" t nil)

(autoload 'monkeytype-pause "monkeytype" "\
Pause run.

\\[monkeytype-pause]" t nil)

(autoload 'monkeytype-stop "monkeytype" "\
Finish run.

\\[monkeytype-stop]" t nil)

(autoload 'monkeytype-resume "monkeytype" "\
Resume run.

\\[monkeytype-resume]" t nil)

(autoload 'monkeytype-mistyped-words "monkeytype" "\
Practice mistyped words for current test.

\\[monkeytype-mistyped-words]" t nil)

(autoload 'monkeytype-hard-transitions "monkeytype" "\
Practice hard key combinations/transitions for current test.

\\[monkeytype-hard-transitions]" t nil)

(autoload 'monkeytype-save-mistyped-words "monkeytype" "\
Save mistyped words for current test.

See also: `monkeytype-load-words-from-file'
See also: `monkeytype-most-mistyped-words'

\\[monkeytype-save-mistyped-words]" t nil)

(autoload 'monkeytype-save-hard-transitions "monkeytype" "\
Save hard transitions for current test.

See also: `monkeytype-load-words-from-file'

\\[monkeytype-save-hard-transition]" t nil)

(autoload 'monkeytype-load-text-from-file "monkeytype" "\
Prompt user to enter text-file to use for typing.
Buffer will be filled with the vale of `fill-column' if
`monkeytype-auto-fill' is set to true.

\\[monkeytype-load-text-from-file]" t nil)

(autoload 'monkeytype-load-words-from-file "monkeytype" "\
Prompt user to enter words-file to use for typing.

Words will be randomized if `monkeytype-randomize' is set to true.
Words will be downcased if `monkeytype-downcase' is set to true.
Words special characters will get removed based on
`monkeytype-excluded-chars-regexp'.
Buffer will be filled with the vale of `fill-column' if
`monkeytype-words-auto-fill' is set to true.

\\[monkeytype-load-words-from-file]" t nil)

(autoload 'monkeytype-region-as-words "monkeytype" "\
Put the marked region from START to END in typing buffer.

Words will be randomized if `monkeytype-randomize' is set to true.
Words will be downcased if `monkeytype-downcase' is set to true.
Words special characters will get removed based on
`monkeytype-excluded-chars-regexp'.
Buffer will be filled with the vale of `fill-column' if
`monkeytype-auto-fill' is set to true.

\\[monkeytype-region-as-words]

\(fn START END)" t nil)

(autoload 'monkeytype-most-mistyped-words "monkeytype" "\
Type most mistyped words from all word-files in `monkeytype-directory'.

See: `monkeytype-save-mistyped-words' for how word-files are saved.

\\[monkeytype-most-mistyped-words]" t nil)

(autoload 'monkeytype-save-text-from-url "monkeytype" "\
Download URL to `monketype-directory', naming it FILE-NAME.

This function shells out to pandoc(1) which character-encodes in UTF-8
so some characters might not be desirable for monkeytyping, so the custom
`monkeytype-asciify' option has be given to optionally allow for
further character encoding to ASCII (using iconv(1)).

\(fn URL FILE-NAME)" t nil)

(autoload 'monkeytype-toggle-mode-line "monkeytype" "\
Hide or show WPM results in mode-line." t nil)

(autoload 'monkeytype-wpm-peek "monkeytype" "\
Hide/Show overlay with WPM info." t nil)

(autoload 'monkeytype-mode "monkeytype" "\
Monkeytype mode is a minor mode for speed/touch typing.

If called interactively, enable Monkeytype mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\\{monkeytype-mode-map}

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "monkeytype" '("monke")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/eval-in-repl-20201121.1341/eval-in-repl-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/eval-in-repl-20201121.1341/eval-in-repl-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/eval-in-repl-20201121.1341/eval-in-repl-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl" '("eir-")))



(autoload 'eir-eval-in-cider "eval-in-repl-cider" "\
eval-in-repl for cider." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-cider" '("eir-")))



(autoload 'eir-eval-in-elm "eval-in-repl-elm" "\
Provides eval-in-repl for Elm." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-elm" '("eir-send-to-elm")))



(autoload 'eir-eval-in-erlang "eval-in-repl-erlang" "\
Provides eval-in-repl for Erlang." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-erlang" '("eir-send-to-erlang")))



(autoload 'eir-eval-in-geiser "eval-in-repl-geiser" "\
eval-in-repl for Geiser." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-geiser" '("eir-send-to-geiser")))



(autoload 'eir-eval-in-hy "eval-in-repl-hy" "\
eval-in-repl for Hy." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-hy" '("eir-")))



(autoload 'eir-eval-in-ielm "eval-in-repl-ielm" "\
eval-in-repl for IELM." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-ielm" '("eir-")))



(autoload 'eir-eval-in-iex "eval-in-repl-iex" "\
Provides eval-in-repl for Elixir." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-iex" '("eir-send-to-iex")))



(autoload 'eir-eval-in-javascript "eval-in-repl-javascript" "\
eval-in-repl for Javascript." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-javascript" '("eir-send-to-javascript")))



(autoload 'eir-eval-in-lua "eval-in-repl-lua" "\
eval-in-repl for Lua." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-lua" '("eir-send-to-lua" "eval-in-repl-run-lua")))



(autoload 'eir-eval-in-ocaml "eval-in-repl-ocaml" "\
eval-in-repl for OCaml." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-ocaml" '("eir-send-to-ocaml")))



(autoload 'eir-eval-in-prolog "eval-in-repl-prolog" "\
eval-in-repl for SWI Prolog." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-prolog" '("eir-send-to-prolog")))



(autoload 'eir-eval-in-python "eval-in-repl-python" "\
eval-in-repl for Python." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-python" '("eir-")))



(autoload 'eir-eval-in-racket "eval-in-repl-racket" "\
eval-in-repl for Racket." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-racket" '("eir-send-to-racket")))



(autoload 'eir-eval-in-ruby "eval-in-repl-ruby" "\
eval-in-repl for Ruby." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-ruby" '("eir-send-to-ruby")))



(autoload 'eir-eval-in-scheme "eval-in-repl-scheme" "\
eval-in-repl for Scheme." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-scheme" '("eir-send-to-scheme")))



(autoload 'eir-eval-in-shell "eval-in-repl-shell" "\
eval-in-repl for shell." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-shell" '("eir-")))



(autoload 'eir-eval-in-slime "eval-in-repl-slime" "\
eval-in-repl for SLIME." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-slime" '("eir-send-to-slime")))



(autoload 'eir-eval-in-sly "eval-in-repl-sly" "\
eval-in-repl for Sly." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-sly" '("eir-send-to-sly")))



(autoload 'eir-eval-in-sml "eval-in-repl-sml" "\
eval-in-repl for Standard ML." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eval-in-repl-sml" '("eir-send-to-sml")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/modern-sh-20211101.1001/modern-sh-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/modern-sh-20211101.1001/modern-sh-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/modern-sh-20211101.1001/modern-sh-autoloads.el") (car load-path))))



(autoload 'modern-sh-mode "modern-sh" "\
Minor mode for editing shell script.

If called interactively, enable Modern-Sh mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "modern-sh" '("modern-sh-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/mocha-snippets-20190417.1931/mocha-snippets-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/mocha-snippets-20190417.1931/mocha-snippets-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/mocha-snippets-20190417.1931/mocha-snippets-autoloads.el") (car load-path))))



(autoload 'mocha-snippets-initialize "mocha-snippets" "\
Add mocha-snippets directories to YAS.

\(fn)" nil nil)

(eval-after-load "yasnippet" '(mocha-snippets-initialize))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "mocha-snippets" '("mocha-snippets-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/minimap-1.4/minimap-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/minimap-1.4/minimap-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/minimap-1.4/minimap-autoloads.el") (car load-path))))



(defvar minimap-mode nil "\
Non-nil if Minimap mode is enabled.
See the `minimap-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `minimap-mode'.")

(custom-autoload 'minimap-mode "minimap" nil)

(autoload 'minimap-mode "minimap" "\
Toggle minimap mode.

If called interactively, enable Minimap mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "minimap" '("minimap-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/message-attachment-reminder-20200428.124/message-attachment-reminder-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/message-attachment-reminder-20200428.124/message-attachment-reminder-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/message-attachment-reminder-20200428.124/message-attachment-reminder-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "message-attachment-reminder" '("message-attachment-reminder-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/md-readme-20191112.1943/md-readme-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/md-readme-20191112.1943/md-readme-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/md-readme-20191112.1943/md-readme-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "md-readme" '("mdr-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/markdown-mode-20220406.410/markdown-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/markdown-mode-20220406.410/markdown-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/markdown-mode-20220406.410/markdown-mode-autoloads.el") (car load-path))))



(autoload 'markdown-mode "markdown-mode" "\
Major mode for editing Markdown files.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))

(autoload 'gfm-mode "markdown-mode" "\
Major mode for editing GitHub Flavored Markdown files.

\(fn)" t nil)

(autoload 'markdown-view-mode "markdown-mode" "\
Major mode for viewing Markdown content.

\(fn)" t nil)

(autoload 'gfm-view-mode "markdown-mode" "\
Major mode for viewing GitHub Flavored Markdown content.

\(fn)" t nil)

(autoload 'markdown-live-preview-mode "markdown-mode" "\
Toggle native previewing on save for a specific markdown file.

If called interactively, enable Markdown-Live-Preview mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "markdown-mode" '("defun-markdown-" "gfm-" "markdown")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/markdown-changelog-20200120.2253/markdown-changelog-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/markdown-changelog-20200120.2253/markdown-changelog-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/markdown-changelog-20200120.2253/markdown-changelog-autoloads.el") (car load-path))))



(autoload 'markdown-changelog-new "markdown-changelog" "\
Create a new changelog buffer with project URL.

\(fn URL)" t nil)

(autoload 'markdown-changelog-insert-release "markdown-changelog" "\
Add a new release to the change log." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "markdown-changelog" '("markdown-changelog-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/friendly-shell-command-20200527.830/friendly-shell-command-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/friendly-shell-command-20200527.830/friendly-shell-command-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/friendly-shell-command-20200527.830/friendly-shell-command-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "friendly-shell-command" '("friendly-shell-command--kill-buffer-sentinel")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/magrant-20210706.1438/magrant-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/magrant-20210706.1438/magrant-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/magrant-20210706.1438/magrant-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magrant-box" '("magrant-box")))


 (autoload 'magrant "magrant" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magrant-core" '("magrant-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magrant-machine" '("magrant-machine")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magrant-utils" '("magrant-utils-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/git-commit-20220331.2308/git-commit-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/git-commit-20220331.2308/git-commit-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/git-commit-20220331.2308/git-commit-autoloads.el") (car load-path))))


(put 'git-commit-major-mode 'safe-local-variable
    (lambda (val)
      (memq val '(text-mode
                  markdown-mode
                  org-mode
                  fundamental-mode
                  git-commit-elisp-text-mode))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git-commit" '("git-commit-" "global-git-commit-mode")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/magit-20220331.2308/magit-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/magit-20220331.2308/magit-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/magit-20220331.2308/magit-autoloads.el") (car load-path))))



(autoload 'git-rebase-current-line "git-rebase" "\
Parse current line into a `git-rebase-action' instance.
If the current line isn't recognized as a rebase line, an
instance with all nil values is returned." nil nil)

(autoload 'git-rebase-mode "git-rebase" "\
Major mode for editing of a Git rebase file.

Rebase files are generated when you run 'git rebase -i' or run
`magit-interactive-rebase'.  They describe how Git should perform
the rebase.  See the documentation for git-rebase (e.g., by
running 'man git-rebase' at the command line) for details.

\(fn)" t nil)

(defconst git-rebase-filename-regexp "/git-rebase-todo\\'")

(add-to-list 'auto-mode-alist (cons git-rebase-filename-regexp #'git-rebase-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git-rebase" '("git-rebase-" "magit-imenu--rebase-")))



(define-obsolete-variable-alias 'global-magit-file-mode 'magit-define-global-key-bindings "Magit 3.0.0")

(defvar magit-define-global-key-bindings t "\
Whether to bind some Magit commands in the global keymap.

If this variable is non-nil, then the following bindings may
be added to the global keymap.  The default is t.

key             binding
---             -------
C-x g           magit-status
C-x M-g         magit-dispatch
C-c M-g         magit-file-dispatch

These bindings may be added when `after-init-hook' is run.
Each binding is added if and only if at that time no other key
is bound to the same command and no other command is bound to
the same key.  In other words we try to avoid adding bindings
that are unnecessary, as well as bindings that conflict with
other bindings.

Adding the above bindings is delayed until `after-init-hook'
is called to allow users to set the variable anywhere in their
init file (without having to make sure to do so before `magit'
is loaded or autoloaded) and to increase the likelihood that
all the potentially conflicting user bindings have already
been added.

To set this variable use either `setq' or the Custom interface.
Do not use the function `customize-set-variable' because doing
that would cause Magit to be loaded immediately when that form
is evaluated (this differs from `custom-set-variables', which
doesn't load the libraries that define the customized variables).

Setting this variable to nil has no effect if that is done after
the key bindings have already been added.

We recommend that you bind \"C-c g\" instead of \"C-c M-g\" to
`magit-file-dispatch'.  The former is a much better binding
but the \"C-c <letter>\" namespace is strictly reserved for
users; preventing Magit from using it by default.

Also see info node `(magit)Commands for Buffers Visiting Files'.")

(custom-autoload 'magit-define-global-key-bindings "magit" t)

(defun magit-maybe-define-global-key-bindings (&optional force) (when magit-define-global-key-bindings (let ((map (current-global-map))) (dolist (elt '(("C-x g" . magit-status) ("C-x M-g" . magit-dispatch) ("C-c M-g" . magit-file-dispatch))) (let ((key (kbd (car elt))) (def (cdr elt))) (when (or force (not (or (lookup-key map key) (where-is-internal def (make-sparse-keymap) t)))) (define-key map key def)))))))

(if after-init-time (magit-maybe-define-global-key-bindings) (add-hook 'after-init-hook #'magit-maybe-define-global-key-bindings t))
 (autoload 'magit-dispatch "magit" nil t)
 (autoload 'magit-run "magit" nil t)

(autoload 'magit-git-command "magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer. \"git \" is
used as initial input, but can be deleted to run another command.

With a prefix argument COMMAND is run in the top-level directory
of the current working tree, otherwise in `default-directory'.

\(fn COMMAND)" t nil)

(autoload 'magit-git-command-topdir "magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer. \"git \" is
used as initial input, but can be deleted to run another command.

COMMAND is run in the top-level directory of the current
working tree.

\(fn COMMAND)" t nil)

(autoload 'magit-shell-command "magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  With a
prefix argument COMMAND is run in the top-level directory of
the current working tree, otherwise in `default-directory'.

\(fn COMMAND)" t nil)

(autoload 'magit-shell-command-topdir "magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  COMMAND
is run in the top-level directory of the current working tree.

\(fn COMMAND)" t nil)

(autoload 'magit-version "magit" "\
Return the version of Magit currently in use.
If optional argument PRINT-DEST is non-nil, output
stream (interactively, the echo area, or the current buffer with
a prefix argument), also print the used versions of Magit, Git,
and Emacs to it.

\(fn &optional PRINT-DEST)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit" '("magit-")))



(autoload 'magit-stage-file "magit-apply" "\
Stage all changes to FILE.
With a prefix argument or when there is no file at point ask for
the file to be staged.  Otherwise stage the file at point without
requiring confirmation.

\(fn FILE)" t nil)

(autoload 'magit-stage-modified "magit-apply" "\
Stage all changes to files modified in the worktree.
Stage all new content of tracked files and remove tracked files
that no longer exist in the working tree from the index also.
With a prefix argument also stage previously untracked (but not
ignored) files.

\(fn &optional ALL)" t nil)

(autoload 'magit-unstage-file "magit-apply" "\
Unstage all changes to FILE.
With a prefix argument or when there is no file at point ask for
the file to be unstaged.  Otherwise unstage the file at point
without requiring confirmation.

\(fn FILE)" t nil)

(autoload 'magit-unstage-all "magit-apply" "\
Remove all changes from the staging area." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-apply" '("magit-")))



(put 'magit-auto-revert-mode 'globalized-minor-mode t)

(defvar magit-auto-revert-mode (not (or global-auto-revert-mode noninteractive)) "\
Non-nil if Magit-Auto-Revert mode is enabled.
See the `magit-auto-revert-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-auto-revert-mode'.")

(custom-autoload 'magit-auto-revert-mode "magit-autorevert" nil)

(autoload 'magit-auto-revert-mode "magit-autorevert" "\
Toggle Auto-Revert mode in all buffers.
With prefix ARG, enable Magit-Auto-Revert mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Auto-Revert mode is enabled in all buffers where
`magit-turn-on-auto-revert-mode-if-desired' would do it.
See `auto-revert-mode' for more information on Auto-Revert mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-autorevert" '("auto-revert-buffer" "magit-")))



(autoload 'magit-emacs-Q-command "magit-base" "\
Show a shell command that runs an uncustomized Emacs with only Magit loaded.
See info node `(magit)Debugging Tools' for more information." t nil)

(autoload 'Info-follow-nearest-node--magit-gitman "magit-base" "\


\(fn FN &optional FORK)" nil nil)

(advice-add 'Info-follow-nearest-node :around #'Info-follow-nearest-node--magit-gitman)

(advice-add 'org-man-export :around #'org-man-export--magit-gitman)

(autoload 'org-man-export--magit-gitman "magit-base" "\


\(fn FN LINK DESCRIPTION FORMAT)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-base" '("magit-")))


 (autoload 'magit-bisect "magit-bisect" nil t)

(autoload 'magit-bisect-start "magit-bisect" "\
Start a bisect session.

Bisecting a bug means to find the commit that introduced it.
This command starts such a bisect session by asking for a known
good and a known bad commit.  To move the session forward use the
other actions from the bisect transient command (\\<magit-status-mode-map>\\[magit-bisect]).

\(fn BAD GOOD ARGS)" t nil)

(autoload 'magit-bisect-reset "magit-bisect" "\
After bisecting, cleanup bisection state and return to original `HEAD'." t nil)

(autoload 'magit-bisect-good "magit-bisect" "\
While bisecting, mark the current commit as good.
Use this after you have asserted that the commit does not contain
the bug in question." t nil)

(autoload 'magit-bisect-bad "magit-bisect" "\
While bisecting, mark the current commit as bad.
Use this after you have asserted that the commit does contain the
bug in question." t nil)

(autoload 'magit-bisect-mark "magit-bisect" "\
While bisecting, mark the current commit with a bisect term.
During a bisect using alternate terms, commits can still be
marked with `magit-bisect-good' and `magit-bisect-bad', as those
commands map to the correct term (\"good\" to --term-old's value
and \"bad\" to --term-new's).  However, in some cases, it can be
difficult to keep that mapping straight in your head; this
command provides an interface that exposes the underlying terms." t nil)

(autoload 'magit-bisect-skip "magit-bisect" "\
While bisecting, skip the current commit.
Use this if for some reason the current commit is not a good one
to test.  This command lets Git choose a different one." t nil)

(autoload 'magit-bisect-run "magit-bisect" "\
Bisect automatically by running commands after each step.

Unlike `git bisect run' this can be used before bisecting has
begun.  In that case it behaves like `git bisect start; git
bisect run'.

\(fn CMDLINE &optional BAD GOOD ARGS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-bisect" '("magit-")))


 (autoload 'magit-blame-echo "magit-blame" nil t)
 (autoload 'magit-blame-addition "magit-blame" nil t)
 (autoload 'magit-blame-removal "magit-blame" nil t)
 (autoload 'magit-blame-reverse "magit-blame" nil t)
 (autoload 'magit-blame "magit-blame" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-blame" '("magit-")))



(autoload 'magit--handle-bookmark "magit-bookmark" "\
Open a bookmark created by `magit--make-bookmark'.
Call the `magit-*-setup-buffer' function of the the major-mode
with the variables' values as arguments, which were recorded by
`magit--make-bookmark'.  Ignore `magit-display-buffer-function'.

\(fn BOOKMARK)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-bookmark" '("magit--make-bookmark")))


 (autoload 'magit-branch "magit" nil t)

(autoload 'magit-checkout "magit-branch" "\
Checkout REVISION, updating the index and the working tree.
If REVISION is a local branch, then that becomes the current
branch.  If it is something else, then `HEAD' becomes detached.
Checkout fails if the working tree or the staging area contain
changes.

\(git checkout REVISION).

\(fn REVISION &optional ARGS)" t nil)

(autoload 'magit-branch-create "magit-branch" "\
Create BRANCH at branch or revision START-POINT.

\(fn BRANCH START-POINT)" t nil)

(autoload 'magit-branch-and-checkout "magit-branch" "\
Create and checkout BRANCH at branch or revision START-POINT.

\(fn BRANCH START-POINT &optional ARGS)" t nil)

(autoload 'magit-branch-or-checkout "magit-branch" "\
Hybrid between `magit-checkout' and `magit-branch-and-checkout'.

Ask the user for an existing branch or revision.  If the user
input actually can be resolved as a branch or revision, then
check that out, just like `magit-checkout' would.

Otherwise create and checkout a new branch using the input as
its name.  Before doing so read the starting-point for the new
branch.  This is similar to what `magit-branch-and-checkout'
does.

\(fn ARG &optional START-POINT)" t nil)

(autoload 'magit-branch-checkout "magit-branch" "\
Checkout an existing or new local branch.

Read a branch name from the user offering all local branches and
a subset of remote branches as candidates.  Omit remote branches
for which a local branch by the same name exists from the list
of candidates.  The user can also enter a completely new branch
name.

- If the user selects an existing local branch, then check that
  out.

- If the user selects a remote branch, then create and checkout
  a new local branch with the same name.  Configure the selected
  remote branch as push target.

- If the user enters a new branch name, then create and check
  that out, after also reading the starting-point from the user.

In the latter two cases the upstream is also set.  Whether it is
set to the chosen START-POINT or something else depends on the
value of `magit-branch-adjust-remote-upstream-alist', just like
when using `magit-branch-and-checkout'.

\(fn BRANCH &optional START-POINT)" t nil)

(autoload 'magit-branch-orphan "magit-branch" "\
Create and checkout an orphan BRANCH with contents from revision START-POINT.

\(fn BRANCH START-POINT)" t nil)

(autoload 'magit-branch-spinout "magit-branch" "\
Create new branch from the unpushed commits.
Like `magit-branch-spinoff' but remain on the current branch.
If there are any uncommitted changes, then behave exactly like
`magit-branch-spinoff'.

\(fn BRANCH &optional FROM)" t nil)

(autoload 'magit-branch-spinoff "magit-branch" "\
Create new branch from the unpushed commits.

Create and checkout a new branch starting at and tracking the
current branch.  That branch in turn is reset to the last commit
it shares with its upstream.  If the current branch has no
upstream or no unpushed commits, then the new branch is created
anyway and the previously current branch is not touched.

This is useful to create a feature branch after work has already
began on the old branch (likely but not necessarily \"master\").

If the current branch is a member of the value of option
`magit-branch-prefer-remote-upstream' (which see), then the
current branch will be used as the starting point as usual, but
the upstream of the starting-point may be used as the upstream
of the new branch, instead of the starting-point itself.

If optional FROM is non-nil, then the source branch is reset
to `FROM~', instead of to the last commit it shares with its
upstream.  Interactively, FROM is only ever non-nil, if the
region selects some commits, and among those commits, FROM is
the commit that is the fewest commits ahead of the source
branch.

The commit at the other end of the selection actually does not
matter, all commits between FROM and `HEAD' are moved to the new
branch.  If FROM is not reachable from `HEAD' or is reachable
from the source branch's upstream, then an error is raised.

\(fn BRANCH &optional FROM)" t nil)

(autoload 'magit-branch-reset "magit-branch" "\
Reset a branch to the tip of another branch or any other commit.

When the branch being reset is the current branch, then do a
hard reset.  If there are any uncommitted changes, then the user
has to confirm the reset because those changes would be lost.

This is useful when you have started work on a feature branch but
realize it's all crap and want to start over.

When resetting to another branch and a prefix argument is used,
then also set the target branch as the upstream of the branch
that is being reset.

\(fn BRANCH TO &optional SET-UPSTREAM)" t nil)

(autoload 'magit-branch-delete "magit-branch" "\
Delete one or multiple branches.
If the region marks multiple branches, then offer to delete
those, otherwise prompt for a single branch to be deleted,
defaulting to the branch at point.

\(fn BRANCHES &optional FORCE)" t nil)

(autoload 'magit-branch-rename "magit-branch" "\
Rename the branch named OLD to NEW.

With a prefix argument FORCE, rename even if a branch named NEW
already exists.

If `branch.OLD.pushRemote' is set, then unset it.  Depending on
the value of `magit-branch-rename-push-target' (which see) maybe
set `branch.NEW.pushRemote' and maybe rename the push-target on
the remote.

\(fn OLD NEW &optional FORCE)" t nil)

(autoload 'magit-branch-shelve "magit-branch" "\
Shelve a BRANCH.
Rename \"refs/heads/BRANCH\" to \"refs/shelved/BRANCH\",
and also rename the respective reflog file.

\(fn BRANCH)" t nil)

(autoload 'magit-branch-unshelve "magit-branch" "\
Unshelve a BRANCH
Rename \"refs/shelved/BRANCH\" to \"refs/heads/BRANCH\",
and also rename the respective reflog file.

\(fn BRANCH)" t nil)
 (autoload 'magit-branch-configure "magit-branch" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-branch" '("magit-")))


 (autoload 'magit-bundle "magit-bundle" nil t)
 (autoload 'magit-bundle-import "magit-bundle" nil t)

(autoload 'magit-bundle-create-tracked "magit-bundle" "\
Create and track a new bundle.

\(fn FILE TAG BRANCH REFS ARGS)" t nil)

(autoload 'magit-bundle-update-tracked "magit-bundle" "\
Update a bundle that is being tracked using TAG.

\(fn TAG)" t nil)

(autoload 'magit-bundle-verify "magit-bundle" "\
Check whether FILE is valid and applies to the current repository.

\(fn FILE)" t nil)

(autoload 'magit-bundle-list-heads "magit-bundle" "\
List the refs in FILE.

\(fn FILE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-bundle" '("magit-")))


 (autoload 'magit-clone "magit-clone" nil t)

(autoload 'magit-clone-regular "magit-clone" "\
Create a clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

\(fn REPOSITORY DIRECTORY ARGS)" t nil)

(autoload 'magit-clone-shallow "magit-clone" "\
Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
With a prefix argument read the DEPTH of the clone;
otherwise use 1.

\(fn REPOSITORY DIRECTORY ARGS DEPTH)" t nil)

(autoload 'magit-clone-shallow-since "magit-clone" "\
Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
Exclude commits before DATE, which is read from the
user.

\(fn REPOSITORY DIRECTORY ARGS DATE)" t nil)

(autoload 'magit-clone-shallow-exclude "magit-clone" "\
Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
Exclude commits reachable from EXCLUDE, which is a
branch or tag read from the user.

\(fn REPOSITORY DIRECTORY ARGS EXCLUDE)" t nil)

(autoload 'magit-clone-bare "magit-clone" "\
Create a bare clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

\(fn REPOSITORY DIRECTORY ARGS)" t nil)

(autoload 'magit-clone-mirror "magit-clone" "\
Create a mirror of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

\(fn REPOSITORY DIRECTORY ARGS)" t nil)

(autoload 'magit-clone-sparse "magit-clone" "\
Clone REPOSITORY into DIRECTORY and create a sparse checkout.

\(fn REPOSITORY DIRECTORY ARGS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-clone" '("magit-clone-")))


 (autoload 'magit-commit "magit-commit" nil t)

(autoload 'magit-commit-create "magit-commit" "\
Create a new commit on `HEAD'.
With a prefix argument, amend to the commit at `HEAD' instead.

\(git commit [--amend] ARGS)

\(fn &optional ARGS)" t nil)

(autoload 'magit-commit-amend "magit-commit" "\
Amend the last commit.

\(git commit --amend ARGS)

\(fn &optional ARGS)" t nil)

(autoload 'magit-commit-extend "magit-commit" "\
Amend the last commit, without editing the message.

With a prefix argument keep the committer date, otherwise change
it.  The option `magit-commit-extend-override-date' can be used
to inverse the meaning of the prefix argument.  
\(git commit
--amend --no-edit)

\(fn &optional ARGS OVERRIDE-DATE)" t nil)

(autoload 'magit-commit-reword "magit-commit" "\
Reword the last commit, ignoring staged changes.

With a prefix argument keep the committer date, otherwise change
it.  The option `magit-commit-reword-override-date' can be used
to inverse the meaning of the prefix argument.

Non-interactively respect the optional OVERRIDE-DATE argument
and ignore the option.

\(git commit --amend --only)

\(fn &optional ARGS OVERRIDE-DATE)" t nil)

(autoload 'magit-commit-fixup "magit-commit" "\
Create a fixup commit.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

\(fn &optional COMMIT ARGS)" t nil)

(autoload 'magit-commit-squash "magit-commit" "\
Create a squash commit, without editing the squash message.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

If you want to immediately add a message to the squash commit,
then use `magit-commit-augment' instead of this command.

\(fn &optional COMMIT ARGS)" t nil)

(autoload 'magit-commit-augment "magit-commit" "\
Create a squash commit, editing the squash message.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

\(fn &optional COMMIT ARGS)" t nil)

(autoload 'magit-commit-instant-fixup "magit-commit" "\
Create a fixup commit targeting COMMIT and instantly rebase.

\(fn &optional COMMIT ARGS)" t nil)

(autoload 'magit-commit-instant-squash "magit-commit" "\
Create a squash commit targeting COMMIT and instantly rebase.

\(fn &optional COMMIT ARGS)" t nil)

(autoload 'magit-commit-reshelve "magit-commit" "\
Change the committer date and possibly the author date of `HEAD'.

The current time is used as the initial minibuffer input and the
original author or committer date is available as the previous
history element.

Both the author and the committer dates are changes, unless one
of the following is true, in which case only the committer date
is updated:
- You are not the author of the commit that is being reshelved.
- The command was invoked with a prefix argument.
- Non-interactively if UPDATE-AUTHOR is nil.

\(fn DATE UPDATE-AUTHOR &optional ARGS)" t nil)

(autoload 'magit-commit-absorb-modules "magit-commit" "\
Spread modified modules across recent commits.

\(fn PHASE COMMIT)" t nil)
 (autoload 'magit-commit-absorb "magit-commit" nil t)
 (autoload 'magit-commit-autofixup "magit-commit" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-commit" '("magit-")))


 (autoload 'magit-diff "magit-diff" nil t)
 (autoload 'magit-diff-refresh "magit-diff" nil t)

(autoload 'magit-diff-dwim "magit-diff" "\
Show changes for the thing at point.

\(fn &optional ARGS FILES)" t nil)

(autoload 'magit-diff-range "magit-diff" "\
Show differences between two commits.

REV-OR-RANGE should be a range or a single revision.  If it is a
revision, then show changes in the working tree relative to that
revision.  If it is a range, but one side is omitted, then show
changes relative to `HEAD'.

If the region is active, use the revisions on the first and last
line of the region as the two sides of the range.  With a prefix
argument, instead of diffing the revisions, choose a revision to
view changes along, starting at the common ancestor of both
revisions (i.e., use a \"...\" range).

\(fn REV-OR-RANGE &optional ARGS FILES)" t nil)

(autoload 'magit-diff-working-tree "magit-diff" "\
Show changes between the current working tree and the `HEAD' commit.
With a prefix argument show changes between the working tree and
a commit read from the minibuffer.

\(fn &optional REV ARGS FILES)" t nil)

(autoload 'magit-diff-staged "magit-diff" "\
Show changes between the index and the `HEAD' commit.
With a prefix argument show changes between the index and
a commit read from the minibuffer.

\(fn &optional REV ARGS FILES)" t nil)

(autoload 'magit-diff-unstaged "magit-diff" "\
Show changes between the working tree and the index.

\(fn &optional ARGS FILES)" t nil)

(autoload 'magit-diff-unmerged "magit-diff" "\
Show changes that are being merged.

\(fn &optional ARGS FILES)" t nil)

(autoload 'magit-diff-while-committing "magit-diff" "\
While committing, show the changes that are about to be committed.
While amending, invoking the command again toggles between
showing just the new changes or all the changes that will
be committed.

\(fn &optional ARGS)" t nil)

(autoload 'magit-diff-buffer-file "magit-diff" "\
Show diff for the blob or file visited in the current buffer.

When the buffer visits a blob, then show the respective commit.
When the buffer visits a file, then show the differenced between
`HEAD' and the working tree.  In both cases limit the diff to
the file or blob." t nil)

(autoload 'magit-diff-paths "magit-diff" "\
Show changes between any two files on disk.

\(fn A B)" t nil)

(autoload 'magit-show-commit "magit-diff" "\
Visit the revision at point in another buffer.
If there is no revision at point or with a prefix argument prompt
for a revision.

\(fn REV &optional ARGS FILES MODULE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-diff" '("magit-")))


 (autoload 'magit-ediff "magit-ediff" nil)

(autoload 'magit-ediff-resolve "magit-ediff" "\
Resolve outstanding conflicts in FILE using Ediff.
FILE has to be relative to the top directory of the repository.

In the rare event that you want to manually resolve all
conflicts, including those already resolved by Git, use
`ediff-merge-revisions-with-ancestor'.

\(fn FILE)" t nil)

(autoload 'magit-ediff-stage "magit-ediff" "\
Stage and unstage changes to FILE using Ediff.
FILE has to be relative to the top directory of the repository.

\(fn FILE)" t nil)

(autoload 'magit-ediff-compare "magit-ediff" "\
Compare REVA:FILEA with REVB:FILEB using Ediff.

FILEA and FILEB have to be relative to the top directory of the
repository.  If REVA or REVB is nil, then this stands for the
working tree state.

If the region is active, use the revisions on the first and last
line of the region.  With a prefix argument, instead of diffing
the revisions, choose a revision to view changes along, starting
at the common ancestor of both revisions (i.e., use a \"...\"
range).

\(fn REVA REVB FILEA FILEB)" t nil)

(autoload 'magit-ediff-dwim "magit-ediff" "\
Compare, stage, or resolve using Ediff.
This command tries to guess what file, and what commit or range
the user wants to compare, stage, or resolve using Ediff.  It
might only be able to guess either the file, or range or commit,
in which case the user is asked about the other.  It might not
always guess right, in which case the appropriate `magit-ediff-*'
command has to be used explicitly.  If it cannot read the user's
mind at all, then it asks the user for a command to run." t nil)

(autoload 'magit-ediff-show-staged "magit-ediff" "\
Show staged changes using Ediff.

This only allows looking at the changes; to stage, unstage,
and discard changes using Ediff, use `magit-ediff-stage'.

FILE must be relative to the top directory of the repository.

\(fn FILE)" t nil)

(autoload 'magit-ediff-show-unstaged "magit-ediff" "\
Show unstaged changes using Ediff.

This only allows looking at the changes; to stage, unstage,
and discard changes using Ediff, use `magit-ediff-stage'.

FILE must be relative to the top directory of the repository.

\(fn FILE)" t nil)

(autoload 'magit-ediff-show-working-tree "magit-ediff" "\
Show changes between `HEAD' and working tree using Ediff.
FILE must be relative to the top directory of the repository.

\(fn FILE)" t nil)

(autoload 'magit-ediff-show-commit "magit-ediff" "\
Show changes introduced by COMMIT using Ediff.

\(fn COMMIT)" t nil)

(autoload 'magit-ediff-show-stash "magit-ediff" "\
Show changes introduced by STASH using Ediff.
`magit-ediff-show-stash-with-index' controls whether a
three-buffer Ediff is used in order to distinguish changes in the
stash that were staged.

\(fn STASH)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-ediff" '("magit-ediff-")))


 (autoload 'magit-git-mergetool "magit-extras" nil t)

(autoload 'magit-run-git-gui-blame "magit-extras" "\
Run `git gui blame' on the given FILENAME and COMMIT.
Interactively run it for the current file and the `HEAD', with a
prefix or when the current file cannot be determined let the user
choose.  When the current buffer is visiting FILENAME instruct
blame to center around the line point is on.

\(fn COMMIT FILENAME &optional LINENUM)" t nil)

(autoload 'magit-run-git-gui "magit-extras" "\
Run `git gui' for the current git repository." t nil)

(autoload 'magit-run-gitk "magit-extras" "\
Run `gitk' in the current repository." t nil)

(autoload 'magit-run-gitk-branches "magit-extras" "\
Run `gitk --branches' in the current repository." t nil)

(autoload 'magit-run-gitk-all "magit-extras" "\
Run `gitk --all' in the current repository." t nil)

(autoload 'ido-enter-magit-status "magit-extras" "\
Drop into `magit-status' from file switching.

This command does not work in Emacs 26.1.
See https://github.com/magit/magit/issues/3634
and https://debbugs.gnu.org/cgi/bugreport.cgi?bug=31707.

To make this command available use something like:

  (add-hook \\='ido-setup-hook
            (lambda ()
              (define-key ido-completion-map
                (kbd \"C-x g\") \\='ido-enter-magit-status)))

Starting with Emacs 25.1 the Ido keymaps are defined just once
instead of every time Ido is invoked, so now you can modify it
like pretty much every other keymap:

  (define-key ido-common-completion-map
    (kbd \"C-x g\") \\='ido-enter-magit-status)" t nil)

(autoload 'magit-project-status "magit-extras" "\
Run `magit-status' in the current project's root." t nil)

(autoload 'magit-dired-jump "magit-extras" "\
Visit file at point using Dired.
With a prefix argument, visit in another window.  If there
is no file at point, then instead visit `default-directory'.

\(fn &optional OTHER-WINDOW)" t nil)

(autoload 'magit-dired-log "magit-extras" "\
Show log for all marked files, or the current file.

\(fn &optional FOLLOW)" t nil)

(autoload 'magit-dired-am-apply-patches "magit-extras" "\
In Dired, apply the marked (or next ARG) files as patches.
If inside a repository, then apply in that.  Otherwise prompt
for a repository.

\(fn REPO &optional ARG)" t nil)

(autoload 'magit-do-async-shell-command "magit-extras" "\
Open FILE with `dired-do-async-shell-command'.
Interactively, open the file at point.

\(fn FILE)" t nil)

(autoload 'magit-previous-line "magit-extras" "\
Like `previous-line' but with Magit-specific shift-selection.

Magit's selection mechanism is based on the region but selects an
area that is larger than the region.  This causes `previous-line'
when invoked while holding the shift key to move up one line and
thereby select two lines.  When invoked inside a hunk body this
command does not move point on the first invocation and thereby
it only selects a single line.  Which inconsistency you prefer
is a matter of preference.

\(fn &optional ARG TRY-VSCROLL)" t nil)

(function-put 'magit-previous-line 'interactive-only '"use `forward-line' with negative argument instead.")

(autoload 'magit-next-line "magit-extras" "\
Like `next-line' but with Magit-specific shift-selection.

Magit's selection mechanism is based on the region but selects
an area that is larger than the region.  This causes `next-line'
when invoked while holding the shift key to move down one line
and thereby select two lines.  When invoked inside a hunk body
this command does not move point on the first invocation and
thereby it only selects a single line.  Which inconsistency you
prefer is a matter of preference.

\(fn &optional ARG TRY-VSCROLL)" t nil)

(function-put 'magit-next-line 'interactive-only 'forward-line)

(autoload 'magit-clean "magit-extras" "\
Remove untracked files from the working tree.
With a prefix argument also remove ignored files,
with two prefix arguments remove ignored files only.

\(git clean -f -d [-x|-X])

\(fn &optional ARG)" t nil)

(autoload 'magit-generate-changelog "magit-extras" "\
Insert ChangeLog entries into the current buffer.

The entries are generated from the diff being committed.
If prefix argument, AMENDING, is non-nil, include changes
in HEAD as well as staged changes in the diff to check.

\(fn &optional AMENDING)" t nil)

(autoload 'magit-add-change-log-entry "magit-extras" "\
Find change log file and add date entry and item for current change.
This differs from `add-change-log-entry' (which see) in that
it acts on the current hunk in a Magit buffer instead of on
a position in a file-visiting buffer.

\(fn &optional WHOAMI FILE-NAME OTHER-WINDOW)" t nil)

(autoload 'magit-add-change-log-entry-other-window "magit-extras" "\
Find change log file in other window and add entry and item.
This differs from `add-change-log-entry-other-window' (which see)
in that it acts on the current hunk in a Magit buffer instead of
on a position in a file-visiting buffer.

\(fn &optional WHOAMI FILE-NAME)" t nil)

(autoload 'magit-edit-line-commit "magit-extras" "\
Edit the commit that added the current line.

With a prefix argument edit the commit that removes the line,
if any.  The commit is determined using `git blame' and made
editable using `git rebase --interactive' if it is reachable
from `HEAD', or by checking out the commit (or a branch that
points at it) otherwise.

\(fn &optional TYPE)" t nil)

(autoload 'magit-diff-edit-hunk-commit "magit-extras" "\
From a hunk, edit the respective commit and visit the file.

First visit the file being modified by the hunk at the correct
location using `magit-diff-visit-file'.  This actually visits a
blob.  When point is on a diff header, not within an individual
hunk, then this visits the blob the first hunk is about.

Then invoke `magit-edit-line-commit', which uses an interactive
rebase to make the commit editable, or if that is not possible
because the commit is not reachable from `HEAD' by checking out
that commit directly.  This also causes the actual worktree file
to be visited.

Neither the blob nor the file buffer are killed when finishing
the rebase.  If that is undesirable, then it might be better to
use `magit-rebase-edit-command' instead of this command.

\(fn FILE)" t nil)

(autoload 'magit-reshelve-since "magit-extras" "\
Change the author and committer dates of the commits since REV.

Ask the user for the first reachable commit whose dates should
be changed.  Then read the new date for that commit.  The initial
minibuffer input and the previous history element offer good
values.  The next commit will be created one minute later and so
on.

This command is only intended for interactive use and should only
be used on highly rearranged and unpublished history.

If KEYID is non-nil, then use that to sign all reshelved commits.
Interactively use the value of the \"--gpg-sign\" option in the
list returned by `magit-rebase-arguments'.

\(fn REV KEYID)" t nil)

(autoload 'magit-pop-revision-stack "magit-extras" "\
Insert a representation of a revision into the current buffer.

Pop a revision from the `magit-revision-stack' and insert it into
the current buffer according to `magit-pop-revision-stack-format'.
Revisions can be put on the stack using `magit-copy-section-value'
and `magit-copy-buffer-revision'.

If the stack is empty or with a prefix argument, instead read a
revision in the minibuffer.  By using the minibuffer history this
allows selecting an item which was popped earlier or to insert an
arbitrary reference or revision without first pushing it onto the
stack.

When reading the revision from the minibuffer, then it might not
be possible to guess the correct repository.  When this command
is called inside a repository (e.g. while composing a commit
message), then that repository is used.  Otherwise (e.g. while
composing an email) then the repository recorded for the top
element of the stack is used (even though we insert another
revision).  If not called inside a repository and with an empty
stack, or with two prefix arguments, then read the repository in
the minibuffer too.

\(fn REV TOPLEVEL)" t nil)

(autoload 'magit-copy-section-value "magit-extras" "\
Save the value of the current section for later use.

Save the section value to the `kill-ring', and, provided that
the current section is a commit, branch, or tag section, push
the (referenced) revision to the `magit-revision-stack' for use
with `magit-pop-revision-stack'.

When `magit-copy-revision-abbreviated' is non-nil, save the
abbreviated revision to the `kill-ring' and the
`magit-revision-stack'.

When the current section is a branch or a tag, and a prefix
argument is used, then save the revision at its tip to the
`kill-ring' instead of the reference name.

When the region is active, then save that to the `kill-ring',
like `kill-ring-save' would, instead of behaving as described
above.  If a prefix argument is used and the region is within
a hunk, then strip the diff marker column and keep only either
the added or removed lines, depending on the sign of the prefix
argument.

\(fn ARG)" t nil)

(autoload 'magit-copy-buffer-revision "magit-extras" "\
Save the revision of the current buffer for later use.

Save the revision shown in the current buffer to the `kill-ring'
and push it to the `magit-revision-stack'.

This command is mainly intended for use in `magit-revision-mode'
buffers, the only buffers where it is always unambiguous exactly
which revision should be saved.

Most other Magit buffers usually show more than one revision, in
some way or another, so this command has to select one of them,
and that choice might not always be the one you think would have
been the best pick.

In such buffers it is often more useful to save the value of
the current section instead, using `magit-copy-section-value'.

When the region is active, then save that to the `kill-ring',
like `kill-ring-save' would, instead of behaving as described
above.

When `magit-copy-revision-abbreviated' is non-nil, save the
abbreviated revision to the `kill-ring' and the
`magit-revision-stack'." t nil)

(autoload 'magit-display-repository-buffer "magit-extras" "\
Display a Magit buffer belonging to the current Git repository.
The buffer is displayed using `magit-display-buffer', which see.

\(fn BUFFER)" t nil)

(autoload 'magit-switch-to-repository-buffer "magit-extras" "\
Switch to a Magit buffer belonging to the current Git repository.

\(fn BUFFER)" t nil)

(autoload 'magit-switch-to-repository-buffer-other-window "magit-extras" "\
Switch to a Magit buffer belonging to the current Git repository.

\(fn BUFFER)" t nil)

(autoload 'magit-switch-to-repository-buffer-other-frame "magit-extras" "\
Switch to a Magit buffer belonging to the current Git repository.

\(fn BUFFER)" t nil)

(autoload 'magit-abort-dwim "magit-extras" "\
Abort current operation.
Depending on the context, this will abort a merge, a rebase, a
patch application, a cherry-pick, a revert, or a bisect." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-extras" '("magit-")))


 (autoload 'magit-fetch "magit-fetch" nil t)
 (autoload 'magit-fetch-from-pushremote "magit-fetch" nil t)
 (autoload 'magit-fetch-from-upstream "magit-fetch" nil t)

(autoload 'magit-fetch-other "magit-fetch" "\
Fetch from another repository.

\(fn REMOTE ARGS)" t nil)

(autoload 'magit-fetch-branch "magit-fetch" "\
Fetch a BRANCH from a REMOTE.

\(fn REMOTE BRANCH ARGS)" t nil)

(autoload 'magit-fetch-refspec "magit-fetch" "\
Fetch a REFSPEC from a REMOTE.

\(fn REMOTE REFSPEC ARGS)" t nil)

(autoload 'magit-fetch-all "magit-fetch" "\
Fetch from all remotes.

\(fn ARGS)" t nil)

(autoload 'magit-fetch-all-prune "magit-fetch" "\
Fetch from all remotes, and prune.
Prune remote tracking branches for branches that have been
removed on the respective remote." t nil)

(autoload 'magit-fetch-all-no-prune "magit-fetch" "\
Fetch from all remotes." t nil)
 (autoload 'magit-fetch-modules "magit-fetch" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-fetch" '("magit-")))



(autoload 'magit-find-file "magit-files" "\
View FILE from REV.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go
to the line and column corresponding to that location.

\(fn REV FILE)" t nil)

(autoload 'magit-find-file-other-window "magit-files" "\
View FILE from REV, in another window.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go to
the line and column corresponding to that location.

\(fn REV FILE)" t nil)

(autoload 'magit-find-file-other-frame "magit-files" "\
View FILE from REV, in another frame.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go to
the line and column corresponding to that location.

\(fn REV FILE)" t nil)
 (autoload 'magit-file-dispatch "magit" nil t)

(autoload 'magit-blob-visit-file "magit-files" "\
View the file from the worktree corresponding to the current blob.
When visiting a blob or the version from the index, then go to
the same location in the respective file in the working tree." t nil)

(autoload 'magit-file-checkout "magit-files" "\
Checkout FILE from REV.

\(fn REV FILE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-files" '("magit-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-git" '("magit-")))


 (autoload 'magit-gitignore "magit-gitignore" nil t)

(autoload 'magit-gitignore-in-topdir "magit-gitignore" "\
Add the Git ignore RULE to the top-level \".gitignore\" file.
Since this file is tracked, it is shared with other clones of the
repository.  Also stage the file.

\(fn RULE)" t nil)

(autoload 'magit-gitignore-in-subdir "magit-gitignore" "\
Add the Git ignore RULE to a \".gitignore\" file in DIRECTORY.
Prompt the user for a directory and add the rule to the
\".gitignore\" file in that directory.  Since such files are
tracked, they are shared with other clones of the repository.
Also stage the file.

\(fn RULE DIRECTORY)" t nil)

(autoload 'magit-gitignore-in-gitdir "magit-gitignore" "\
Add the Git ignore RULE to \"$GIT_DIR/info/exclude\".
Rules in that file only affects this clone of the repository.

\(fn RULE)" t nil)

(autoload 'magit-gitignore-on-system "magit-gitignore" "\
Add the Git ignore RULE to the file specified by `core.excludesFile'.
Rules that are defined in that file affect all local repositories.

\(fn RULE)" t nil)

(autoload 'magit-skip-worktree "magit-gitignore" "\
Call \"git update-index --skip-worktree -- FILE\".

\(fn FILE)" t nil)

(autoload 'magit-no-skip-worktree "magit-gitignore" "\
Call \"git update-index --no-skip-worktree -- FILE\".

\(fn FILE)" t nil)

(autoload 'magit-assume-unchanged "magit-gitignore" "\
Call \"git update-index --assume-unchanged -- FILE\".

\(fn FILE)" t nil)

(autoload 'magit-no-assume-unchanged "magit-gitignore" "\
Call \"git update-index --no-assume-unchanged -- FILE\".

\(fn FILE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-gitignore" '("magit-")))


 (autoload 'magit-log "magit-log" nil t)
 (autoload 'magit-log-refresh "magit-log" nil t)

(autoload 'magit-log-current "magit-log" "\
Show log for the current branch.
When `HEAD' is detached or with a prefix argument show log for
one or more revs read from the minibuffer.

\(fn REVS &optional ARGS FILES)" t nil)

(autoload 'magit-log-head "magit-log" "\
Show log for `HEAD'.

\(fn &optional ARGS FILES)" t nil)

(autoload 'magit-log-related "magit-log" "\
Show log for the current branch, its upstream and its push target.
When the upstream is a local branch, then also show its own
upstream.  When `HEAD' is detached, then show log for that, the
previously checked out branch and its upstream and push-target.

\(fn REVS &optional ARGS FILES)" t nil)

(autoload 'magit-log-other "magit-log" "\
Show log for one or more revs read from the minibuffer.
The user can input any revision or revisions separated by a
space, or even ranges, but only branches and tags, and a
representation of the commit at point, are available as
completion candidates.

\(fn REVS &optional ARGS FILES)" t nil)

(autoload 'magit-log-branches "magit-log" "\
Show log for all local branches and `HEAD'.

\(fn &optional ARGS FILES)" t nil)

(autoload 'magit-log-matching-branches "magit-log" "\
Show log for all branches matching PATTERN and `HEAD'.

\(fn PATTERN &optional ARGS FILES)" t nil)

(autoload 'magit-log-matching-tags "magit-log" "\
Show log for all tags matching PATTERN and `HEAD'.

\(fn PATTERN &optional ARGS FILES)" t nil)

(autoload 'magit-log-all-branches "magit-log" "\
Show log for all local and remote branches and `HEAD'.

\(fn &optional ARGS FILES)" t nil)

(autoload 'magit-log-all "magit-log" "\
Show log for all references and `HEAD'.

\(fn &optional ARGS FILES)" t nil)

(autoload 'magit-log-buffer-file "magit-log" "\
Show log for the blob or file visited in the current buffer.
With a prefix argument or when `--follow' is an active log
argument, then follow renames.  When the region is active,
restrict the log to the lines that the region touches.

\(fn &optional FOLLOW BEG END)" t nil)

(autoload 'magit-log-trace-definition "magit-log" "\
Show log for the definition at point.

\(fn FILE FN REV)" t nil)

(autoload 'magit-log-merged "magit-log" "\
Show log for the merge of COMMIT into BRANCH.

More precisely, find merge commit M that brought COMMIT into
BRANCH, and show the log of the range \"M^1..M\".  If COMMIT is
directly on BRANCH, then show approximately twenty surrounding
commits instead.

This command requires git-when-merged, which is available from
https://github.com/mhagger/git-when-merged.

\(fn COMMIT BRANCH &optional ARGS FILES)" t nil)

(autoload 'magit-log-move-to-parent "magit-log" "\
Move to the Nth parent of the current commit.

\(fn &optional N)" t nil)
 (autoload 'magit-shortlog "magit-log" nil t)

(autoload 'magit-shortlog-since "magit-log" "\
Show a history summary for commits since REV.

\(fn REV ARGS)" t nil)

(autoload 'magit-shortlog-range "magit-log" "\
Show a history summary for commit or range REV-OR-RANGE.

\(fn REV-OR-RANGE ARGS)" t nil)

(autoload 'magit-cherry "magit-log" "\
Show commits in a branch that are not merged in the upstream branch.

\(fn HEAD UPSTREAM)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-log" '("magit-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-margin" '("magit-")))


 (autoload 'magit-merge "magit" nil t)

(autoload 'magit-merge-plain "magit-merge" "\
Merge commit REV into the current branch; using default message.

Unless there are conflicts or a prefix argument is used create a
merge commit using a generic commit message and without letting
the user inspect the result.  With a prefix argument pretend the
merge failed to give the user the opportunity to inspect the
merge.

\(git merge --no-edit|--no-commit [ARGS] REV)

\(fn REV &optional ARGS NOCOMMIT)" t nil)

(autoload 'magit-merge-editmsg "magit-merge" "\
Merge commit REV into the current branch; and edit message.
Perform the merge and prepare a commit message but let the user
edit it.

\(git merge --edit --no-ff [ARGS] REV)

\(fn REV &optional ARGS)" t nil)

(autoload 'magit-merge-nocommit "magit-merge" "\
Merge commit REV into the current branch; pretending it failed.
Pretend the merge failed to give the user the opportunity to
inspect the merge and change the commit message.

\(git merge --no-commit --no-ff [ARGS] REV)

\(fn REV &optional ARGS)" t nil)

(autoload 'magit-merge-into "magit-merge" "\
Merge the current branch into BRANCH and remove the former.

Before merging, force push the source branch to its push-remote,
provided the respective remote branch already exists, ensuring
that the respective pull-request (if any) won't get stuck on some
obsolete version of the commits that are being merged.  Finally
if `forge-branch-pullreq' was used to create the merged branch,
then also remove the respective remote branch.

\(fn BRANCH &optional ARGS)" t nil)

(autoload 'magit-merge-absorb "magit-merge" "\
Merge BRANCH into the current branch and remove the former.

Before merging, force push the source branch to its push-remote,
provided the respective remote branch already exists, ensuring
that the respective pull-request (if any) won't get stuck on some
obsolete version of the commits that are being merged.  Finally
if `forge-branch-pullreq' was used to create the merged branch,
then also remove the respective remote branch.

\(fn BRANCH &optional ARGS)" t nil)

(autoload 'magit-merge-squash "magit-merge" "\
Squash commit REV into the current branch; don't create a commit.

\(git merge --squash REV)

\(fn REV)" t nil)

(autoload 'magit-merge-preview "magit-merge" "\
Preview result of merging REV into the current branch.

\(fn REV)" t nil)

(autoload 'magit-merge-abort "magit-merge" "\
Abort the current merge operation.

\(git merge --abort)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-merge" '("magit-")))



(autoload 'magit-info "magit-mode" "\
Visit the Magit manual." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-mode" '("disable-magit-save-buffers" "magit-")))


 (autoload 'magit-notes "magit" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-notes" '("magit-notes-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-obsolete" '("magit--magit-popup-warning")))


 (autoload 'magit-patch "magit-patch" nil t)
 (autoload 'magit-patch-create "magit-patch" nil t)
 (autoload 'magit-patch-apply "magit-patch" nil t)

(autoload 'magit-patch-save "magit-patch" "\
Write current diff into patch FILE.

What arguments are used to create the patch depends on the value
of `magit-patch-save-arguments' and whether a prefix argument is
used.

If the value is the symbol `buffer', then use the same arguments
as the buffer.  With a prefix argument use no arguments.

If the value is a list beginning with the symbol `exclude', then
use the same arguments as the buffer except for those matched by
entries in the cdr of the list.  The comparison is done using
`string-prefix-p'.  With a prefix argument use the same arguments
as the buffer.

If the value is a list of strings (including the empty list),
then use those arguments.  With a prefix argument use the same
arguments as the buffer.

Of course the arguments that are required to actually show the
same differences as those shown in the buffer are always used.

\(fn FILE &optional ARG)" t nil)

(autoload 'magit-request-pull "magit-patch" "\
Request upstream to pull from your public repository.

URL is the url of your publicly accessible repository.
START is a commit that already is in the upstream repository.
END is the last commit, usually a branch name, which upstream
is asked to pull.  START has to be reachable from that commit.

\(fn URL START END)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-patch" '("magit-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-process" '("magit-" "tramp-sh-handle-")))


 (autoload 'magit-pull "magit-pull" nil t)
 (autoload 'magit-pull-from-pushremote "magit-pull" nil t)
 (autoload 'magit-pull-from-upstream "magit-pull" nil t)

(autoload 'magit-pull-branch "magit-pull" "\
Pull from a branch read in the minibuffer.

\(fn SOURCE ARGS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-pull" '("magit-pull-")))


 (autoload 'magit-push "magit-push" nil t)
 (autoload 'magit-push-current-to-pushremote "magit-push" nil t)
 (autoload 'magit-push-current-to-upstream "magit-push" nil t)

(autoload 'magit-push-current "magit-push" "\
Push the current branch to a branch read in the minibuffer.

\(fn TARGET ARGS)" t nil)

(autoload 'magit-push-other "magit-push" "\
Push an arbitrary branch or commit somewhere.
Both the source and the target are read in the minibuffer.

\(fn SOURCE TARGET ARGS)" t nil)

(autoload 'magit-push-refspecs "magit-push" "\
Push one or multiple REFSPECS to a REMOTE.
Both the REMOTE and the REFSPECS are read in the minibuffer.  To
use multiple REFSPECS, separate them with commas.  Completion is
only available for the part before the colon, or when no colon
is used.

\(fn REMOTE REFSPECS ARGS)" t nil)

(autoload 'magit-push-matching "magit-push" "\
Push all matching branches to another repository.
If multiple remotes exist, then read one from the user.
If just one exists, use that without requiring confirmation.

\(fn REMOTE &optional ARGS)" t nil)

(autoload 'magit-push-tags "magit-push" "\
Push all tags to another repository.
If only one remote exists, then push to that.  Otherwise prompt
for a remote, offering the remote configured for the current
branch as default.

\(fn REMOTE &optional ARGS)" t nil)

(autoload 'magit-push-tag "magit-push" "\
Push a tag to another repository.

\(fn TAG REMOTE &optional ARGS)" t nil)

(autoload 'magit-push-notes-ref "magit-push" "\
Push a notes ref to another repository.

\(fn REF REMOTE &optional ARGS)" t nil)
 (autoload 'magit-push-implicitly "magit-push" nil t)

(autoload 'magit-push-to-remote "magit-push" "\
Push to REMOTE without using an explicit refspec.
The REMOTE is read in the minibuffer.

This command simply runs \"git push -v [ARGS] REMOTE\".  ARGS
are the arguments specified in the popup buffer.  No refspec
arguments are used.  Instead the behavior depends on at least
these Git variables: `push.default', `remote.pushDefault',
`branch.<branch>.pushRemote', `branch.<branch>.remote',
`branch.<branch>.merge', and `remote.<remote>.push'.

\(fn REMOTE ARGS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-push" '("magit-")))



(autoload 'magit-reflog-current "magit-reflog" "\
Display the reflog of the current branch.
If `HEAD' is detached, then show the reflog for that instead." t nil)

(autoload 'magit-reflog-other "magit-reflog" "\
Display the reflog of a branch or another ref.

\(fn REF)" t nil)

(autoload 'magit-reflog-head "magit-reflog" "\
Display the `HEAD' reflog." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-reflog" '("magit-reflog-")))


 (autoload 'magit-show-refs "magit-refs" nil t)

(autoload 'magit-show-refs-head "magit-refs" "\
List and compare references in a dedicated buffer.
Compared with `HEAD'.

\(fn &optional ARGS)" t nil)

(autoload 'magit-show-refs-current "magit-refs" "\
List and compare references in a dedicated buffer.
Compare with the current branch or `HEAD' if it is detached.

\(fn &optional ARGS)" t nil)

(autoload 'magit-show-refs-other "magit-refs" "\
List and compare references in a dedicated buffer.
Compared with a branch read from the user.

\(fn &optional REF ARGS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-refs" '("magit-")))


 (autoload 'magit-remote "magit-remote" nil t)

(autoload 'magit-remote-add "magit-remote" "\
Add a remote named REMOTE and fetch it.

\(fn REMOTE URL &optional ARGS)" t nil)

(autoload 'magit-remote-rename "magit-remote" "\
Rename the remote named OLD to NEW.

\(fn OLD NEW)" t nil)

(autoload 'magit-remote-remove "magit-remote" "\
Delete the remote named REMOTE.

\(fn REMOTE)" t nil)

(autoload 'magit-remote-prune "magit-remote" "\
Remove stale remote-tracking branches for REMOTE.

\(fn REMOTE)" t nil)

(autoload 'magit-remote-prune-refspecs "magit-remote" "\
Remove stale refspecs for REMOTE.

A refspec is stale if there no longer exists at least one branch
on the remote that would be fetched due to that refspec.  A stale
refspec is problematic because its existence causes Git to refuse
to fetch according to the remaining non-stale refspecs.

If only stale refspecs remain, then offer to either delete the
remote or to replace the stale refspecs with the default refspec.

Also remove the remote-tracking branches that were created due to
the now stale refspecs.  Other stale branches are not removed.

\(fn REMOTE)" t nil)

(autoload 'magit-remote-set-head "magit-remote" "\
Set the local representation of REMOTE's default branch.
Query REMOTE and set the symbolic-ref refs/remotes/<remote>/HEAD
accordingly.  With a prefix argument query for the branch to be
used, which allows you to select an incorrect value if you fancy
doing that.

\(fn REMOTE &optional BRANCH)" t nil)

(autoload 'magit-remote-unset-head "magit-remote" "\
Unset the local representation of REMOTE's default branch.
Delete the symbolic-ref \"refs/remotes/<remote>/HEAD\".

\(fn REMOTE)" t nil)

(autoload 'magit-remote-unshallow "magit-remote" "\
Convert a shallow remote into a full one.
If only a single refspec is set and it does not contain a
wildcard, then also offer to replace it with the standard
refspec.

\(fn REMOTE)" t nil)
 (autoload 'magit-remote-configure "magit-remote" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-remote" '("magit-")))



(autoload 'magit-list-repositories "magit-repos" "\
Display a list of repositories.

Use the options `magit-repository-directories' to control which
repositories are displayed." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-repos" '("magit-")))


 (autoload 'magit-reset "magit" nil t)

(autoload 'magit-reset-mixed "magit-reset" "\
Reset the `HEAD' and index to COMMIT, but not the working tree.

\(git reset --mixed COMMIT)

\(fn COMMIT)" t nil)

(autoload 'magit-reset-soft "magit-reset" "\
Reset the `HEAD' to COMMIT, but not the index and working tree.

\(git reset --soft REVISION)

\(fn COMMIT)" t nil)

(autoload 'magit-reset-hard "magit-reset" "\
Reset the `HEAD', index, and working tree to COMMIT.

\(git reset --hard REVISION)

\(fn COMMIT)" t nil)

(autoload 'magit-reset-keep "magit-reset" "\
Reset the `HEAD' and index to COMMIT, while keeping uncommitted changes.

\(git reset --keep REVISION)

\(fn COMMIT)" t nil)

(autoload 'magit-reset-index "magit-reset" "\
Reset the index to COMMIT.
Keep the `HEAD' and working tree as-is, so if COMMIT refers to the
head this effectively unstages all changes.

\(git reset COMMIT .)

\(fn COMMIT)" t nil)

(autoload 'magit-reset-worktree "magit-reset" "\
Reset the worktree to COMMIT.
Keep the `HEAD' and index as-is.

\(fn COMMIT)" t nil)

(autoload 'magit-reset-quickly "magit-reset" "\
Reset the `HEAD' and index to COMMIT, and possibly the working tree.
With a prefix argument reset the working tree otherwise don't.

\(git reset --mixed|--hard COMMIT)

\(fn COMMIT &optional HARD)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-reset" '("magit-reset-")))



(autoload 'magit-sequencer-continue "magit-sequence" "\
Resume the current cherry-pick or revert sequence." t nil)

(autoload 'magit-sequencer-skip "magit-sequence" "\
Skip the stopped at commit during a cherry-pick or revert sequence." t nil)

(autoload 'magit-sequencer-abort "magit-sequence" "\
Abort the current cherry-pick or revert sequence.
This discards all changes made since the sequence started." t nil)
 (autoload 'magit-cherry-pick "magit-sequence" nil t)

(autoload 'magit-cherry-copy "magit-sequence" "\
Copy COMMITS from another branch onto the current branch.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then pick all of them,
without prompting.

\(fn COMMITS &optional ARGS)" t nil)

(autoload 'magit-cherry-apply "magit-sequence" "\
Apply the changes in COMMITS but do not commit them.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then apply all of them,
without prompting.

\(fn COMMITS &optional ARGS)" t nil)

(autoload 'magit-cherry-harvest "magit-sequence" "\
Move COMMITS from another BRANCH onto the current branch.
Remove the COMMITS from BRANCH and stay on the current branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

\(fn COMMITS BRANCH &optional ARGS)" t nil)

(autoload 'magit-cherry-donate "magit-sequence" "\
Move COMMITS from the current branch onto another existing BRANCH.
Remove COMMITS from the current branch and stay on that branch.
If a conflict occurs, then you have to fix that and finish the
process manually.  `HEAD' is allowed to be detached initially.

\(fn COMMITS BRANCH &optional ARGS)" t nil)

(autoload 'magit-cherry-spinout "magit-sequence" "\
Move COMMITS from the current branch onto a new BRANCH.
Remove COMMITS from the current branch and stay on that branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

\(fn COMMITS BRANCH START-POINT &optional ARGS)" t nil)

(autoload 'magit-cherry-spinoff "magit-sequence" "\
Move COMMITS from the current branch onto a new BRANCH.
Remove COMMITS from the current branch and checkout BRANCH.
If a conflict occurs, then you have to fix that and finish
the process manually.

\(fn COMMITS BRANCH START-POINT &optional ARGS)" t nil)
 (autoload 'magit-revert "magit-sequence" nil t)

(autoload 'magit-revert-and-commit "magit-sequence" "\
Revert COMMIT by creating a new commit.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then revert all of them,
without prompting.

\(fn COMMIT &optional ARGS)" t nil)

(autoload 'magit-revert-no-commit "magit-sequence" "\
Revert COMMIT by applying it in reverse to the worktree.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then revert all of them,
without prompting.

\(fn COMMIT &optional ARGS)" t nil)
 (autoload 'magit-am "magit-sequence" nil t)

(autoload 'magit-am-apply-patches "magit-sequence" "\
Apply the patches FILES.

\(fn &optional FILES ARGS)" t nil)

(autoload 'magit-am-apply-maildir "magit-sequence" "\
Apply the patches from MAILDIR.

\(fn &optional MAILDIR ARGS)" t nil)

(autoload 'magit-am-continue "magit-sequence" "\
Resume the current patch applying sequence." t nil)

(autoload 'magit-am-skip "magit-sequence" "\
Skip the stopped at patch during a patch applying sequence." t nil)

(autoload 'magit-am-abort "magit-sequence" "\
Abort the current patch applying sequence.
This discards all changes made since the sequence started." t nil)
 (autoload 'magit-rebase "magit-sequence" nil t)
 (autoload 'magit-rebase-onto-pushremote "magit-sequence" nil t)
 (autoload 'magit-rebase-onto-upstream "magit-sequence" nil t)

(autoload 'magit-rebase-branch "magit-sequence" "\
Rebase the current branch onto a branch read in the minibuffer.
All commits that are reachable from `HEAD' but not from the
selected branch TARGET are being rebased.

\(fn TARGET ARGS)" t nil)

(autoload 'magit-rebase-subset "magit-sequence" "\
Rebase a subset of the current branch's history onto a new base.
Rebase commits from START to `HEAD' onto NEWBASE.
START has to be selected from a list of recent commits.

\(fn NEWBASE START ARGS)" t nil)

(autoload 'magit-rebase-interactive "magit-sequence" "\
Start an interactive rebase sequence.

\(fn COMMIT ARGS)" t nil)

(autoload 'magit-rebase-autosquash "magit-sequence" "\
Combine squash and fixup commits with their intended targets.

\(fn ARGS)" t nil)

(autoload 'magit-rebase-edit-commit "magit-sequence" "\
Edit a single older commit using rebase.

\(fn COMMIT ARGS)" t nil)

(autoload 'magit-rebase-reword-commit "magit-sequence" "\
Reword a single older commit using rebase.

\(fn COMMIT ARGS)" t nil)

(autoload 'magit-rebase-remove-commit "magit-sequence" "\
Remove a single older commit using rebase.

\(fn COMMIT ARGS)" t nil)

(autoload 'magit-rebase-continue "magit-sequence" "\
Restart the current rebasing operation.
In some cases this pops up a commit message buffer for you do
edit.  With a prefix argument the old message is reused as-is.

\(fn &optional NOEDIT)" t nil)

(autoload 'magit-rebase-skip "magit-sequence" "\
Skip the current commit and restart the current rebase operation." t nil)

(autoload 'magit-rebase-edit "magit-sequence" "\
Edit the todo list of the current rebase operation." t nil)

(autoload 'magit-rebase-abort "magit-sequence" "\
Abort the current rebase operation, restoring the original branch." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-sequence" '("magit-")))


 (autoload 'magit-sparse-checkout "magit-sparse-checkout" nil t)

(autoload 'magit-sparse-checkout-enable "magit-sparse-checkout" "\
Convert the working tree to a sparse checkout.

\(fn &optional ARGS)" t nil)

(autoload 'magit-sparse-checkout-set "magit-sparse-checkout" "\
Restrict working tree to DIRECTORIES.
To extend rather than override the currently configured
directories, call `magit-sparse-checkout-add' instead.

\(fn DIRECTORIES)" t nil)

(autoload 'magit-sparse-checkout-add "magit-sparse-checkout" "\
Add DIRECTORIES to the working tree.
To override rather than extend the currently configured
directories, call `magit-sparse-checkout-set' instead.

\(fn DIRECTORIES)" t nil)

(autoload 'magit-sparse-checkout-reapply "magit-sparse-checkout" "\
Reapply the sparse checkout rules to the working tree.
Some operations such as merging or rebasing may need to check out
files that aren't included in the sparse checkout.  Call this
command to reset to the sparse checkout state." t nil)

(autoload 'magit-sparse-checkout-disable "magit-sparse-checkout" "\
Convert sparse checkout to full checkout.
Note that disabling the sparse checkout does not clear the
configured directories.  Call `magit-sparse-checkout-enable' to
restore the previous sparse checkout." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-sparse-checkout" '("magit-sparse-checkout-")))


 (autoload 'magit-stash "magit-stash" nil t)

(autoload 'magit-stash-both "magit-stash" "\
Create a stash of the index and working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

\(fn MESSAGE &optional INCLUDE-UNTRACKED)" t nil)

(autoload 'magit-stash-index "magit-stash" "\
Create a stash of the index only.
Unstaged and untracked changes are not stashed.  The stashed
changes are applied in reverse to both the index and the
worktree.  This command can fail when the worktree is not clean.
Applying the resulting stash has the inverse effect.

\(fn MESSAGE)" t nil)

(autoload 'magit-stash-worktree "magit-stash" "\
Create a stash of unstaged changes in the working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

\(fn MESSAGE &optional INCLUDE-UNTRACKED)" t nil)

(autoload 'magit-stash-keep-index "magit-stash" "\
Create a stash of the index and working tree, keeping index intact.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

\(fn MESSAGE &optional INCLUDE-UNTRACKED)" t nil)

(autoload 'magit-snapshot-both "magit-stash" "\
Create a snapshot of the index and working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

\(fn &optional INCLUDE-UNTRACKED)" t nil)

(autoload 'magit-snapshot-index "magit-stash" "\
Create a snapshot of the index only.
Unstaged and untracked changes are not stashed." t nil)

(autoload 'magit-snapshot-worktree "magit-stash" "\
Create a snapshot of unstaged changes in the working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

\(fn &optional INCLUDE-UNTRACKED)" t nil)
 (autoload 'magit-stash-push "magit-stash" nil t)

(autoload 'magit-stash-apply "magit-stash" "\
Apply a stash to the working tree.
Try to preserve the stash index.  If that fails because there
are staged changes, apply without preserving the stash index.

\(fn STASH)" t nil)

(autoload 'magit-stash-pop "magit-stash" "\
Apply a stash to the working tree and remove it from stash list.
Try to preserve the stash index.  If that fails because there
are staged changes, apply without preserving the stash index
and forgo removing the stash.

\(fn STASH)" t nil)

(autoload 'magit-stash-drop "magit-stash" "\
Remove a stash from the stash list.
When the region is active offer to drop all contained stashes.

\(fn STASH)" t nil)

(autoload 'magit-stash-clear "magit-stash" "\
Remove all stashes saved in REF's reflog by deleting REF.

\(fn REF)" t nil)

(autoload 'magit-stash-branch "magit-stash" "\
Create and checkout a new BRANCH from STASH.

\(fn STASH BRANCH)" t nil)

(autoload 'magit-stash-branch-here "magit-stash" "\
Create and checkout a new BRANCH and apply STASH.
The branch is created using `magit-branch-and-checkout', using the
current branch or `HEAD' as the start-point.

\(fn STASH BRANCH)" t nil)

(autoload 'magit-stash-format-patch "magit-stash" "\
Create a patch from STASH

\(fn STASH)" t nil)

(autoload 'magit-stash-list "magit-stash" "\
List all stashes in a buffer." t nil)

(autoload 'magit-stash-show "magit-stash" "\
Show all diffs of a stash in a buffer.

\(fn STASH &optional ARGS FILES)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-stash" '("magit-")))



(autoload 'magit-init "magit-status" "\
Initialize a Git repository, then show its status.

If the directory is below an existing repository, then the user
has to confirm that a new one should be created inside.  If the
directory is the root of the existing repository, then the user
has to confirm that it should be reinitialized.

Non-interactively DIRECTORY is (re-)initialized unconditionally.

\(fn DIRECTORY)" t nil)

(autoload 'magit-status "magit-status" "\
Show the status of the current Git repository in a buffer.

If the current directory isn't located within a Git repository,
then prompt for an existing repository or an arbitrary directory,
depending on option `magit-repository-directories', and show the
status of the selected repository instead.

* If that option specifies any existing repositories, then offer
  those for completion and show the status buffer for the
  selected one.

* Otherwise read an arbitrary directory using regular file-name
  completion.  If the selected directory is the top-level of an
  existing working tree, then show the status buffer for that.

* Otherwise offer to initialize the selected directory as a new
  repository.  After creating the repository show its status
  buffer.

These fallback behaviors can also be forced using one or more
prefix arguments:

* With two prefix arguments (or more precisely a numeric prefix
  value of 16 or greater) read an arbitrary directory and act on
  it as described above.  The same could be accomplished using
  the command `magit-init'.

* With a single prefix argument read an existing repository, or
  if none can be found based on `magit-repository-directories',
  then fall back to the same behavior as with two prefix
  arguments.

\(fn &optional DIRECTORY CACHE)" t nil)

(defalias 'magit #'magit-status "\
An alias for `magit-status' for better discoverability.

Instead of invoking this alias for `magit-status' using
\"M-x magit RET\", you should bind a key to `magit-status'
and read the info node `(magit)Getting Started', which
also contains other useful hints.")

(autoload 'magit-status-here "magit-status" "\
Like `magit-status' but with non-nil `magit-status-goto-file-position'." t nil)

(autoload 'magit-status-quick "magit-status" "\
Show the status of the current Git repository, maybe without refreshing.

If the status buffer of the current Git repository exists but
isn't being displayed in the selected frame, then display it
without refreshing it.

If the status buffer is being displayed in the selected frame,
then also refresh it.

Prefix arguments have the same meaning as for `magit-status',
and additionally cause the buffer to be refresh.

To use this function instead of `magit-status', add this to your
init file: (global-set-key (kbd \"C-x g\") 'magit-status-quick)." t nil)

(autoload 'magit-status-setup-buffer "magit-status" "\


\(fn &optional DIRECTORY)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-status" '("magit-")))


 (autoload 'magit-submodule "magit-submodule" nil t)
 (autoload 'magit-submodule-add "magit-submodule" nil t)

(autoload 'magit-submodule-read-name-for-path "magit-submodule" "\


\(fn PATH &optional PREFER-SHORT)" nil nil)
 (autoload 'magit-submodule-register "magit-submodule" nil t)
 (autoload 'magit-submodule-populate "magit-submodule" nil t)
 (autoload 'magit-submodule-update "magit-submodule" nil t)
 (autoload 'magit-submodule-synchronize "magit-submodule" nil t)
 (autoload 'magit-submodule-unpopulate "magit-submodule" nil t)

(autoload 'magit-submodule-remove "magit-submodule" "\
Unregister MODULES and remove their working directories.

For safety reasons, do not remove the gitdirs and if a module has
uncommitted changes, then do not remove it at all.  If a module's
gitdir is located inside the working directory, then move it into
the gitdir of the superproject first.

With the \"--force\" argument offer to remove dirty working
directories and with a prefix argument offer to delete gitdirs.
Both actions are very dangerous and have to be confirmed.  There
are additional safety precautions in place, so you might be able
to recover from making a mistake here, but don't count on it.

\(fn MODULES ARGS TRASH-GITDIRS)" t nil)

(autoload 'magit-insert-modules "magit-submodule" "\
Insert submodule sections.
Hook `magit-module-sections-hook' controls which module sections
are inserted, and option `magit-module-sections-nested' controls
whether they are wrapped in an additional section." nil nil)

(autoload 'magit-insert-modules-overview "magit-submodule" "\
Insert sections for all modules.
For each section insert the path and the output of `git describe --tags',
or, failing that, the abbreviated HEAD commit hash." nil nil)

(autoload 'magit-insert-modules-unpulled-from-upstream "magit-submodule" "\
Insert sections for modules that haven't been pulled from the upstream.
These sections can be expanded to show the respective commits." nil nil)

(autoload 'magit-insert-modules-unpulled-from-pushremote "magit-submodule" "\
Insert sections for modules that haven't been pulled from the push-remote.
These sections can be expanded to show the respective commits." nil nil)

(autoload 'magit-insert-modules-unpushed-to-upstream "magit-submodule" "\
Insert sections for modules that haven't been pushed to the upstream.
These sections can be expanded to show the respective commits." nil nil)

(autoload 'magit-insert-modules-unpushed-to-pushremote "magit-submodule" "\
Insert sections for modules that haven't been pushed to the push-remote.
These sections can be expanded to show the respective commits." nil nil)

(autoload 'magit-list-submodules "magit-submodule" "\
Display a list of the current repository's submodules." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-submodule" '("magit-")))


 (autoload 'magit-subtree "magit-subtree" nil t)
 (autoload 'magit-subtree-import "magit-subtree" nil t)
 (autoload 'magit-subtree-export "magit-subtree" nil t)

(autoload 'magit-subtree-add "magit-subtree" "\
Add REF from REPOSITORY as a new subtree at PREFIX.

\(fn PREFIX REPOSITORY REF ARGS)" t nil)

(autoload 'magit-subtree-add-commit "magit-subtree" "\
Add COMMIT as a new subtree at PREFIX.

\(fn PREFIX COMMIT ARGS)" t nil)

(autoload 'magit-subtree-merge "magit-subtree" "\
Merge COMMIT into the PREFIX subtree.

\(fn PREFIX COMMIT ARGS)" t nil)

(autoload 'magit-subtree-pull "magit-subtree" "\
Pull REF from REPOSITORY into the PREFIX subtree.

\(fn PREFIX REPOSITORY REF ARGS)" t nil)

(autoload 'magit-subtree-push "magit-subtree" "\
Extract the history of the subtree PREFIX and push it to REF on REPOSITORY.

\(fn PREFIX REPOSITORY REF ARGS)" t nil)

(autoload 'magit-subtree-split "magit-subtree" "\
Extract the history of the subtree PREFIX.

\(fn PREFIX COMMIT ARGS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-subtree" '("magit-")))


 (autoload 'magit-tag "magit" nil t)

(autoload 'magit-tag-create "magit-tag" "\
Create a new tag with the given NAME at REV.
With a prefix argument annotate the tag.

\(git tag [--annotate] NAME REV)

\(fn NAME REV &optional ARGS)" t nil)

(autoload 'magit-tag-delete "magit-tag" "\
Delete one or more tags.
If the region marks multiple tags (and nothing else), then offer
to delete those, otherwise prompt for a single tag to be deleted,
defaulting to the tag at point.

\(git tag -d TAGS)

\(fn TAGS)" t nil)

(autoload 'magit-tag-prune "magit-tag" "\
Offer to delete tags missing locally from REMOTE, and vice versa.

\(fn TAGS REMOTE-TAGS REMOTE)" t nil)

(autoload 'magit-tag-release "magit-tag" "\
Create a release tag for `HEAD'.

Assume that release tags match `magit-release-tag-regexp'.

If `HEAD's message matches `magit-release-commit-regexp', then
base the tag on the version string specified by that.  Otherwise
prompt for the name of the new tag using the highest existing
tag as initial input and leaving it to the user to increment the
desired part of the version string.

If `--annotate' is enabled, then prompt for the message of the
new tag.  Base the proposed tag message on the message of the
highest tag, provided that that contains the corresponding
version string and substituting the new version string for that.
Otherwise propose something like \"Foo-Bar 1.2.3\", given, for
example, a TAG \"v1.2.3\" and a repository located at something
like \"/path/to/foo-bar\".

\(fn TAG MSG &optional ARGS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-tag" '("magit-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-transient" '("magit-")))



(defvar magit-wip-mode nil "\
Non-nil if Magit-Wip mode is enabled.
See the `magit-wip-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-wip-mode'.")

(custom-autoload 'magit-wip-mode "magit-wip" nil)

(autoload 'magit-wip-mode "magit-wip" "\
Save uncommitted changes to work-in-progress refs.

If called interactively, enable Magit-Wip mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Whenever appropriate (i.e. when dataloss would be a possibility
otherwise) this mode causes uncommitted changes to be committed
to dedicated work-in-progress refs.

For historic reasons this mode is implemented on top of four
other `magit-wip-*' modes, which can also be used individually,
if you want finer control over when the wip refs are updated;
but that is discouraged.

\(fn &optional ARG)" t nil)

(put 'magit-wip-after-save-mode 'globalized-minor-mode t)

(defvar magit-wip-after-save-mode nil "\
Non-nil if Magit-Wip-After-Save mode is enabled.
See the `magit-wip-after-save-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-wip-after-save-mode'.")

(custom-autoload 'magit-wip-after-save-mode "magit-wip" nil)

(autoload 'magit-wip-after-save-mode "magit-wip" "\
Toggle Magit-Wip-After-Save-Local mode in all buffers.
With prefix ARG, enable Magit-Wip-After-Save mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Magit-Wip-After-Save-Local mode is enabled in all buffers where
`magit-wip-after-save-local-mode-turn-on' would do it.
See `magit-wip-after-save-local-mode' for more information on Magit-Wip-After-Save-Local mode.

\(fn &optional ARG)" t nil)

(defvar magit-wip-after-apply-mode nil "\
Non-nil if Magit-Wip-After-Apply mode is enabled.
See the `magit-wip-after-apply-mode' command
for a description of this minor mode.")

(custom-autoload 'magit-wip-after-apply-mode "magit-wip" nil)

(autoload 'magit-wip-after-apply-mode "magit-wip" "\
Commit to work-in-progress refs.

If called interactively, enable Magit-Wip-After-Apply mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

After applying a change using any \"apply variant\"
command (apply, stage, unstage, discard, and reverse) commit the
affected files to the current wip refs.  For each branch there
may be two wip refs; one contains snapshots of the files as found
in the worktree and the other contains snapshots of the entries
in the index.

\(fn &optional ARG)" t nil)

(defvar magit-wip-before-change-mode nil "\
Non-nil if Magit-Wip-Before-Change mode is enabled.
See the `magit-wip-before-change-mode' command
for a description of this minor mode.")

(custom-autoload 'magit-wip-before-change-mode "magit-wip" nil)

(autoload 'magit-wip-before-change-mode "magit-wip" "\
Commit to work-in-progress refs before certain destructive changes.

If called interactively, enable Magit-Wip-Before-Change mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

Before invoking a revert command or an \"apply variant\"
command (apply, stage, unstage, discard, and reverse) commit the
affected tracked files to the current wip refs.  For each branch
there may be two wip refs; one contains snapshots of the files
as found in the worktree and the other contains snapshots of the
entries in the index.

Only changes to files which could potentially be affected by the
command which is about to be called are committed.

\(fn &optional ARG)" t nil)

(autoload 'magit-wip-commit-initial-backup "magit-wip" "\
Before saving, commit current file to a worktree wip ref.

The user has to add this function to `before-save-hook'.

Commit the current state of the visited file before saving the
current buffer to that file.  This backs up the same version of
the file as `backup-buffer' would, but stores the backup in the
worktree wip ref, which is also used by the various Magit Wip
modes, instead of in a backup file as `backup-buffer' would.

This function ignores the variables that affect `backup-buffer'
and can be used along-side that function, which is recommended
because this function only backs up files that are tracked in
a Git repository." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-wip" '("magit-")))


 (autoload 'magit-worktree "magit-worktree" nil t)

(autoload 'magit-worktree-checkout "magit-worktree" "\
Checkout BRANCH in a new worktree at PATH.

\(fn PATH BRANCH)" t nil)

(autoload 'magit-worktree-branch "magit-worktree" "\
Create a new BRANCH and check it out in a new worktree at PATH.

\(fn PATH BRANCH START-POINT &optional FORCE)" t nil)

(autoload 'magit-worktree-move "magit-worktree" "\
Move WORKTREE to PATH.

\(fn WORKTREE PATH)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-worktree" '("magit-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/magit-svn-20210426.2114/magit-svn-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/magit-svn-20210426.2114/magit-svn-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/magit-svn-20210426.2114/magit-svn-autoloads.el") (car load-path))))



(autoload 'magit-svn-show-commit "magit-svn" "\
Show the Git commit for a Svn revision read from the user.
With a prefix argument also read a branch to search in.

\(fn REV &optional BRANCH)" t nil)

(autoload 'magit-svn-create-branch "magit-svn" "\
Create svn branch NAME.

\(git svn branch [--dry-run] NAME)

\(fn NAME &optional ARGS)" t nil)

(autoload 'magit-svn-create-tag "magit-svn" "\
Create svn tag NAME.

\(git svn tag [--dry-run] NAME)

\(fn NAME &optional ARGS)" t nil)

(autoload 'magit-svn-rebase "magit-svn" "\
Fetch revisions from Svn and rebase the current Git commits.

\(git svn rebase [--dry-run])

\(fn &optional ARGS)" t nil)

(autoload 'magit-svn-dcommit "magit-svn" "\
Run git-svn dcommit.

\(git svn dcommit [--dry-run])

\(fn &optional ARGS)" t nil)

(autoload 'magit-svn-fetch "magit-svn" "\
Fetch revisions from Svn updating the tracking branches.

\(git svn fetch)" t nil)

(autoload 'magit-svn-fetch-externals "magit-svn" "\
Fetch and rebase all external repositories.
Loops through all external repositories found
in `magit-svn-external-directories' and runs
`git svn rebase' on each of them." t nil)

(autoload 'magit-svn-mode "magit-svn" "\
Git-Svn support for Magit.

If called interactively, enable Magit-Svn mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(custom-add-option 'magit-mode-hook #'magit-svn-mode)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-svn" '("magit-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/magit-popup-20200719.1015/magit-popup-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/magit-popup-20200719.1015/magit-popup-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/magit-popup-20200719.1015/magit-popup-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-popup" '("magit-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/magit-patch-changelog-20220313.1229/magit-patch-changelog-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/magit-patch-changelog-20220313.1229/magit-patch-changelog-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/magit-patch-changelog-20220313.1229/magit-patch-changelog-autoloads.el") (car load-path))))



(autoload 'magit-patch-changelog-create "magit-patch-changelog" "\
Compress commits from current branch to master.

ARGS are `transient-args' from `magit-patch-create'.
Limit patch to FILES, if non-nil.

\(fn ARGS FILES)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-patch-changelog" '("magit-patch-changelog-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/magit-delta-20220125.50/magit-delta-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/magit-delta-20220125.50/magit-delta-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/magit-delta-20220125.50/magit-delta-autoloads.el") (car load-path))))



(autoload 'magit-delta-mode "magit-delta" "\
Use Delta when displaying diffs in Magit.

If called interactively, enable Magit-Delta mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

https://github.com/dandavison/delta

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "magit-delta" '("magit-delta-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/lua-mode-20210809.1320/lua-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/lua-mode-20210809.1320/lua-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/lua-mode-20210809.1320/lua-mode-autoloads.el") (car load-path))))



(autoload 'lua-mode "lua-mode" "\
Major mode for editing Lua code.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.lua\\'" . lua-mode))

(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))

(defalias 'run-lua #'lua-start-process)

(autoload 'lua-start-process "lua-mode" "\
Start a Lua process named NAME, running PROGRAM.
PROGRAM defaults to NAME, which defaults to `lua-default-application'.
When called interactively, switch to the process buffer.

\(fn &optional NAME PROGRAM STARTFILE &rest SWITCHES)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lua-mode" '("lua-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/lsp-mode-20220405.1024/lsp-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/lsp-mode-20220405.1024/lsp-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/lsp-mode-20220405.1024/lsp-mode-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-actionscript" '("lsp-actionscript-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ada" '("lsp-ada-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-angular" '("lsp-client")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ansible" '("lsp-ansible-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-bash" '("lsp-bash-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-beancount" '("lsp-beancount-")))



(autoload 'lsp-cpp-flycheck-clang-tidy-error-explainer "lsp-clangd" "\
Explain a clang-tidy ERROR by scraping documentation from llvm.org.

\(fn ERROR)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-clangd" '("lsp-c")))



(autoload 'lsp-clojure-show-test-tree "lsp-clojure" "\
Show a test tree and focus on it if IGNORE-FOCUS? is nil.

\(fn IGNORE-FOCUS\\=\\?)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-clojure" '("lsp-clojure-")))



(define-obsolete-variable-alias 'lsp-prefer-capf 'lsp-completion-provider "lsp-mode 7.0.1")

(define-obsolete-variable-alias 'lsp-enable-completion-at-point 'lsp-completion-enable "lsp-mode 7.0.1")

(autoload 'lsp-completion-at-point "lsp-completion" "\
Get lsp completions." nil nil)

(autoload 'lsp-completion--enable "lsp-completion" "\
Enable LSP completion support." nil nil)

(autoload 'lsp-completion-mode "lsp-completion" "\
Toggle LSP completion support.

If called interactively, enable Lsp-Completion mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(add-hook 'lsp-configure-hook (lambda nil (when (and lsp-auto-configure lsp-completion-enable) (lsp-completion--enable))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-completion" '("lsp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-crystal" '("lsp-clients-crystal-executable")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-csharp" '("lsp-csharp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-css" '("lsp-css-")))



(define-obsolete-variable-alias 'lsp-diagnostic-package 'lsp-diagnostics-provider "lsp-mode 7.0.1")

(define-obsolete-variable-alias 'lsp-flycheck-default-level 'lsp-diagnostics-flycheck-default-level "lsp-mode 7.0.1")

(autoload 'lsp-diagnostics-lsp-checker-if-needed "lsp-diagnostics" nil nil nil)

(autoload 'lsp-diagnostics--enable "lsp-diagnostics" "\
Enable LSP checker support." nil nil)

(autoload 'lsp-diagnostics-mode "lsp-diagnostics" "\
Toggle LSP diagnostics integration.

If called interactively, enable Lsp-Diagnostics mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(add-hook 'lsp-configure-hook (lambda nil (when lsp-auto-configure (lsp-diagnostics--enable))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-diagnostics" '("lsp-diagnostics-")))



(defvar lsp-dired-mode nil "\
Non-nil if Lsp-Dired mode is enabled.
See the `lsp-dired-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `lsp-dired-mode'.")

(custom-autoload 'lsp-dired-mode "lsp-dired" nil)

(autoload 'lsp-dired-mode "lsp-dired" "\
Display `lsp-mode' icons for each file in a dired buffer.

If called interactively, enable Lsp-Dired mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-dired" '("lsp-dired-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-dockerfile" '("lsp-dockerfile-language-server-command")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-elixir" '("lsp-elixir-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-elm" '("lsp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-emmet" '("lsp-emmet-ls-command")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-erlang" '("lsp-erlang-server-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-eslint" '("lsp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-fortran" '("lsp-clients-")))



(autoload 'lsp-fsharp--workspace-load "lsp-fsharp" "\
Load all of the provided PROJECTS.

\(fn PROJECTS)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-fsharp" '("lsp-fsharp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-gdscript" '("lsp-gdscript-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-go" '("lsp-go-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-graphql" '("lsp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-groovy" '("lsp-groovy-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-hack" '("lsp-clients-hack-command")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-haxe" '("lsp-")))



(autoload 'lsp-headerline-breadcrumb-mode "lsp-headerline" "\
Toggle breadcrumb on headerline.

If called interactively, enable Lsp-Headerline-Breadcrumb mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'lsp-breadcrumb-go-to-symbol "lsp-headerline" "\
Go to the symbol on breadcrumb at SYMBOL-POSITION.

\(fn SYMBOL-POSITION)" t nil)

(autoload 'lsp-breadcrumb-narrow-to-symbol "lsp-headerline" "\
Narrow to the symbol range on breadcrumb at SYMBOL-POSITION.

\(fn SYMBOL-POSITION)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-headerline" '("lsp-headerline-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-html" '("lsp-html-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-icons" '("lsp-")))



(autoload 'lsp-ido-workspace-symbol "lsp-ido" "\
`ido' for lsp workspace/symbol.
When called with prefix ARG the default selection will be symbol at point.

\(fn ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ido" '("lsp-ido-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-idris" '("lsp-idris2-lsp-")))



(autoload 'lsp-iedit-highlights "lsp-iedit" "\
Start an `iedit' operation on the documentHighlights at point.
This can be used as a primitive `lsp-rename' replacement if the
language server doesn't support renaming.

See also `lsp-enable-symbol-highlighting'." t nil)

(autoload 'lsp-iedit-linked-ranges "lsp-iedit" "\
Start an `iedit' for `textDocument/linkedEditingRange'" t nil)

(autoload 'lsp-evil-multiedit-highlights "lsp-iedit" "\
Start an `evil-multiedit' operation on the documentHighlights at point.
This can be used as a primitive `lsp-rename' replacement if the
language server doesn't support renaming.

See also `lsp-enable-symbol-highlighting'." t nil)

(autoload 'lsp-evil-multiedit-linked-ranges "lsp-iedit" "\
Start an `evil-multiedit' for `textDocument/linkedEditingRange'" t nil)

(autoload 'lsp-evil-state-highlights "lsp-iedit" "\
Start `iedit-mode'. for `textDocument/documentHighlight'" t nil)

(autoload 'lsp-evil-state-linked-ranges "lsp-iedit" "\
Start `iedit-mode'. for `textDocument/linkedEditingRange'" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-iedit" '("lsp-iedit--on-ranges")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-javascript" '("lsp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-json" '("lsp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-kotlin" '("lsp-")))



(autoload 'lsp-lens--enable "lsp-lens" "\
Enable lens mode." nil nil)

(autoload 'lsp-lens-show "lsp-lens" "\
Display lenses in the buffer." t nil)

(autoload 'lsp-lens-hide "lsp-lens" "\
Delete all lenses." t nil)

(autoload 'lsp-lens-mode "lsp-lens" "\
Toggle code-lens overlays.

If called interactively, enable Lsp-Lens mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'lsp-avy-lens "lsp-lens" "\
Click lsp lens using `avy' package." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-lens" '("lsp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-lua" '("lsp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-magik" '("lsp-magik-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-markdown" '("lsp-markdown-")))


(put 'lsp-enable-file-watchers 'safe-local-variable #'booleanp)
(put 'lsp-file-watch-ignored-directories 'safe-local-variable 'lsp--string-listp)
(put 'lsp-file-watch-ignored-files 'safe-local-variable 'lsp--string-listp)
(put 'lsp-file-watch-threshold 'safe-local-variable (lambda (i) (or (numberp i) (not i))))

(autoload 'lsp--string-listp "lsp-mode" "\
Return t if all elements of SEQUENCE are strings, else nil.

\(fn SEQUENCE)" nil nil)

(autoload 'lsp-load-vscode-workspace "lsp-mode" "\
Load vscode workspace from FILE

\(fn FILE)" t nil)

(autoload 'lsp-save-vscode-workspace "lsp-mode" "\
Save vscode workspace to FILE

\(fn FILE)" t nil)

(autoload 'lsp-install-server "lsp-mode" "\
Interactively install or re-install server.
When prefix UPDATE? is t force installation even if the server is present.

\(fn UPDATE\\=\\? &optional SERVER-ID)" t nil)

(autoload 'lsp-update-server "lsp-mode" "\
Interactively update a server.

\(fn &optional SERVER-ID)" t nil)

(autoload 'lsp-ensure-server "lsp-mode" "\
Ensure server SERVER-ID

\(fn SERVER-ID)" nil nil)

(autoload 'lsp "lsp-mode" "\
Entry point for the server startup.
When ARG is t the lsp mode will start new language server even if
there is language server which can handle current language. When
ARG is nil current file will be opened in multi folder language
server if there is such. When `lsp' is called with prefix
argument ask the user to select which language server to start.

\(fn &optional ARG)" t nil)

(autoload 'lsp-deferred "lsp-mode" "\
Entry point that defers server startup until buffer is visible.
`lsp-deferred' will wait until the buffer is visible before invoking `lsp'.
This avoids overloading the server with many files when starting Emacs." nil nil)

(autoload 'lsp-start-plain "lsp-mode" "\
Start `lsp-mode' using mininal configuration using the latest `melpa' version of the packages.

In case the major-mode that you are using for " t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-mode" '("defcustom-lsp" "lsp-" "make-lsp-client" "when-lsp-workspace" "with-lsp-workspace")))



(define-obsolete-variable-alias 'lsp-diagnostics-modeline-scope 'lsp-modeline-diagnostics-scope "lsp-mode 7.0.1")

(autoload 'lsp-modeline-code-actions-mode "lsp-modeline" "\
Toggle code actions on modeline.

If called interactively, enable Lsp-Modeline-Code-Actions mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(define-obsolete-function-alias 'lsp-diagnostics-modeline-mode 'lsp-modeline-diagnostics-mode "lsp-mode 7.0.1")

(autoload 'lsp-modeline-diagnostics-mode "lsp-modeline" "\
Toggle diagnostics modeline.

If called interactively, enable Lsp-Modeline-Diagnostics mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'lsp-modeline-workspace-status-mode "lsp-modeline" "\
Toggle workspace status on modeline.

If called interactively, enable Lsp-Modeline-Workspace-Status
mode if ARG is positive, and disable it if ARG is zero or
negative.  If called from Lisp, also enable the mode if ARG is
omitted or nil, and toggle it if ARG is `toggle'; disable the
mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-modeline" '("lsp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-nginx" '("lsp-nginx-server-command")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-nim" '("lsp-nim-nimsuggest-mapping")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-nix" '("lsp-nix-server-path")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ocaml" '("lsp-ocaml-l")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-openscad" '("lsp-openscad-server")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-perl" '("lsp-perl-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-perlnavigator" '("lsp-perlnavigator-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-php" '("lsp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-prolog" '("lsp-prolog-server-command")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-protocol" '("dash-expand:&RangeToPoint" "lsp")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-purescript" '("lsp-purescript-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-pwsh" '("lsp-pwsh-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-pyls" '("lsp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-pylsp" '("lsp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-r" '("lsp-clients-r-server-command")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-racket" '("lsp-racket-lang")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-remark" '("lsp-remark-server-command")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-rf" '("expand-start-command" "lsp-rf-language-server-" "parse-rf-language-server-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-rust" '("lsp-")))



(autoload 'lsp--semantic-tokens-initialize-buffer "lsp-semantic-tokens" "\
Initialize the buffer for semantic tokens.
IS-RANGE-PROVIDER is non-nil when server supports range requests." nil nil)

(autoload 'lsp--semantic-tokens-initialize-workspace "lsp-semantic-tokens" "\
Initialize semantic tokens for WORKSPACE.

\(fn WORKSPACE)" nil nil)

(autoload 'lsp-semantic-tokens--warn-about-deprecated-setting "lsp-semantic-tokens" "\
Warn about deprecated semantic highlighting variable." nil nil)

(autoload 'lsp-semantic-tokens--enable "lsp-semantic-tokens" "\
Enable semantic tokens mode." nil nil)

(autoload 'lsp-semantic-tokens-mode "lsp-semantic-tokens" "\
Toggle semantic-tokens support.

If called interactively, enable Lsp-Semantic-Tokens mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-semantic-tokens" '("lsp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-solargraph" '("lsp-solargraph-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-sorbet" '("lsp-sorbet-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-sqls" '("lsp-sql")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-steep" '("lsp-steep-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-svelte" '("lsp-svelte-plugin-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-terraform" '("lsp-terraform-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-tex" '("lsp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-toml" '("lsp-toml-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ttcn3" '("lsp-ttcn3-lsp-server-command")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-typeprof" '("lsp-typeprof-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-v" '("lsp-v-vls-executable")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-vala" '("lsp-clients-vala-ls-executable")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-verilog" '("lsp-clients-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-vetur" '("lsp-vetur-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-vhdl" '("ghdl-ls-bin-name" "hdl-checker-bin-name" "lsp-vhdl-" "vhdl-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-vimscript" '("lsp-clients-vim-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-volar" '("lsp-volar-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-xml" '("lsp-xml-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-yaml" '("lsp-yaml-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-zig" '("lsp-zig-zls-executable")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/lsp-ui-20220311.1634/lsp-ui-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/lsp-ui-20220311.1634/lsp-ui-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/lsp-ui-20220311.1634/lsp-ui-autoloads.el") (car load-path))))



(autoload 'lsp-ui-mode "lsp-ui" "\
Toggle language server UI mode on or off.
‘lsp-ui-mode’ is a minor mode that contains a series of useful UI
integrations for ‘lsp-mode’.  With a prefix argument ARG, enable
language server UI mode if ARG is positive, and disable it
otherwise.  If called from Lisp, enable the mode if ARG is
omitted or nil, and toggle it if ARG is ‘toggle’.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ui" '("lsp-ui-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ui-doc" '("lsp-ui-doc-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ui-flycheck" '("lsp-ui-flycheck-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ui-imenu" '("lsp-ui-imenu")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ui-peek" '("lsp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ui-sideline" '("lsp-ui-sideline")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ui-util" '("lsp-ui-util-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/lsp-treemacs-20220328.625/lsp-treemacs-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/lsp-treemacs-20220328.625/lsp-treemacs-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/lsp-treemacs-20220328.625/lsp-treemacs-autoloads.el") (car load-path))))



(autoload 'lsp-treemacs-symbols "lsp-treemacs" "\
Show symbols view." t nil)

(autoload 'lsp-treemacs-java-deps-list "lsp-treemacs" "\
Display java dependencies." t nil)

(autoload 'lsp-treemacs-java-deps-follow "lsp-treemacs" nil t nil)

(defvar lsp-treemacs-sync-mode nil "\
Non-nil if Lsp-Treemacs-Sync mode is enabled.
See the `lsp-treemacs-sync-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `lsp-treemacs-sync-mode'.")

(custom-autoload 'lsp-treemacs-sync-mode "lsp-treemacs" nil)

(autoload 'lsp-treemacs-sync-mode "lsp-treemacs" "\
Global minor mode for synchronizing lsp-mode workspace folders and treemacs projects.

If called interactively, enable Lsp-Treemacs-Sync mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'lsp-treemacs-references "lsp-treemacs" "\
Show the references for the symbol at point.
With a prefix argument, select the new window and expand the tree of references automatically.

\(fn ARG)" t nil)

(autoload 'lsp-treemacs-implementations "lsp-treemacs" "\
Show the implementations for the symbol at point.
With a prefix argument, select the new window expand the tree of implementations automatically.

\(fn ARG)" t nil)

(autoload 'lsp-treemacs-call-hierarchy "lsp-treemacs" "\
Show the incoming call hierarchy for the symbol at point.
With a prefix argument, show the outgoing call hierarchy.

\(fn OUTGOING)" t nil)

(autoload 'lsp-treemacs-type-hierarchy "lsp-treemacs" "\
Show the type hierarchy for the symbol at point.
With prefix 0 show sub-types.
With prefix 1 show super-types.
With prefix 2 show both.

\(fn DIRECTION)" t nil)

(autoload 'lsp-treemacs-errors-list "lsp-treemacs" nil t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-treemacs" '("lsp-treemacs-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-treemacs-themes" '("lsp-treemacs-theme")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/lsp-origami-20211016.1045/lsp-origami-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/lsp-origami-20211016.1045/lsp-origami-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/lsp-origami-20211016.1045/lsp-origami-autoloads.el") (car load-path))))



(autoload 'lsp-origami-try-enable "lsp-origami" "\
Turn on `origami-mode' locally and try to enable `lsp-origami-mode'." t nil)

(autoload 'lsp-origami-mode "lsp-origami" "\
Toggle code folding support for origami.

If called interactively, enable Lsp-Origami mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-origami" '("lsp-origami--")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/lsp-latex-20210815.1426/lsp-latex-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/lsp-latex-20210815.1426/lsp-latex-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/lsp-latex-20210815.1426/lsp-latex-autoloads.el") (car load-path))))



(autoload 'lsp-latex-forward-search-with-pdf-tools "lsp-latex" "\
Forward search with pdf-tools, from TEX-FILE line LINE to PDF-FILE.
This function is partially copied from
`pdf-sync-forward-search' and `pdf-sync-forward-correlate'.

\(fn TEX-FILE PDF-FILE LINE)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-latex" '("lsp-latex-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/bui-20210108.1141/bui-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/bui-20210108.1141/bui-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/bui-20210108.1141/bui-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bui" '("bui-define-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bui-button" '("bui")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bui-core" '("bui-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bui-entry" '("bui-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bui-history" '("bui-history")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bui-info" '("bui-info-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bui-list" '("bui-list-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bui-utils" '("bui-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/dap-mode-20220325.1144/dap-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/dap-mode-20220325.1144/dap-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/dap-mode-20220325.1144/dap-mode-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-chrome" '("dap-chrome-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-codelldb" '("dap-codelldb-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-cpptools" '("dap-cpptools-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-edge" '("dap-edge-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-elixir" '("dap-elixir--populate-start-file-args")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-erlang" '("dap-erlang--populate-start-file-args")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-firefox" '("dap-firefox-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-gdb-lldb" '("dap-gdb-lldb-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-go" '("dap-go-")))



(autoload 'dap-hydra "dap-hydra" "\
Run `dap-hydra/body'." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-hydra" '("dap-hydra")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-launch" '("dap-launch-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-lldb" '("dap-lldb-")))



(autoload 'dap-debug "dap-mode" "\
Run debug configuration DEBUG-ARGS.

If DEBUG-ARGS is not specified the configuration is generated
after selecting configuration template.

:dap-compilation specifies a shell command to be run using
`compilation-start' before starting the debug session. It could
be used to compile the project, spin up docker, ....

\(fn DEBUG-ARGS)" t nil)

(defvar dap-mode nil "\
Non-nil if Dap mode is enabled.
See the `dap-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dap-mode'.")

(custom-autoload 'dap-mode "dap-mode" nil)

(autoload 'dap-mode "dap-mode" "\
Global minor mode for DAP mode.

If called interactively, enable Dap mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(defvar dap-auto-configure-mode nil "\
Non-nil if Dap-Auto-Configure mode is enabled.
See the `dap-auto-configure-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dap-auto-configure-mode'.")

(custom-autoload 'dap-auto-configure-mode "dap-mode" nil)

(autoload 'dap-auto-configure-mode "dap-mode" "\
Auto configure dap minor mode.

If called interactively, enable Dap-Auto-Configure mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-mode" '("dap-")))



(defvar dap-tooltip-mode nil "\
Non-nil if Dap-Tooltip mode is enabled.
See the `dap-tooltip-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dap-tooltip-mode'.")

(custom-autoload 'dap-tooltip-mode "dap-mouse" nil)

(autoload 'dap-tooltip-mode "dap-mouse" "\
Toggle the display of GUD tooltips.

If called interactively, enable Dap-Tooltip mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-mouse" '("dap-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-netcore" '("dap-netcore-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-node" '("dap-node-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-overlays" '("dap-overlays-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-php" '("dap-php-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-pwsh" '("dap-pwsh-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-python" '("dap-python-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-ruby" '("dap-ruby-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-swi-prolog" '("dap-swi-prolog-")))



(defvar dap-ui-mode nil "\
Non-nil if Dap-Ui mode is enabled.
See the `dap-ui-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dap-ui-mode'.")

(custom-autoload 'dap-ui-mode "dap-ui" nil)

(autoload 'dap-ui-mode "dap-ui" "\
Displaying DAP visuals.

If called interactively, enable Dap-Ui mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'dap-ui-breakpoints-list "dap-ui" "\
List breakpoints." t nil)

(defvar dap-ui-controls-mode nil "\
Non-nil if Dap-Ui-Controls mode is enabled.
See the `dap-ui-controls-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dap-ui-controls-mode'.")

(custom-autoload 'dap-ui-controls-mode "dap-ui" nil)

(autoload 'dap-ui-controls-mode "dap-ui" "\
Displaying DAP visuals.

If called interactively, enable Dap-Ui-Controls mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'dap-ui-sessions "dap-ui" "\
Show currently active sessions." t nil)

(autoload 'dap-ui-locals "dap-ui" nil t nil)

(autoload 'dap-ui-show-many-windows "dap-ui" "\
Show auto configured feature windows." t nil)

(autoload 'dap-ui-hide-many-windows "dap-ui" "\
Hide all debug windows when sessions are dead." t nil)

(autoload 'dap-ui-repl "dap-ui" "\
Start an adapter-specific REPL.
This could be used to evaluate JavaScript in a browser, to
evaluate python in the context of the debugee, ...." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-ui" '("dap-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-unity" '("dap-unity-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-utils" '("dap-utils-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-variables" '("dap-variables-")))



(autoload 'dapui-loaded-sources "dapui" nil t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dapui" '("dapui-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/lsp-java-20220325.547/lsp-java-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/lsp-java-20220325.547/lsp-java-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/lsp-java-20220325.547/lsp-java-autoloads.el") (car load-path))))


(with-eval-after-load 'lsp-java (require 'dap-java))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dap-java" '("dap-java-")))



(autoload 'lsp-java-lens-mode "lsp-java" "\
Toggle run/debug overlays.

If called interactively, enable Lsp-Java-Lens mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-java" '("lsp-java-")))



(autoload 'lsp-java-boot-lens-mode "lsp-java-boot" "\
Toggle code-lens overlays.

If called interactively, enable Lsp-Java-Boot-Lens mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-java-boot" '("lsp-java-boot-")))



(autoload 'lsp-jt-lens-mode "lsp-jt" "\
Toggle code-lens overlays.

If called interactively, enable Lsp-Jt-Lens mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'lsp-jt-browser "lsp-jt" nil t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-jt" '("lsp-jt-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/lsp-ivy-20210904.2043/lsp-ivy-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/lsp-ivy-20210904.2043/lsp-ivy-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/lsp-ivy-20210904.2043/lsp-ivy-autoloads.el") (car load-path))))



(autoload 'lsp-ivy-workspace-symbol "lsp-ivy" "\
`ivy' for lsp workspace/symbol.
When called with prefix ARG the default selection will be symbol at point.

\(fn ARG)" t nil)

(autoload 'lsp-ivy-global-workspace-symbol "lsp-ivy" "\
`ivy' for lsp workspace/symbol for all of the current workspaces.
When called with prefix ARG the default selection will be symbol at point.

\(fn ARG)" t nil)

(autoload 'lsp-ivy-workspace-folders-remove "lsp-ivy" "\
Remove a project-root from the list of workspace folders." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lsp-ivy" '("lsp-ivy-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/lorem-ipsum-20190819.2042/lorem-ipsum-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/lorem-ipsum-20190819.2042/lorem-ipsum-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/lorem-ipsum-20190819.2042/lorem-ipsum-autoloads.el") (car load-path))))



(autoload 'lorem-ipsum-use-default-bindings "lorem-ipsum" "\
Use the default keybindings of C-c l [spl]." t nil)

(autoload 'lorem-ipsum-insert-paragraphs "lorem-ipsum" "\
Insert lorem ipsum paragraphs into buffer.
If NUM is non-nil, insert NUM paragraphs.

\(fn &optional NUM)" t nil)

(defalias 'Lorem-ipsum-insert-paragraphs 'lorem-ipsum-insert-paragraphs)

(autoload 'lorem-ipsum-insert-sentences "lorem-ipsum" "\
Insert lorem ipsum sentences into buffer.
If NUM is non-nil, insert NUM sentences.

\(fn &optional NUM)" t nil)

(defalias 'Lorem-ipsum-insert-sentences 'lorem-ipsum-insert-sentences)

(autoload 'lorem-ipsum-insert-list "lorem-ipsum" "\
Insert lorem ipsum list items into buffer.
If NUM is non-nil, insert NUM list items.

\(fn &optional NUM)" t nil)

(defalias 'Lorem-ipsum-insert-list 'lorem-ipsum-insert-list)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "lorem-ipsum" '("lorem-ipsum-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/load-env-vars-20180511.2210/load-env-vars-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/load-env-vars-20180511.2210/load-env-vars-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/load-env-vars-20180511.2210/load-env-vars-autoloads.el") (car load-path))))


(autoload 'load-env-vars "load-env-vars" "\
Load environment variables found in FILE-PATH.

\(fn FILE-PATH)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/coffee-mode-20200315.1133/coffee-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/coffee-mode-20200315.1133/coffee-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/coffee-mode-20200315.1133/coffee-mode-autoloads.el") (car load-path))))



(autoload 'coffee-mode "coffee-mode" "\
Major mode for editing CoffeeScript.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.coffee\\'" . coffee-mode))

(add-to-list 'auto-mode-alist '("\\.iced\\'" . coffee-mode))

(add-to-list 'auto-mode-alist '("Cakefile\\'" . coffee-mode))

(add-to-list 'auto-mode-alist '("\\.cson\\'" . coffee-mode))

(add-to-list 'interpreter-mode-alist '("coffee" . coffee-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "coffee-mode" '("coffee-" "iced-coffee-cs-keywords" "js2coffee-command")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/literate-coffee-mode-20170211.1515/literate-coffee-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/literate-coffee-mode-20170211.1515/literate-coffee-mode-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/literate-coffee-mode-20170211.1515/literate-coffee-mode-autoloads.el") (car load-path))))


(autoload 'litcoffee-mode "literate-coffee-mode" "\
Major mode for editing Literate CoffeeScript.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.litcoffee\\'" . litcoffee-mode))

(add-to-list 'auto-mode-alist '("\\.coffee.md\\'" . litcoffee-mode))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/less-css-mode-20161001.453/less-css-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/less-css-mode-20161001.453/less-css-mode-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/less-css-mode-20161001.453/less-css-mode-autoloads.el") (car load-path))))


(defvar less-css-lessc-command "lessc" "\
Command used to compile LESS files.
Should be lessc or the complete path to your lessc executable,
  e.g.: \"~/.gem/ruby/1.8/bin/lessc\"")

(custom-autoload 'less-css-lessc-command "less-css-mode" t)

(defvar less-css-compile-at-save nil "\
If non-nil, the LESS buffers will be compiled to CSS after each save.")

(custom-autoload 'less-css-compile-at-save "less-css-mode" t)

(defvar less-css-lessc-options '("--no-color") "\
Command line options for less executable.

Use \"-x\" to minify output.")

(custom-autoload 'less-css-lessc-options "less-css-mode" t)

(defvar less-css-output-directory nil "\
Directory in which to save CSS, or nil to use the LESS file's directory.

This path is expanded relative to the directory of the LESS file
using `expand-file-name', so both relative and absolute paths
will work as expected.")

(custom-autoload 'less-css-output-directory "less-css-mode" t)

(defvar less-css-output-file-name nil "\
File name in which to save CSS, or nil to use <name>.css for <name>.less.

This can be also be set to a full path, or a relative path.  If
the path is relative, it will be relative to the value of
`less-css-output-dir', if set, or the current directory by
default.")

(custom-autoload 'less-css-output-file-name "less-css-mode" t)

(defvar less-css-input-file-name nil "\
File name which will be compiled to CSS.

When the current buffer is saved `less-css-input-file-name' file
will be compiled to css instead of the current file.

Set this in order to trigger compilation of a \"master\" .less
file which includes the current file.  The best way to set this
variable in most cases is likely to be via directory local
variables.

This can be also be set to a full path, or a relative path. If
the path is relative, it will be relative to the the current directory by
default.")

(custom-autoload 'less-css-input-file-name "less-css-mode" t)

(autoload 'less-css-compile "less-css-mode" "\
Compiles the current buffer to css using `less-css-lessc-command'.

\(fn)" t nil)

(autoload 'less-css-mode "less-css-mode" "\
Major mode for editing LESS files, http://lesscss.org/
Special commands:
\\{less-css-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.less\\'" . less-css-mode))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/ledger-mode-20220307.854/ledger-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/ledger-mode-20220307.854/ledger-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/ledger-mode-20220307.854/ledger-mode-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-check" '("ledger-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-commodities" '("ledger-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-complete" '("ledger-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-context" '("ledger-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-exec" '("ledger-")))



(autoload 'ledger-flymake-enable "ledger-flymake" "\
Enable `flymake-mode' in `ledger-mode' buffers." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-flymake" '("ledger-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-fontify" '("ledger-fontify-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-fonts" '("ledger-font-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-init" '("ledger-")))



(autoload 'ledger-mode "ledger-mode" "\
A mode for editing ledger data files.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.ledger\\'" . ledger-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-mode" '("ledger-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-navigate" '("ledger-navigate-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-occur" '("ledger-occur")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-post" '("ledger-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-reconcile" '("ledger-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-regex" '("ledger-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-report" '("ledger-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-schedule" '("ledger-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-sort" '("ledger-sort-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-state" '("ledger-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-test" '("ledger-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-texi" '("ledger-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ledger-xact" '("ledger-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/language-id-20220328.1712/language-id-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/language-id-20220328.1712/language-id-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/language-id-20220328.1712/language-id-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "language-id" '("language-id-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/know-your-http-well-20160208.2304/know-your-http-well-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/know-your-http-well-20160208.2304/know-your-http-well-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/know-your-http-well-20160208.2304/know-your-http-well-autoloads.el") (car load-path))))


(autoload 'http-header "http-headers" "\
Display the meaning of an HTTP header

\(fn HEADER)" t nil)



(autoload 'http-method "http-methods" "\
Display the meaning of an HTTP method

\(fn METHOD)" t nil)



(autoload 'http-relation "http-relations" "\
Display the meaning of an HTTP relation

\(fn RELATION)" t nil)



(autoload 'http-status-code "http-status-codes" "\
Display the meaning of an HTTP status code or phrase

\(fn STATUS)" t nil)



(autoload 'media-type "media-types" "\
Display the template of a media-type

\(fn MEDIA-TYPE)" t nil)




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/khalel-20211114.1233/khalel-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/khalel-20211114.1233/khalel-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/khalel-20211114.1233/khalel-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "khalel" '("khalel-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/key-chord-20201222.2030/key-chord-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/key-chord-20201222.2030/key-chord-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/key-chord-20201222.2030/key-chord-autoloads.el") (car load-path))))



(defvar key-chord-mode nil "\
Non-nil if Key-Chord mode is enabled.
See the `key-chord-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `key-chord-mode'.")

(custom-autoload 'key-chord-mode "key-chord" nil)

(autoload 'key-chord-mode "key-chord" "\
Map pairs of simultaneously pressed keys to commands.

If called interactively, enable Key-Chord mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

See functions `key-chord-define-global', `key-chord-define-local',
and `key-chord-define' and variables `key-chord-two-keys-delay'
and `key-chord-one-key-delay'.

\(fn &optional ARG)" t nil)

(autoload 'key-chord-define-global "key-chord" "\
Define a key-chord of the two keys in KEYS starting a COMMAND.

KEYS can be a string or a vector of two elements. Currently only
elements that corresponds to ascii codes in the range 32 to 126
can be used.

COMMAND can be an interactive function, a string, or nil.
If COMMAND is nil, the key-chord is removed.

Note that KEYS defined locally in the current buffer will have
precedence.

\(fn KEYS COMMAND)" t nil)

(autoload 'key-chord-define-local "key-chord" "\
Locally define a key-chord of the two keys in KEYS starting a COMMAND.

KEYS can be a string or a vector of two elements. Currently only
elements that corresponds to ascii codes in the range 32 to 126
can be used.

COMMAND can be an interactive function, a string, or nil.
If COMMAND is nil, the key-chord is removed.

The binding goes in the current buffer's local map, which in most
cases is shared with all other buffers in the same major mode.

\(fn KEYS COMMAND)" t nil)

(autoload 'key-chord-define "key-chord" "\
Define in KEYMAP, a key-chord of the two keys in KEYS starting a COMMAND.

KEYS can be a string or a vector of two elements. Currently only
elements that corresponds to ascii codes in the range 32 to 126
can be used.

COMMAND can be an interactive function, a string, or nil.
If COMMAND is nil, the key-chord is removed.

\(fn KEYMAP KEYS COMMAND)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "key-chord" '("key-chord-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/key-assist-20210722.758/key-assist-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/key-assist-20210722.758/key-assist-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/key-assist-20210722.758/key-assist-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "key-assist" '("key-assist")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/jsonian-20220708.1813/jsonian-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/jsonian-20220708.1813/jsonian-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/jsonian-20220708.1813/jsonian-autoloads.el") (car load-path))))



(autoload 'jsonian-enclosing-item "jsonian" "\
Move point to the item enclosing the current point.
If ARG is not nil, move to the ARGth enclosing item.

\(fn &optional ARG)" t nil)

(autoload 'jsonian-find "jsonian" "\
Navigate to a item in a JSON document.
If PATH is supplied, navigate to it.

\(fn &optional PATH)" t nil)

(autoload 'jsonian-mode "jsonian" "\
Major mode for editing JSON files.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.json\\'" . jsonian-mode))

(autoload 'jsonian-indent-line "jsonian" "\
Indent a single line.
The indent is determined by examining the previous line.  The
number of spaces is determined by `jsonian-indentation' if it is
set, otherwise it is inferred from the document." t nil)

(autoload 'jsonian-c-mode "jsonian" "\
A major mode for editing JSON documents with comments.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.jsonc\\'" . jsonian-c-mode))

(autoload 'jsonian-enable-flycheck "jsonian" "\
Enable `jsonian-mode' for all checkers where `json-mode' is enabled." t nil)

(autoload 'jsonian-no-so-long-mode "jsonian" "\
Prevent `so-long-mode' from supplanting `jsonian-mode'." t nil)

(register-definition-prefixes "jsonian" '("jsonian-"))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/json-snatcher-20200916.1717/json-snatcher-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/json-snatcher-20200916.1717/json-snatcher-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/json-snatcher-20200916.1717/json-snatcher-autoloads.el") (car load-path))))



(autoload 'jsons-print-path "json-snatcher" "\
Print the path to the JSON value under point, and save it in the kill ring." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "json-snatcher" '("jsons-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/json-reformat-20160212.853/json-reformat-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/json-reformat-20160212.853/json-reformat-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/json-reformat-20160212.853/json-reformat-autoloads.el") (car load-path))))


(autoload 'json-reformat-region "json-reformat" "\
Reformat the JSON in the specified region.

If you want to customize the reformat style,
please see the documentation of `json-reformat:indent-width'
and `json-reformat:pretty-string?'.

\(fn BEGIN END)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/json-mode-20211011.630/json-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/json-mode-20211011.630/json-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/json-mode-20211011.630/json-mode-autoloads.el") (car load-path))))



(defconst json-mode-standard-file-ext '(".json" ".jsonld") "\
List of JSON file extensions.")

(defsubst json-mode--update-auto-mode (filenames) "\
Update the `json-mode' entry of `auto-mode-alist'.

FILENAMES should be a list of file as string.
Return the new `auto-mode-alist' entry" (let* ((new-regexp (rx-to-string `(seq (eval (cons 'or (append json-mode-standard-file-ext ',filenames))) eot))) (new-entry (cons new-regexp 'json-mode)) (old-entry (when (boundp 'json-mode--auto-mode-entry) json-mode--auto-mode-entry))) (setq auto-mode-alist (delete old-entry auto-mode-alist)) (add-to-list 'auto-mode-alist new-entry) new-entry))

(defvar json-mode-auto-mode-list '(".babelrc" ".bowerrc" "composer.lock") "\
List of filenames for the JSON entry of `auto-mode-alist'.

Note however that custom `json-mode' entries in `auto-mode-alist'
won’t be affected.")

(custom-autoload 'json-mode-auto-mode-list "json-mode" nil)

(defvar json-mode--auto-mode-entry (json-mode--update-auto-mode json-mode-auto-mode-list) "\
Regexp generated from the `json-mode-auto-mode-list'.")

(autoload 'json-mode "json-mode" "\
Major mode for editing JSON files

\(fn)" t nil)

(autoload 'jsonc-mode "json-mode" "\
Major mode for editing JSON files with comments

\(fn)" t nil)

(add-to-list 'magic-fallback-mode-alist '("^[{[]$" . json-mode))

(autoload 'json-mode-show-path "json-mode" "\
Print the path to the node at point to the minibuffer." t nil)

(autoload 'json-mode-kill-path "json-mode" "\
Save JSON path to object at point to kill ring." t nil)

(autoload 'json-mode-beautify "json-mode" "\
Beautify / pretty-print the active region (or the entire buffer if no active region).

\(fn BEGIN END)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "json-mode" '("json")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/jscs-20151015.1749/jscs-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/jscs-20151015.1749/jscs-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/jscs-20151015.1749/jscs-autoloads.el") (car load-path))))


(autoload 'jscs-indent-apply "jscs" "\
Apply JSCS indentation rules.

\(fn)" t nil)

(autoload 'jscs-fix "jscs" "\
Format the current buffer according to the JSCS tool.

\(fn)" t nil)

(autoload 'jscs-fix-run-before-save "jscs" "\
Add this to .emacs to run jscs-fix on the current buffer when saving:
 (add-hook 'js-mode-hook #'jscs-fix-run-before-save)
 (add-hook 'js2-mode-hook #'jscs-fix-run-before-save)
 (add-hook 'js3-mode-hook #'jscs-fix-run-before-save).

\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/js2-refactor-20210306.2003/js2-refactor-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/js2-refactor-20210306.2003/js2-refactor-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/js2-refactor-20210306.2003/js2-refactor-autoloads.el") (car load-path))))



(autoload 'js2-refactor-mode "js2-refactor" "\
Minor mode providing JavaScript refactorings.

If called interactively, enable Js2-Refactor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'js2r-add-keybindings-with-prefix "js2-refactor" "\
Add js2r keybindings using the prefix PREFIX.

\(fn PREFIX)" nil nil)

(autoload 'js2r-add-keybindings-with-modifier "js2-refactor" "\
Add js2r keybindings using the modifier MODIFIER.

\(fn MODIFIER)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2-refactor" '("js2")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-conditionals" '("js2r-ternary-to-if")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-conveniences" '("js2r-" "move-line-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-formatting" '("js2r-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-functions" '("js2r-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-helpers" '("js2r--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-iife" '("js2r-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-paredit" '("js2r-")))



(autoload 'js2r-rename-var "js2r-vars" "\
Renames the variable on point and all occurrences in its lexical scope." t nil)

(autoload 'js2r-extract-var "js2r-vars" nil t nil)

(autoload 'js2r-extract-let "js2r-vars" nil t nil)

(autoload 'js2r-extract-const "js2r-vars" nil t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-vars" '("current-line-contents" "js2r-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2r-wrapping" '("js2r-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/js-doc-20160715.434/js-doc-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/js-doc-20160715.434/js-doc-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/js-doc-20160715.434/js-doc-autoloads.el") (car load-path))))


(autoload 'js-doc-insert-file-doc "js-doc" "\
Insert specified-style comment top of the file

\(fn)" t nil)

(autoload 'js-doc-insert-function-doc "js-doc" "\
Insert JsDoc style comment of the function
The comment style can be custimized via `customize-group js-doc'

\(fn)" t nil)

(autoload 'js-doc-insert-function-doc-snippet "js-doc" "\
Insert JsDoc style comment of the function with yasnippet.

\(fn)" t nil)

(autoload 'js-doc-insert-tag "js-doc" "\
Insert a JsDoc tag interactively.

\(fn)" t nil)

(autoload 'js-doc-describe-tag "js-doc" "\
Describe the JsDoc tag

\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/js-auto-format-mode-20180807.1352/js-auto-format-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/js-auto-format-mode-20180807.1352/js-auto-format-mode-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/js-auto-format-mode-20180807.1352/js-auto-format-mode-autoloads.el") (car load-path))))


(autoload 'js-auto-format-enabled-p "js-auto-format-mode" "\
Test whether js-auto-format-mode is enabled.

\(fn)" nil nil)

(autoload 'js-auto-format-execute "js-auto-format-mode" "\
Format JavaScript source code.

\(fn)" t nil)

(autoload 'js-auto-format-mode "js-auto-format-mode" "\
Minor mode for auto-formatting JavaScript code

\(fn &optional ARG)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/jq-mode-20200604.833/jq-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/jq-mode-20200604.833/jq-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/jq-mode-20200604.833/jq-mode-autoloads.el") (car load-path))))



(autoload 'jq-mode "jq-mode" "\
Major mode for jq scripts.
\\{jq-mode-map}

\(fn)" t nil)

(autoload 'jq-interactively "jq-mode" "\
Runs jq interactively on a json buffer.

\(fn BEG END)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "jq-mode" '("jq-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ob-jq" '("org-babel-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/concurrent-20161229.330/concurrent-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/concurrent-20161229.330/concurrent-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/concurrent-20161229.330/concurrent-autoloads.el") (car load-path))))



)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/ctable-20210128.629/ctable-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/ctable-20210128.629/ctable-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/ctable-20210128.629/ctable-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ctable" '("ctbl:")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/epc-20140610.534/epc-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/epc-20140610.534/epc-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/epc-20140610.534/epc-autoloads.el") (car load-path))))



)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/jedi-core-20210503.1315/jedi-core-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/jedi-core-20210503.1315/jedi-core-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/jedi-core-20210503.1315/jedi-core-autoloads.el") (car load-path))))



(autoload 'jedi:start-dedicated-server "jedi-core" "\
Start Jedi server dedicated to this buffer.
This is useful, for example, when you want to use different
`sys.path' for some buffer.  When invoked as an interactive
command, it asks you how to start the Jedi server.  You can edit
the command in minibuffer to specify the way Jedi server run.

If you want to setup how Jedi server is started programmatically
per-buffer/per-project basis, make `jedi:server-command' and
`jedi:server-args' buffer local and set it in `python-mode-hook'.
See also: `jedi:server-args'.

\(fn COMMAND)" t nil)

(autoload 'helm-jedi-related-names "jedi-core" "\
Find related names of the object at point using `helm' interface." t nil)

(autoload 'anything-jedi-related-names "jedi-core" "\
Find related names of the object at point using `anything' interface." t nil)

(autoload 'jedi:setup "jedi-core" "\
Fully setup jedi.el for current buffer.
It setups `ac-sources' or `company-backends' and turns
`jedi-mode' on.

This function is intended to be called from `python-mode-hook',
like this::

       (add-hook 'python-mode-hook 'jedi:setup)

You can also call this function as a command, to quickly test
what jedi can do." t nil)

(autoload 'jedi:install-server "jedi-core" "\
This command installs Jedi server script jediepcserver.py in a
Python environment dedicated to Emacs.  By default, the
environment is at ``~/.emacs.d/.python-environments/default/``.
This environment is automatically created by ``virtualenv`` if it
does not exist.

Run this command (i.e., type ``M-x jedi:install-server RET``)
whenever Jedi.el shows a message to do so.  It is a good idea to
run this every time after you update Jedi.el to sync version of
Python modules used by Jedi.el and Jedi.el itself.

You can modify the location of the environment by changing
`jedi:environment-root' and/or `python-environment-directory'.  More
specifically, Jedi.el will install Python modules under the directory
``PYTHON-ENVIRONMENT-DIRECTORY/JEDI:ENVIRONMENT-ROOT``.  Note that you
need command line program ``virtualenv``.  If you have the command in
an unusual location, use `python-environment-virtualenv' to specify the
location.

.. NOTE:: jediepcserver.py is installed in a virtual environment but it
   does not mean Jedi.el cannot recognize the modules in virtual
   environment you are using for your Python development.  Jedi
   EPC server recognize the virtualenv it is in (i.e., the
   environment variable ``VIRTUAL_ENV`` in your Emacs) and then
   add modules in that environment to its ``sys.path``.  You can
   also add ``--virtual-env PATH/TO/ENV`` to `jedi:server-args'
   to include modules of virtual environment even you launch
   Emacs outside of the virtual environment.

.. NOTE:: It is highly recommended to use this command to install
   Python modules for Jedi.el.  You still can install Python
   modules used by Jedi.el manually.  However, you are then
   responsible for keeping Jedi.el and Python modules compatible.

See also:

- https://github.com/tkf/emacs-jedi/pull/72
- https://github.com/tkf/emacs-jedi/issues/140#issuecomment-37358527" t nil)

(autoload 'jedi:reinstall-server "jedi-core" "\
Reinstall Jedi server script jediepcserver.py." t nil)

(autoload 'jedi:install-server-block "jedi-core" "\
Blocking version `jedi:install-server'." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "jedi-core" '("jedi")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/jedi-20191011.1750/jedi-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/jedi-20191011.1750/jedi-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/jedi-20191011.1750/jedi-autoloads.el") (car load-path))))



(autoload 'jedi:ac-setup "jedi" "\
Add Jedi AC sources to `ac-sources'.

If auto-completion is all you need, you can call this function instead
of `jedi:setup', like this::

   (add-hook 'python-mode-hook 'jedi:ac-setup)

Note that this function calls `auto-complete-mode' if it is not
already enabled, for people who don't call `global-auto-complete-mode'
in their Emacs configuration." t nil)

(autoload 'jedi:complete "jedi" "\
Complete code at point.

\(fn &key (EXPAND ac-expand-on-auto-complete))" t nil)

(autoload 'jedi:auto-complete-mode "jedi" nil nil nil)

(setq jedi:setup-function #'jedi:ac-setup jedi:mode-function #'jedi:auto-complete-mode)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "jedi" '("jedi:")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/iss-mode-20141001.1913/iss-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/iss-mode-20141001.1913/iss-mode-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/iss-mode-20141001.1913/iss-mode-autoloads.el") (car load-path))))


(autoload 'iss-mode "iss-mode" "\
Major mode for editing InnoSetup script files.

\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/insert-char-preview-20201023.2108/insert-char-preview-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/insert-char-preview-20201023.2108/insert-char-preview-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/insert-char-preview-20201023.2108/insert-char-preview-autoloads.el") (car load-path))))



(autoload 'insert-char-preview "insert-char-preview" "\
Insert COUNT copies of CHARACTER.
Similar to `insert-char` in interactive mode, but with char preview.

\(fn COUNT CHARACTER)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "insert-char-preview" '("insert-char-preview-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/inline-docs-20220210.1402/inline-docs-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/inline-docs-20220210.1402/inline-docs-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/inline-docs-20220210.1402/inline-docs-autoloads.el") (car load-path))))



(autoload 'inline-docs-display-docs-momentary "inline-docs" "\
Display inline docs FORMAT-STRING under point with extra ARGS.

\(fn FORMAT-STRING &rest ARGS)" nil nil)

(defalias 'inline-docs 'inline-docs-display-docs-momentary)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "inline-docs" '("inline-docs-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/inheritenv-20210204.354/inheritenv-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/inheritenv-20210204.354/inheritenv-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/inheritenv-20210204.354/inheritenv-autoloads.el") (car load-path))))



(autoload 'inheritenv-apply "inheritenv" "\
Apply FUNC such that the environment it sees will match the current value.
This is useful if FUNC creates a temp buffer, because that will
not inherit any buffer-local values of variables `exec-path' and
`process-environment'.

This function is designed for convenient use as an \"around\" advice.

ARGS is as for ORIG.

\(fn FUNC &rest ARGS)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "inheritenv" '("inheritenv")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/inform7-20200430.1539/inform7-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/inform7-20200430.1539/inform7-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/inform7-20200430.1539/inform7-autoloads.el") (car load-path))))



(autoload 'inform7-mode "inform7" "\
Major mode for editing Inform 7 files.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.\\(ni\\|i7\\)\\'" . inform7-mode))

(add-to-list 'auto-mode-alist '("\\.i7x\\'" . inform7-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "inform7" '("inform7-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/htmlize-20210825.2150/htmlize-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/htmlize-20210825.2150/htmlize-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/htmlize-20210825.2150/htmlize-autoloads.el") (car load-path))))



(autoload 'htmlize-buffer "htmlize" "\
Convert BUFFER to HTML, preserving colors and decorations.

The generated HTML is available in a new buffer, which is returned.
When invoked interactively, the new buffer is selected in the current
window.  The title of the generated document will be set to the buffer's
file name or, if that's not available, to the buffer's name.

Note that htmlize doesn't fontify your buffers, it only uses the
decorations that are already present.  If you don't set up font-lock or
something else to fontify your buffers, the resulting HTML will be
plain.  Likewise, if you don't like the choice of colors, fix the mode
that created them, or simply alter the faces it uses.

\(fn &optional BUFFER)" t nil)

(autoload 'htmlize-region "htmlize" "\
Convert the region to HTML, preserving colors and decorations.
See `htmlize-buffer' for details.

\(fn BEG END)" t nil)

(autoload 'htmlize-file "htmlize" "\
Load FILE, fontify it, convert it to HTML, and save the result.

Contents of FILE are inserted into a temporary buffer, whose major mode
is set with `normal-mode' as appropriate for the file type.  The buffer
is subsequently fontified with `font-lock' and converted to HTML.  Note
that, unlike `htmlize-buffer', this function explicitly turns on
font-lock.  If a form of highlighting other than font-lock is desired,
please use `htmlize-buffer' directly on buffers so highlighted.

Buffers currently visiting FILE are unaffected by this function.  The
function does not change current buffer or move the point.

If TARGET is specified and names a directory, the resulting file will be
saved there instead of to FILE's directory.  If TARGET is specified and
does not name a directory, it will be used as output file name.

\(fn FILE &optional TARGET)" t nil)

(autoload 'htmlize-many-files "htmlize" "\
Convert FILES to HTML and save the corresponding HTML versions.

FILES should be a list of file names to convert.  This function calls
`htmlize-file' on each file; see that function for details.  When
invoked interactively, you are prompted for a list of files to convert,
terminated with RET.

If TARGET-DIRECTORY is specified, the HTML files will be saved to that
directory.  Normally, each HTML file is saved to the directory of the
corresponding source file.

\(fn FILES &optional TARGET-DIRECTORY)" t nil)

(autoload 'htmlize-many-files-dired "htmlize" "\
HTMLize dired-marked files.

\(fn ARG &optional TARGET-DIRECTORY)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "htmlize" '("htmlize-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/elisp-refs-20220220.2305/elisp-refs-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/elisp-refs-20220220.2305/elisp-refs-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/elisp-refs-20220220.2305/elisp-refs-autoloads.el") (car load-path))))



(autoload 'elisp-refs-function "elisp-refs" "\
Display all the references to function SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

This searches for functions, not macros. For that, see
`elisp-refs-macro'.

\(fn SYMBOL &optional PATH-PREFIX)" t nil)

(autoload 'elisp-refs-macro "elisp-refs" "\
Display all the references to macro SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

This searches for macros, not functions. For that, see
`elisp-refs-function'.

\(fn SYMBOL &optional PATH-PREFIX)" t nil)

(autoload 'elisp-refs-special "elisp-refs" "\
Display all the references to special form SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

\(fn SYMBOL &optional PATH-PREFIX)" t nil)

(autoload 'elisp-refs-variable "elisp-refs" "\
Display all the references to variable SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

\(fn SYMBOL &optional PATH-PREFIX)" t nil)

(autoload 'elisp-refs-symbol "elisp-refs" "\
Display all the references to SYMBOL in all loaded elisp files.

If called with a prefix, prompt for a directory to limit the
search.

\(fn SYMBOL &optional PATH-PREFIX)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elisp-refs" '("elisp-refs-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/helpful-20220220.2308/helpful-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/helpful-20220220.2308/helpful-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/helpful-20220220.2308/helpful-autoloads.el") (car load-path))))



(autoload 'helpful-function "helpful" "\
Show help for function named SYMBOL.

See also `helpful-macro', `helpful-command' and `helpful-callable'.

\(fn SYMBOL)" t nil)

(autoload 'helpful-command "helpful" "\
Show help for interactive function named SYMBOL.

See also `helpful-function'.

\(fn SYMBOL)" t nil)

(autoload 'helpful-key "helpful" "\
Show help for interactive command bound to KEY-SEQUENCE.

\(fn KEY-SEQUENCE)" t nil)

(autoload 'helpful-macro "helpful" "\
Show help for macro named SYMBOL.

\(fn SYMBOL)" t nil)

(autoload 'helpful-callable "helpful" "\
Show help for function, macro or special form named SYMBOL.

See also `helpful-macro', `helpful-function' and `helpful-command'.

\(fn SYMBOL)" t nil)

(autoload 'helpful-symbol "helpful" "\
Show help for SYMBOL, a variable, function or macro.

See also `helpful-callable' and `helpful-variable'.

\(fn SYMBOL)" t nil)

(autoload 'helpful-variable "helpful" "\
Show help for variable named SYMBOL.

\(fn SYMBOL)" t nil)

(autoload 'helpful-at-point "helpful" "\
Show help for the symbol at point." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "helpful" '("helpful-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/haskell-mode-20220331.1645/haskell-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/haskell-mode-20220331.1645/haskell-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/haskell-mode-20220331.1645/haskell-mode-autoloads.el") (car load-path))))



(autoload 'ghc-core-create-core "ghc-core" "\
Compile and load the current buffer as tidy core." t nil)

(add-to-list 'auto-mode-alist '("\\.hcr\\'" . ghc-core-mode))

(add-to-list 'auto-mode-alist '("\\.dump-simpl\\'" . ghc-core-mode))

(autoload 'ghc-core-mode "ghc-core" "\
Major mode for GHC Core files.

\(fn)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ghc-core" '("ghc-core-")))



(autoload 'ghci-script-mode "ghci-script-mode" "\
Major mode for working with .ghci files.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.ghci\\'" . ghci-script-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ghci-script-mode" '("ghci-script-mode-")))



(autoload 'interactive-haskell-mode "haskell" "\
Minor mode for enabling haskell-process interaction.

If called interactively, enable Interactive-Haskell mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'haskell-interactive-mode-return "haskell" "\
Handle the return key." t nil)

(autoload 'haskell-session-kill "haskell" "\
Kill the session process and buffer, delete the session.
1. Kill the process.
2. Kill the interactive buffer unless LEAVE-INTERACTIVE-BUFFER is not given.
3. Walk through all the related buffers and set their haskell-session to nil.
4. Remove the session from the sessions list.

\(fn &optional LEAVE-INTERACTIVE-BUFFER)" t nil)

(autoload 'haskell-interactive-kill "haskell" "\
Kill the buffer and (maybe) the session." t nil)

(autoload 'haskell-session "haskell" "\
Get the Haskell session, prompt if there isn't one or fail." nil nil)

(autoload 'haskell-interactive-switch "haskell" "\
Switch to the interactive mode for this session." t nil)

(autoload 'haskell-session-change "haskell" "\
Change the session for the current buffer." t nil)

(autoload 'haskell-kill-session-process "haskell" "\
Kill the process.

\(fn &optional SESSION)" t nil)

(autoload 'haskell-interactive-mode-visit-error "haskell" "\
Visit the buffer of the current (or last) error message." t nil)

(autoload 'haskell-mode-jump-to-tag "haskell" "\
Jump to the tag of the given identifier.

Give optional NEXT-P parameter to override value of
`xref-prompt-for-identifier' during definition search.

\(fn &optional NEXT-P)" t nil)

(autoload 'haskell-mode-after-save-handler "haskell" "\
Function that will be called after buffer's saving." nil nil)

(autoload 'haskell-mode-tag-find "haskell" "\
The tag find function, specific for the particular session.

\(fn &optional NEXT-P)" t nil)

(autoload 'haskell-interactive-bring "haskell" "\
Bring up the interactive mode for this session." t nil)

(autoload 'haskell-process-load-file "haskell" "\
Load the current buffer file." t nil)

(autoload 'haskell-process-reload "haskell" "\
Re-load the current buffer file." t nil)

(autoload 'haskell-process-reload-file "haskell" nil nil nil)

(autoload 'haskell-process-load-or-reload "haskell" "\
Load or reload. Universal argument toggles which.

\(fn &optional TOGGLE)" t nil)

(autoload 'haskell-process-cabal-build "haskell" "\
Build the Cabal project." t nil)

(autoload 'haskell-process-cabal "haskell" "\
Prompts for a Cabal command to run.

\(fn P)" t nil)

(autoload 'haskell-process-minimal-imports "haskell" "\
Dump minimal imports." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell" '("haskell-" "interactive-haskell-mode-map" "xref-prompt-for-identifier")))



(autoload 'haskell-align-imports "haskell-align-imports" "\
Align all the imports in the buffer." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-align-imports" '("haskell-align-imports-")))



(add-to-list 'auto-mode-alist '("\\.chs\\'" . haskell-c2hs-mode))

(autoload 'haskell-c2hs-mode "haskell-c2hs" "\
Mode for editing *.chs files of the c2hs haskell tool.

\(fn)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-c2hs" '("haskell-c2hs-font-lock-keywords")))



(add-to-list 'auto-mode-alist '("\\.cabal\\'\\|/cabal\\.project\\|/\\.cabal/config\\'" . haskell-cabal-mode))

(autoload 'haskell-cabal-mode "haskell-cabal" "\
Major mode for Cabal package description files.

\(fn)" t nil)

(autoload 'haskell-cabal-get-field "haskell-cabal" "\
Read the value of field with NAME from project's cabal file.
If there is no valid .cabal file to get the setting from (or
there is no corresponding setting with that name in the .cabal
file), then this function returns nil.

\(fn NAME)" t nil)

(autoload 'haskell-cabal-get-dir "haskell-cabal" "\
Get the Cabal dir for a new project. Various ways of figuring this out,
   and indeed just prompting the user. Do them all.

\(fn &optional USE-DEFAULTS)" nil nil)

(autoload 'haskell-cabal-visit-file "haskell-cabal" "\
Locate and visit package description file for file visited by current buffer.
This uses `haskell-cabal-find-file' to locate the closest
\".cabal\" file and open it.  This command assumes a common Cabal
project structure where the \".cabal\" file is in the top-folder
of the project, and all files related to the project are in or
below the top-folder.  If called with non-nil prefix argument
OTHER-WINDOW use `find-file-other-window'.

\(fn OTHER-WINDOW)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-cabal" '("haskell-")))



(autoload 'haskell-collapse-mode "haskell-collapse" "\
Minor mode to collapse and expand haskell expressions

If called interactively, enable Haskell-Collapse mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-collapse" '("haskell-")))



(autoload 'haskell-process-restart "haskell-commands" "\
Restart the inferior Haskell process." t nil)

(autoload 'haskell-process-clear "haskell-commands" "\
Clear the current process." t nil)

(autoload 'haskell-process-interrupt "haskell-commands" "\
Interrupt the process (SIGINT)." t nil)

(autoload 'haskell-describe "haskell-commands" "\
Describe the given identifier IDENT.

\(fn IDENT)" t nil)

(autoload 'haskell-rgrep "haskell-commands" "\
Grep the effective project for the symbol at point.
Very useful for codebase navigation.

Prompts for an arbitrary regexp given a prefix arg PROMPT.

\(fn &optional PROMPT)" t nil)

(autoload 'haskell-process-do-info "haskell-commands" "\
Print info on the identifier at point.
If PROMPT-VALUE is non-nil, request identifier via mini-buffer.

\(fn &optional PROMPT-VALUE)" t nil)

(autoload 'haskell-process-do-type "haskell-commands" "\
Print the type of the given expression.

Given INSERT-VALUE prefix indicates that result type signature
should be inserted.

\(fn &optional INSERT-VALUE)" t nil)

(autoload 'haskell-mode-jump-to-def-or-tag "haskell-commands" "\
Jump to the definition.
Jump to definition of identifier at point by consulting GHCi, or
tag table as fallback.

Remember: If GHCi is busy doing something, this will delay, but
it will always be accurate, in contrast to tags, which always
work but are not always accurate.
If the definition or tag is found, the location from which you jumped
will be pushed onto `xref--marker-ring', so you can return to that
position with `xref-pop-marker-stack'.

\(fn &optional NEXT-P)" t nil)

(autoload 'haskell-mode-goto-loc "haskell-commands" "\
Go to the location of the thing at point.
Requires the :loc-at command from GHCi." t nil)

(autoload 'haskell-mode-jump-to-def "haskell-commands" "\
Jump to definition of identifier IDENT at point.

\(fn IDENT)" t nil)

(autoload 'haskell-process-cd "haskell-commands" "\
Change directory.

\(fn &optional NOT-INTERACTIVE)" t nil)

(autoload 'haskell-process-cabal-macros "haskell-commands" "\
Send the cabal macros string." t nil)

(autoload 'haskell-mode-show-type-at "haskell-commands" "\
Show type of the thing at point or within active region asynchronously.
This function requires GHCi 8+ or GHCi-ng.

\\<haskell-interactive-mode-map>
To make this function works sometimes you need to load the file in REPL
first using command `haskell-process-load-file' bound to
\\[haskell-process-load-file].

Optional argument INSERT-VALUE indicates that
recieved type signature should be inserted (but only if nothing
happened since function invocation).

\(fn &optional INSERT-VALUE)" t nil)

(autoload 'haskell-process-unignore "haskell-commands" "\
Unignore any ignored files.
Do not ignore files that were specified as being ignored by the
inferior GHCi process." t nil)

(autoload 'haskell-session-change-target "haskell-commands" "\
Set the build TARGET for cabal REPL.

\(fn TARGET)" t nil)

(autoload 'haskell-mode-stylish-buffer "haskell-commands" "\
Apply stylish-haskell to the current buffer.

Use `haskell-mode-stylish-haskell-path' to know where to find
stylish-haskell executable.  This function tries to preserve
cursor position and markers by using
`haskell-mode-buffer-apply-command'." t nil)

(autoload 'haskell-mode-find-uses "haskell-commands" "\
Find use cases of the identifier at point and highlight them all." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-commands" '("haskell-")))



(autoload 'haskell-compile "haskell-compile" "\
Run a compile command for the current Haskell buffer.
Obeys haskell-compiler-type to choose the appropriate build command.

If prefix argument EDIT-COMMAND is non-nil (and not a negative
prefix `-'), prompt for a custom compile command.

If EDIT-COMMAND contains the negative prefix argument `-', call
the alternative command defined in
`haskell-compile-stack-build-alt-command' /
`haskell-compile-cabal-build-alt-command'.

If there is no prefix argument, the most recent custom compile
command is used, falling back to
`haskell-compile-stack-build-command' for stack builds
`haskell-compile-cabal-build-command' for cabal builds, and
`haskell-compile-command' otherwise.

'% characters in the `-command' templates are replaced by the
base directory for build tools, or the current buffer for
`haskell-compile-command'.

\(fn &optional EDIT-COMMAND)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-compile" '("haskell-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-complete-module" '("haskell-complete-module")))



(autoload 'haskell-completions-completion-at-point "haskell-completions" "\
Provide completion list for thing at point.
This function is used in non-interactive `haskell-mode'.  It
provides completions for haskell keywords, language pragmas,
GHC's options, and language extensions, but not identifiers." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-completions" '("haskell-completions-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-customize" '("haskell-" "inferior-haskell-root-dir")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-debug" '("haskell-debug")))



(autoload 'haskell-ds-create-imenu-index "haskell-decl-scan" "\
Function for finding `imenu' declarations in Haskell mode.
Finds all declarations (classes, variables, imports, instances and
datatypes) in a Haskell file for the `imenu' package." nil nil)

(autoload 'turn-on-haskell-decl-scan "haskell-decl-scan" "\
Unconditionally activate `haskell-decl-scan-mode'." t nil)

(autoload 'haskell-decl-scan-mode "haskell-decl-scan" "\
Toggle Haskell declaration scanning minor mode on or off.
With a prefix argument ARG, enable minor mode if ARG is
positive, and disable it otherwise.  If called from Lisp, enable
the mode if ARG is omitted or nil, and toggle it if ARG is `toggle'.

See also info node `(haskell-mode)haskell-decl-scan-mode' for
more details about this minor mode.

Top-level declarations are scanned and listed in the menu item
\"Declarations\" (if enabled via option
`haskell-decl-scan-add-to-menubar').  Selecting an item from this
menu will take point to the start of the declaration.

\\[beginning-of-defun] and \\[end-of-defun] move forward and backward to the start of a declaration.

This may link with `haskell-doc-mode'.

For non-literate and LaTeX-style literate scripts, we assume the
common convention that top-level declarations start at the first
column.  For Bird-style literate scripts, we assume the common
convention that top-level declarations start at the third column,
ie. after \"> \".

Anything in `font-lock-comment-face' is not considered for a
declaration.  Therefore, using Haskell font locking with comments
coloured in `font-lock-comment-face' improves declaration scanning.

Literate Haskell scripts are supported: If the value of
`haskell-literate' (set automatically by `haskell-literate-mode')
is `bird', a Bird-style literate script is assumed.  If it is nil
or `tex', a non-literate or LaTeX-style literate script is
assumed, respectively.

Invokes `haskell-decl-scan-mode-hook' on activation.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-decl-scan" '("haskell-d" "literate-haskell-ds-")))



(autoload 'haskell-doc-mode "haskell-doc" "\
Enter `haskell-doc-mode' for showing fct types in the echo area.
See variable docstring.

\(fn &optional ARG)" t nil)

(defalias 'turn-on-haskell-doc-mode 'haskell-doc-mode)

(defalias 'turn-on-haskell-doc 'haskell-doc-mode)

(autoload 'haskell-doc-current-info "haskell-doc" "\
Return the info about symbol at point.
Meant for `eldoc-documentation-function'." nil nil)

(autoload 'haskell-doc-show-type "haskell-doc" "\
Show the type of the function near point or given symbol SYM.
For the function under point, show the type in the echo area.
This information is extracted from the `haskell-doc-prelude-types' alist
of prelude functions and their types, or from the local functions in the
current buffer.

\(fn &optional SYM)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-doc" '("haskell-" "inferior-haskell-" "turn-off-haskell-doc")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-font-lock" '("haskell-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-ghc-support" '("haskell-")))



(autoload 'haskell-hoogle "haskell-hoogle" "\
Do a Hoogle search for QUERY.

If prefix argument INFO is given, then `haskell-hoogle-command'
is asked to show extra info for the items matching QUERY..

\(fn QUERY &optional INFO)" t nil)

(defalias 'hoogle 'haskell-hoogle)

(autoload 'haskell-hoogle-lookup-from-website "haskell-hoogle" "\
Lookup QUERY at `haskell-hoogle-url'.

\(fn QUERY)" t nil)

(autoload 'haskell-hoogle-lookup-from-local "haskell-hoogle" "\
Lookup QUERY on local hoogle server." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-hoogle" '("haskell-hoogle-" "hoogle-prompt")))



(autoload 'turn-on-haskell-indent "haskell-indent" "\
Turn on ``intelligent'' Haskell indentation mode." nil nil)

(autoload 'haskell-indent-mode "haskell-indent" "\
``Intelligent'' Haskell indentation mode.
This deals with the layout rule of Haskell.
\\[haskell-indent-cycle] starts the cycle which proposes new
possibilities as long as the TAB key is pressed.  Any other key
or mouse click terminates the cycle and is interpreted except for
RET which merely exits the cycle.
Other special keys are:
    \\[haskell-indent-insert-equal]
      inserts an =
    \\[haskell-indent-insert-guard]
      inserts an |
    \\[haskell-indent-insert-otherwise]
      inserts an | otherwise =
these functions also align the guards and rhs of the current definition
    \\[haskell-indent-insert-where]
      inserts a where keyword
    \\[haskell-indent-align-guards-and-rhs]
      aligns the guards and rhs of the region
    \\[haskell-indent-put-region-in-literate]
      makes the region a piece of literate code in a literate script

If `ARG' is falsey, toggle `haskell-indent-mode'.  Else sets
`haskell-indent-mode' to whether `ARG' is greater than 0.

Invokes `haskell-indent-hook' if not nil.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-indent" '("haskell-indent-" "turn-off-haskell-indent")))



(autoload 'haskell-indentation-mode "haskell-indentation" "\
Haskell indentation mode that deals with the layout rule.
It rebinds RET, DEL and BACKSPACE, so that indentations can be
set and deleted as if they were real tabs.

If called interactively, enable Haskell-Indentation mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'turn-on-haskell-indentation "haskell-indentation" "\
Turn on the haskell-indentation minor mode." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-indentation" '("haskell-indentation-")))



(autoload 'haskell-interactive-mode-reset-error "haskell-interactive-mode" "\
Reset the error cursor position.

\(fn SESSION)" t nil)

(autoload 'haskell-interactive-mode-echo "haskell-interactive-mode" "\
Echo a read only piece of text before the prompt.

\(fn SESSION MESSAGE &optional MODE)" nil nil)

(autoload 'haskell-process-show-repl-response "haskell-interactive-mode" "\
Send LINE to the GHCi process and echo the result in some fashion.
Result will be printed in the minibuffer or presented using
function `haskell-presentation-present', depending on variable
`haskell-process-use-presentation-mode'.

\(fn LINE)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-interactive-mode" '("haskell-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-lexeme" '("haskell-lexeme-")))



(autoload 'haskell-process-reload-devel-main "haskell-load" "\
Reload the module `DevelMain' and then run `DevelMain.update'.

This is for doing live update of the code of servers or GUI
applications.  Put your development version of the program in
`DevelMain', and define `update' to auto-start the program on a
new thread, and use the `foreign-store' package to access the
running context across :load/:reloads in GHCi." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-load" '("haskell-")))



(autoload 'haskell-menu "haskell-menu" "\
Launch the Haskell sessions menu." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-menu" '("haskell-menu-")))



(autoload 'haskell-version "haskell-mode" "\
Show the `haskell-mode` version in the echo area.
With prefix argument HERE, insert it at point.

\(fn &optional HERE)" t nil)

(autoload 'haskell-mode-view-news "haskell-mode" "\
Display information on recent changes to haskell-mode." t nil)

(autoload 'haskell-mode "haskell-mode" "\
Major mode for editing Haskell programs.

\\<haskell-mode-map>

Literate Haskell scripts are supported via `haskell-literate-mode'.
The variable `haskell-literate' indicates the style of the script in the
current buffer.  See the documentation on this variable for more details.

Use `haskell-version' to find out what version of Haskell mode you are
currently using.

Additional Haskell mode modules can be hooked in via `haskell-mode-hook'.

Indentation modes:

    `haskell-indentation-mode', Kristof Bastiaensen, Gergely Risko
      Intelligent semi-automatic indentation Mk2

    `haskell-indent-mode', Guy Lapalme
      Intelligent semi-automatic indentation.

Interaction modes:

    `interactive-haskell-mode'
      Interact with per-project GHCi processes through a REPL and
      directory-aware sessions.

Other modes:

    `haskell-decl-scan-mode', Graeme E Moss
      Scans top-level declarations, and places them in a menu.

    `haskell-doc-mode', Hans-Wolfgang Loidl
      Echoes types of functions or syntax of keywords when the cursor is idle.

To activate a minor-mode, simply run the interactive command. For
example, `M-x haskell-doc-mode'. Run it again to disable it.

To enable a mode for every haskell-mode buffer, add a hook in
your Emacs configuration. To do that you can customize
`haskell-mode-hook' or add lines to your .emacs file. For
example, to enable `interactive-haskell-mode', use the following:

    (add-hook 'haskell-mode-hook 'interactive-haskell-mode)

Minor modes that work well with `haskell-mode':

- `smerge-mode': show and work with diff3 conflict markers used
  by git, svn and other version control systems.

\(fn)" t nil)

(autoload 'haskell-forward-sexp "haskell-mode" "\
Haskell specific version of `forward-sexp'.

Move forward across one balanced expression (sexp).  With ARG, do
it that many times.  Negative arg -N means move backward across N
balanced expressions.  This command assumes point is not in a
string or comment.

If unable to move over a sexp, signal `scan-error' with three
arguments: a message, the start of the obstacle (a parenthesis or
list marker of some kind), and end of the obstacle.

\(fn &optional ARG)" t nil)

(autoload 'haskell-literate-mode "haskell-mode" "\
As `haskell-mode' but for literate scripts.

\(fn)" t nil)

(define-obsolete-function-alias 'literate-haskell-mode 'haskell-literate-mode "2020-04")

(add-to-list 'auto-mode-alist '("\\.[gh]s\\'" . haskell-mode))

(add-to-list 'auto-mode-alist '("\\.hsig\\'" . haskell-mode))

(add-to-list 'auto-mode-alist '("\\.l[gh]s\\'" . haskell-literate-mode))

(add-to-list 'auto-mode-alist '("\\.hsc\\'" . haskell-mode))

(add-to-list 'interpreter-mode-alist '("runghc" . haskell-mode))

(add-to-list 'interpreter-mode-alist '("runhaskell" . haskell-mode))

(add-to-list 'completion-ignored-extensions ".hi")

(autoload 'haskell-mode-generate-tags "haskell-mode" "\
Generate tags using Hasktags.  This is synchronous function.

If optional AND-THEN-FIND-THIS-TAG argument is present it is used
with function `xref-find-definitions' after new table was
generated.

\(fn &optional AND-THEN-FIND-THIS-TAG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-mode" '("haskell-")))



(autoload 'haskell-session-installed-modules "haskell-modules" "\
Get the modules installed in the current package set.

\(fn SESSION &optional DONTCREATE)" nil nil)

(autoload 'haskell-session-all-modules "haskell-modules" "\
Get all modules -- installed or in the current project.
If DONTCREATE is non-nil don't create a new session.

\(fn SESSION &optional DONTCREATE)" nil nil)

(autoload 'haskell-session-project-modules "haskell-modules" "\
Get the modules of the current project.
If DONTCREATE is non-nil don't create a new session.

\(fn SESSION &optional DONTCREATE)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-modules" '("haskell-")))



(autoload 'haskell-move-nested "haskell-move-nested" "\
Shift the nested off-side-rule block adjacent to point by COLS columns to the right.

In Transient Mark mode, if the mark is active, operate on the contents
of the region instead.

\(fn COLS)" nil nil)

(autoload 'haskell-move-nested-right "haskell-move-nested" "\
Increase indentation of the following off-side-rule block adjacent to point.

Use a numeric prefix argument to indicate amount of indentation to apply.

In Transient Mark mode, if the mark is active, operate on the contents
of the region instead.

\(fn COLS)" t nil)

(autoload 'haskell-move-nested-left "haskell-move-nested" "\
Decrease indentation of the following off-side-rule block adjacent to point.

Use a numeric prefix argument to indicate amount of indentation to apply.

In Transient Mark mode, if the mark is active, operate on the contents
of the region instead.

\(fn COLS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-move-nested" '("haskell-")))



(autoload 'haskell-navigate-imports "haskell-navigate-imports" "\
Cycle the Haskell import lines or return to point (with prefix arg).

\(fn &optional RETURN)" t nil)

(autoload 'haskell-navigate-imports-go "haskell-navigate-imports" "\
Go to the first line of a list of consecutive import lines. Cycles." t nil)

(autoload 'haskell-navigate-imports-return "haskell-navigate-imports" "\
Return to the non-import point we were at before going to the module list.
   If we were originally at an import list, we can just cycle through easily." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-navigate-imports" '("haskell-navigate-imports-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-presentation-mode" '("haskell-presentation-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-process" '("haskell-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-repl" '("haskell-interactive-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-sandbox" '("haskell-sandbox-")))



(autoload 'haskell-session-maybe "haskell-session" "\
Maybe get the Haskell session, return nil if there isn't one." nil nil)

(autoload 'haskell-session-process "haskell-session" "\
Get the session process.

\(fn S)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-session" '("haskell-session")))



(autoload 'haskell-sort-imports "haskell-sort-imports" "\
Sort the import list at point. It sorts the current group
i.e. an import list separated by blank lines on either side.

If the region is active, it will restrict the imports to sort
within that region." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-sort-imports" '("haskell-sort-imports-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-string" '("haskell-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-svg" '("haskell-svg-")))



(autoload 'haskell-unicode-input-method-enable "haskell-unicode-input-method" "\
Set input method `haskell-unicode'." t nil)

(define-obsolete-function-alias 'turn-on-haskell-unicode-input-method 'haskell-unicode-input-method-enable "2020-04")



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "haskell-utils" '("haskell-")))



(autoload 'highlight-uses-mode "highlight-uses-mode" "\
Minor mode for highlighting and jumping between uses.

If called interactively, enable Highlight-Uses mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "highlight-uses-mode" '("highlight-uses-mode-")))



(autoload 'run-haskell "inf-haskell" "\
Show the inferior-haskell buffer.  Start the process if needed." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "inf-haskell" '("haskell-" "inf")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "w3m-haddock" '("haskell-w3m-" "w3m-haddock-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/groovy-mode-20220212.646/groovy-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/groovy-mode-20220212.646/groovy-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/groovy-mode-20220212.646/groovy-mode-autoloads.el") (car load-path))))



(autoload 'groovy-electric-mode "groovy-electric" "\
Toggle Groovy Electric minor mode.
With no argument, this command toggles the mode.  Non-null prefix
argument turns on the mode.  Null prefix argument turns off the
mode.

If called interactively, enable Groovy-Electric mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When Groovy Electric mode is enabled, simple, double and back
quotes as well as braces are paired auto-magically. Expansion
does not occur inside comments and strings. Note that you must
have Font Lock enabled. ${ } is expanded when in a GString

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "groovy-electric" '("groovy-electric-")))



(add-to-list 'auto-mode-alist '("\\.g\\(?:ant\\|roovy\\|radle\\)\\'" . groovy-mode))

(add-to-list 'auto-mode-alist '("/Jenkinsfile\\'" . groovy-mode))

(add-to-list 'interpreter-mode-alist '("groovy" . groovy-mode))

(autoload 'groovy-mode "groovy-mode" "\
Major mode for editing Groovy code.

The hook `groovy-mode-hook' is run with no args at mode
initialization.

Key bindings:
\\{groovy-mode-map}

\(fn)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "groovy-mode" '("groovy-")))



(autoload 'inf-groovy-keys "inf-groovy" "\
Set local key defs for inf-groovy in groovy-mode" nil nil)

(autoload 'inferior-groovy-mode "inf-groovy" "\
Major mode for interacting with an inferior groovy (groovysh) process.

The following commands are available:
\\{inferior-groovy-mode-map}

A groovy process can be fired up with M-x run-groovy.

Customisation: Entry to this mode runs the hooks on comint-mode-hook and
inferior-groovy-mode-hook (in that order).

You can send text to the inferior groovy process from other buffers containing
Groovy source.
    switch-to-groovy switches the current buffer to the groovy process buffer.
    groovy-send-definition sends the current definition to the groovy process.
    groovy-send-region sends the current region to the groovy process.

    groovy-send-definition-and-go, groovy-send-region-and-go,
        switch to the groovy process buffer after sending their text.
For information on running multiple processes in multiple buffers, see
documentation for variable groovy-buffer.

Commands:
Return after the end of the process' output sends the text from the
    end of process to point.
Return before the end of the process' output copies the sexp ending at point
    to the end of the process' output, and sends it.
Delete converts tabs to spaces as it moves back.
Tab indents for groovy; with argument, shifts rest
    of expression rigidly with the current line.
C-M-q does Tab on each line starting within following expression.
Paragraphs are separated only by blank lines.  # start comments.
If you accidentally suspend your process, use \\[comint-continue-subjob]
to continue it." t nil)

(autoload 'run-groovy "inf-groovy" "\
Run an inferior Groovy process, input and output via buffer *groovy*.
If there is a process already running in *groovy*, switch to that buffer.
With a prefix argument, prompt for the groovysh path and arguments
\(see variables `groovysh' and `groovysh-args' for the defaults).

Runs the hook `inferior-groovy-mode-hook' (after the
`comint-mode-hook' is run).  Type \\[describe-mode] in the
process buffer for a list of commands.

\(fn CMD)" t nil)

(eval-after-load 'groovy-mode (lambda nil (add-hook 'groovy-mode-hook 'inf-groovy-keys)))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "inf-groovy" '("groovy" "inf" "remove-in-string" "switch-to-groovy")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/graphql-20180912.31/graphql-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/graphql-20180912.31/graphql-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/graphql-20180912.31/graphql-autoloads.el") (car load-path))))



)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/goto-line-preview-20210323.422/goto-line-preview-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/goto-line-preview-20210323.422/goto-line-preview-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/goto-line-preview-20210323.422/goto-line-preview-autoloads.el") (car load-path))))



(autoload 'goto-line-preview "goto-line-preview" "\
Preview goto line." t nil)

(autoload 'goto-line-preview-relative "goto-line-preview" "\
Preview goto line relative." t nil)

(define-obsolete-function-alias 'goto-line-preview-goto-line 'goto-line-preview "0.1.1")

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "goto-line-preview" '("goto-line-preview-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/go-mode-20220114.2239/go-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/go-mode-20220114.2239/go-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/go-mode-20220114.2239/go-mode-autoloads.el") (car load-path))))



(autoload 'go-mode "go-mode" "\
Major mode for editing Go source text.

This mode provides (not just) basic editing capabilities for
working with Go code. It offers almost complete syntax
highlighting, indentation that is almost identical to gofmt and
proper parsing of the buffer content to allow features such as
navigation by function, manipulation of comments or detection of
strings.

In addition to these core features, it offers various features to
help with writing Go code. You can directly run buffer content
through gofmt, read godoc documentation from within Emacs, modify
and clean up the list of package imports or interact with the
Playground (uploading and downloading pastes).

The following extra functions are defined:

- `gofmt'
- `godoc' and `godoc-at-point'
- `go-import-add'
- `go-remove-unused-imports'
- `go-goto-arguments'
- `go-goto-docstring'
- `go-goto-function'
- `go-goto-function-name'
- `go-goto-imports'
- `go-goto-return-values'
- `go-goto-method-receiver'
- `go-play-buffer' and `go-play-region'
- `go-download-play'
- `godef-describe' and `godef-jump'
- `go-coverage'
- `go-set-project'
- `go-reset-gopath'

If you want to automatically run `gofmt' before saving a file,
add the following hook to your emacs configuration:

\(add-hook 'before-save-hook #'gofmt-before-save)

If you want to use `godef-jump' instead of etags (or similar),
consider binding godef-jump to `M-.', which is the default key
for `find-tag':

\(add-hook 'go-mode-hook (lambda ()
                          (local-set-key (kbd \"M-.\") #'godef-jump)))

Please note that godef is an external dependency. You can install
it with

go get github.com/rogpeppe/godef


If you're looking for even more integration with Go, namely
on-the-fly syntax checking, auto-completion and snippets, it is
recommended that you look at flycheck
\(see URL `https://github.com/flycheck/flycheck') or flymake in combination
with goflymake (see URL `https://github.com/dougm/goflymake'), gocode
\(see URL `https://github.com/nsf/gocode'), go-eldoc
\(see URL `github.com/syohex/emacs-go-eldoc') and yasnippet-go
\(see URL `https://github.com/dominikh/yasnippet-go')

\(fn)" t nil)

(add-to-list 'auto-mode-alist (cons "\\.go\\'" 'go-mode))

(autoload 'gofmt-before-save "go-mode" "\
Add this to .emacs to run gofmt on the current buffer when saving:
\(add-hook 'before-save-hook 'gofmt-before-save).

Note that this will cause ‘go-mode’ to get loaded the first time
you save any file, kind of defeating the point of autoloading." t nil)

(autoload 'godoc "go-mode" "\
Show Go documentation for QUERY, much like \\<go-mode-map>\\[man].

\(fn QUERY)" t nil)

(autoload 'go-download-play "go-mode" "\
Download a paste from the playground and insert it in a Go buffer.
Tries to look for a URL at point.

\(fn URL)" t nil)

(autoload 'go-dot-mod-mode "go-mode" "\
A major mode for editing go.mod files.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("go\\.mod\\'" . go-dot-mod-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "go-mode" '("go-" "god" "gofmt")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/gnuplot-mode-20171013.1616/gnuplot-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/gnuplot-mode-20171013.1616/gnuplot-mode-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/gnuplot-mode-20171013.1616/gnuplot-mode-autoloads.el") (car load-path))))


(autoload 'gnuplot-mode "gnuplot-mode" "\
Major mode for editing gnuplot files

\(fn)" t nil)

(dolist (pattern '("\\.gnuplot\\'" "\\.gp\\'")) (add-to-list 'auto-mode-alist (cons pattern 'gnuplot-mode)))

(autoload 'gnuplot-compile "gnuplot-mode" "\
Runs gnuplot -persist as a synchronous process and passes the
current buffer to it.  Buffer must be visiting a file for it to
work.

\(fn)" t nil)

(autoload 'gnuplot-run-region "gnuplot-mode" "\
Send region to gnuplot, ensuring a final newline.  Doesn't
require buffer to be visiting a file.

\(fn START END)" t nil)

(autoload 'gnuplot-run-buffer "gnuplot-mode" "\
Send buffer to gnuplot, ensuring a final newline.  Doesn't
require buffer to be visiting a file.

\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/gnuplot-20220102.1637/gnuplot-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/gnuplot-20220102.1637/gnuplot-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/gnuplot-20220102.1637/gnuplot-autoloads.el") (car load-path))))



(autoload 'gnuplot-mode "gnuplot" "\
Major mode for editing and executing GNUPLOT scripts.
This was written with version 4.6 of gnuplot in mind, but should
work with newer and older versions.

Report bugs at https://github.com/emacsorphanage/gnuplot/issues

                            ------O------

Gnuplot-mode includes two different systems for keyword
completion and documentation lookup: a newer one,
`gnuplot-context-sensitive-mode' (enabled by default), and a
older one which extracts keywords from gnuplot's Info file.  Both
systems allow looking up documentation in the Info file.  The
older system also depends having the info file properly installed
to make a list of keywords.

The info file should be installed by default with the Gnuplot
distribution, or is available at the `gnuplot-mode' web page:
https://github.com/emacsorphanage/gnuplot/

With the new context-sensitive mode active, gnuplot-mode can also
provide function/`eldoc-mode' syntax hints as you type.  This requires a
separate file of strings, `gnuplot-eldoc.el', which is also
provided by recent Gnuplot distributions.

                            ------O------

There are several known shortcomings of `gnuplot-mode', version 0.5g
and up.  Many of the shortcomings involve the graphical interface
\(refered to as the GUI) to setting arguments to plot options.  Here is
a list:

 1.  Currently there is no way for `gnuplot-mode' to know if information
     sent to gnuplot was correctly plotted.
 2.  \"plot\", \"splot\", and \"fit\" are handled in the GUI, but are
     a bit flaky.  Their arguments may not be read correctly from
     existing text, and continuation lines (common for plot and splot)
     are not supported.
 3.  The GUI does not know how to read from continuation lines.
 4.  Comma separated position arguments to plot options are
     unsupported in the GUI.  Colon separated datafile modifiers (used
     for plot, splot, and fit) are not supported either.  Arguments
     not yet supported by the GUI generate messages printed in grey
     text.
 5.  The GUI handling of \"hidden3d\" is flaky and \"cntrparam\" is
     unsupported.

                            ------O------

 Key bindings:
 \\{gnuplot-mode-map}" t nil)

(autoload 'gnuplot-make-buffer "gnuplot" "\
Open a new buffer in `gnuplot-mode'.
When invoked, it switches to a new, empty buffer visiting no file
and then starts `gnuplot-mode'.

It is convenient to bind this function to a global key sequence.  For
example, to make the F10 key open a gnuplot script buffer, put the
following in your .emacs file:
     (autoload 'gnuplot-make-buffer \"gnuplot\"
               \"open a buffer in gnuplot mode\" t)
     (global-set-key [(f10)] 'gnuplot-make-buffer)" t nil)

(autoload 'run-gnuplot "gnuplot" "\
Run an inferior Gnuplot process." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gnuplot" '("gnuplot-")))



(autoload 'gnuplot-context-sensitive-mode "gnuplot-context" "\
Use context-sensitive completion and help in gnuplot-mode.

If called interactively, enable Gnuplot-Context-Sensitive mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

When context-sensitive mode is enabled, gnuplot-mode tries to
provide more useful completions and help suggestions for built-in
keywords and functions by parsing each command as you type.  It
attempts to take into account Gnuplot's many abbreviated
keywords.  For example, with point at the end of a line reading
\"plot 'datafile' w \", typing \\[completion-at-point] will pop
up a list of plotting styles.

Key bindings:

\\[completion-at-point] will complete the keyword at point based
on its context in the command. To make keyword completion work on
pressing TAB, set `tab-always-indent' to `complete', or customize
`gnuplot-tab-completion' to make this automatic in gnuplot-mode
buffers.

\\[gnuplot-info-at-point] will try to find the most relevant
Gnuplot info node for the construction at point, prompting for a
node name if nothing is found.

\\[gnuplot-help-function] will pop up a brief summary of the
syntax at point in the minibuffer. To have one-line syntax
summaries appear in the echo area as you type, toggle
`eldoc-mode' or customize `gnuplot-eldoc-mode'.

To choose whether to use this mode by default in Gnuplot buffers,
customize the variable
`gnuplot-use-context-sensitive-completion'.

Note: help strings for eldoc-mode and \\[gnuplot-help-function]
need to be provided in an Emacs-readable form by the Gnuplot
distribution. See gnuplot-context.el for details.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gnuplot-context" '("gnuplot-")))



(autoload 'gnuplot-gui-swap-simple-complete "gnuplot-gui" nil t nil)

(autoload 'gnuplot-gui-mouse-set "gnuplot-gui" "\
Use the mouse to begin setting options using a GUI interface.
EVENT is a mouse event.  Bound to \\[gnuplot-gui-mouse-set]
Note that \"plot\", \"splot\", \"fit\", and \"cntrparam\" are not
currently supported.

\(fn EVENT)" t nil)

(autoload 'gnuplot-gui-set-options-and-insert "gnuplot-gui" "\
Insert arguments using a GUI interface.
Determine contents of current line and set up the appropriate GUI
frame.  Bound to \\[gnuplot-gui-set-options-and-insert]
Note that \"cntrparam\" is not currently supported." t nil)

(autoload 'gnuplot-gui-toggle-popup "gnuplot-gui" nil t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gnuplot-gui" '("gnuplot-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/ghub-20220403.1248/ghub-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/ghub-20220403.1248/ghub-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/ghub-20220403.1248/ghub-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "buck" '("buck-default-host")))



(autoload 'ghub-clear-caches "ghub" "\
Clear all caches that might negatively affect Ghub.

If a library that is used by Ghub caches incorrect information
such as a mistyped password, then that can prevent Ghub from
asking the user for the correct information again.

Set `url-http-real-basic-auth-storage' to nil
and call `auth-source-forget+'." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ghub" '("ghub-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ghub-graphql" '("ghub-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "glab" '("glab-default-host")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gogs" '("gogs-default-host")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gsexp" '("gsexp-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gtea" '("gtea-default-host")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/a-20210929.1510/a-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/a-20210929.1510/a-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/a-20210929.1510/a-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "a" '("a-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/github-review-20211029.243/github-review-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/github-review-20211029.243/github-review-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/github-review-20211029.243/github-review-autoloads.el") (car load-path))))



(autoload 'github-review-forge-pr-at-point "github-review" "\
Review the forge pull request at point." t nil)

(autoload 'github-review-start "github-review" "\
Start review given PR URL.

\(fn URL)" t nil)

(autoload 'github-review-approve "github-review" "\
Approve a PR (to be run from a buffer corresponding to a review)." t nil)

(autoload 'github-review-reject "github-review" "\
Reject a PR (to be run from a buffer corresponding to a review)." t nil)

(autoload 'github-review-comment "github-review" "\
Comment on a PR (to be run from a buffer corresponding to a review)." t nil)

(autoload 'github-review-mode "github-review" "\
Major mode for code review

\(fn)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "github-review" '("github-review-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/git-20140128.1041/git-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/git-20140128.1041/git-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/git-20140128.1041/git-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git" '("git-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/git-walktree-20191101.302/git-walktree-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/git-walktree-20191101.302/git-walktree-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/git-walktree-20191101.302/git-walktree-autoloads.el") (car load-path))))



(autoload 'git-walktree-open "git-walktree" "\
Open git tree buffer of COMMITISH.
When PATH was given and non-nil open that, otherwise try to open current path.
If target path is not found in COMMITISH tree, go up path and try again until found.

\(fn COMMITISH &optional PATH)" t nil)

(defalias 'git-walktree 'git-walktree-open)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git-walktree" '("git-walktree-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git-walktree-mode" '("git-walktree-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git-walktree-read" '("git-walktree-read--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git-walktree-utils" '("git-walktree-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/git-timemachine-20220324.1057/git-timemachine-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/git-timemachine-20220324.1057/git-timemachine-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/git-timemachine-20220324.1057/git-timemachine-autoloads.el") (car load-path))))



(autoload 'git-timemachine-toggle "git-timemachine" "\
Toggle git timemachine mode." t nil)

(autoload 'git-timemachine "git-timemachine" "\
Enable git timemachine for file of current buffer." t nil)

(autoload 'git-timemachine-switch-branch "git-timemachine" "\
Enable git timemachine for current buffer, switching to GIT-BRANCH.

\(fn GIT-BRANCH)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git-timemachine" '("git-timemachine-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/git-modes-20211020.2306/git-modes-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/git-modes-20211020.2306/git-modes-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/git-modes-20211020.2306/git-modes-autoloads.el") (car load-path))))



(autoload 'gitattributes-mode "gitattributes-mode" "\
A major mode for editing .gitattributes files.
\\{gitattributes-mode-map}

\(fn)" t nil)

(dolist (pattern '("/\\.gitattributes\\'" "/info/attributes\\'" "/git/attributes\\'")) (add-to-list 'auto-mode-alist (cons pattern #'gitattributes-mode)))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gitattributes-mode" '("gitattributes-mode-")))



(autoload 'gitconfig-mode "gitconfig-mode" "\
A major mode for editing .gitconfig files.

\(fn)" t nil)

(dolist (pattern '("/\\.gitconfig\\'" "/\\.git/config\\'" "/modules/.*/config\\'" "/git/config\\'" "/\\.gitmodules\\'" "/etc/gitconfig\\'")) (add-to-list 'auto-mode-alist (cons pattern 'gitconfig-mode)))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gitconfig-mode" '("gitconfig-")))



(autoload 'gitignore-mode "gitignore-mode" "\
A major mode for editing .gitignore files.

\(fn)" t nil)

(dolist (pattern (list "/\\.gitignore\\'" "/info/exclude\\'" "/git/ignore\\'")) (add-to-list 'auto-mode-alist (cons pattern 'gitignore-mode)))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "gitignore-mode" '("gitignore-mode-font-lock-keywords")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/git-link-20220217.2315/git-link-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/git-link-20220217.2315/git-link-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/git-link-20220217.2315/git-link-autoloads.el") (car load-path))))



(autoload 'git-link "git-link" "\
Create a URL representing the current buffer's location in its
GitHub/Bitbucket/GitLab/... repository at the current line number
or active region. The URL will be added to the kill ring.  If
`git-link-open-in-browser' is non-nil also call `browse-url'.

With a prefix argument of - generate a link without line number(s).
Also see `git-link-use-single-line-number'.

With any other prefix argument prompt for the remote's name.
Defaults to \"origin\".

\(fn REMOTE START END)" t nil)

(autoload 'git-link-commit "git-link" "\
Create a URL representing the commit for the hash under point
in the current buffer's GitHub/Bitbucket/GitLab/...
repository. The URL will be added to the kill ring.

With a prefix argument prompt for the remote's name.
Defaults to \"origin\".

\(fn REMOTE)" t nil)

(autoload 'git-link-homepage "git-link" "\
Create a URL representing the homepage of the current
buffer's GitHub/Bitbucket/GitLab/... repository. The
URL will be added to the kill ring.

With a prefix argument prompt for the remote's name.
Defaults to \"origin\".

\(fn REMOTE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git-link" '("git-link-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/git-gutter+-20151204.1723/git-gutter+-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/git-gutter+-20151204.1723/git-gutter+-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/git-gutter+-20151204.1723/git-gutter+-autoloads.el") (car load-path))))


(autoload 'git-gutter+-mode "git-gutter+" "\
Git-Gutter mode

\(fn &optional ARG)" t nil)

(defvar global-git-gutter+-mode nil "\
Non-nil if Global Git-Gutter+ mode is enabled.
See the `global-git-gutter+-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-git-gutter+-mode'.")

(custom-autoload 'global-git-gutter+-mode "git-gutter+" nil)

(autoload 'global-git-gutter+-mode "git-gutter+" "\
Toggle Global Git-Gutter+ mode on or off.
With a prefix argument ARG, enable Global Git-Gutter+ mode if ARG is
positive, and disable it otherwise.  If called from Lisp, enable
the mode if ARG is omitted or nil, and toggle it if ARG is `toggle'.
\\{global-git-gutter+-mode-map}

\(fn &optional ARG)" t nil)

(autoload 'git-gutter+-commit "git-gutter+" "\
Commit staged changes. If nothing is staged, ask to stage the current buffer.

\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/fringe-helper-20140620.2109/fringe-helper-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/fringe-helper-20140620.2109/fringe-helper-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/fringe-helper-20140620.2109/fringe-helper-autoloads.el") (car load-path))))



)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/git-gutter-fringe+-20140729.1103/git-gutter-fringe+-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/git-gutter-fringe+-20140729.1103/git-gutter-fringe+-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/git-gutter-fringe+-20140729.1103/git-gutter-fringe+-autoloads.el") (car load-path))))



)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/git-gutter-20211222.913/git-gutter-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/git-gutter-20211222.913/git-gutter-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/git-gutter-20211222.913/git-gutter-autoloads.el") (car load-path))))



(autoload 'git-gutter:linum-setup "git-gutter" "\
Setup for linum-mode." nil nil)

(autoload 'git-gutter-mode "git-gutter" "\
Git-Gutter mode

If called interactively, enable Git-Gutter mode if ARG is positive, and disable
it if ARG is zero or negative.  If called from Lisp, also enable the mode if
ARG is omitted or nil, and toggle it if ARG is `toggle'; disable the mode
otherwise.

\(fn &optional ARG)" t nil)

(put 'global-git-gutter-mode 'globalized-minor-mode t)

(defvar global-git-gutter-mode nil "\
Non-nil if Global Git-Gutter mode is enabled.
See the `global-git-gutter-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-git-gutter-mode'.")

(custom-autoload 'global-git-gutter-mode "git-gutter" nil)

(autoload 'global-git-gutter-mode "git-gutter" "\
Toggle Git-Gutter mode in all buffers.
With prefix ARG, enable Global Git-Gutter mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Git-Gutter mode is enabled in all buffers where
`git-gutter--turn-on' would do it.
See `git-gutter-mode' for more information on Git-Gutter mode.

\(fn &optional ARG)" t nil)

(autoload 'git-gutter "git-gutter" "\
Show diff information in gutter" t nil)

(autoload 'git-gutter:toggle "git-gutter" "\
Toggle to show diff information." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "git-gutter" '("git-gutter")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/git-blamed-20161028.1926/git-blamed-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/git-blamed-20161028.1926/git-blamed-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/git-blamed-20161028.1926/git-blamed-autoloads.el") (car load-path))))


(autoload 'git-blamed-mode "git-blamed" "\
Toggle minor mode for displaying Git blame

With prefix ARG, turn the mode on if ARG is positive.

\(fn &optional ARG)" t nil)

(autoload 'git-reblame "git-blamed" "\
Recalculate all blame information in the current buffer

\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/geiser-20220327.2323/geiser-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/geiser-20220327.2323/geiser-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/geiser-20220327.2323/geiser-autoloads.el") (car load-path))))



(defconst geiser-elisp-dir (file-name-directory load-file-name) "\
Directory containing Geiser's Elisp files.")

(autoload 'geiser-version "geiser-version" "\
Echo Geiser's version." t)

(autoload 'geiser-unload "geiser-reload" "\
Unload all Geiser code." t)

(autoload 'geiser-reload "geiser-reload" "\
Reload Geiser code." t)

(autoload 'geiser "geiser-repl" "\
Start a Geiser REPL, or switch to a running one." t)

(autoload 'run-geiser "geiser-repl" "\
Start a Geiser REPL." t)

(autoload 'geiser-connect "geiser-repl" "\
Start a Geiser REPL connected to a remote server." t)

(autoload 'geiser-connect-local "geiser-repl" "\
Start a Geiser REPL connected to a remote server over a Unix-domain socket." t)

(autoload 'switch-to-geiser "geiser-repl" "\
Switch to a running one Geiser REPL." t)

(autoload 'geiser-mode "geiser-mode" "\
Minor mode adding Geiser REPL interaction to Scheme buffers." t)

(autoload 'turn-on-geiser-mode "geiser-mode" "\
Enable Geiser's mode (useful in Scheme buffers)." t)

(autoload 'turn-off-geiser-mode "geiser-mode" "\
Disable Geiser's mode (useful in Scheme buffers)." t)

(autoload 'geiser-activate-implementation "geiser-impl" "\
Register the given implementation as active.")

(autoload 'geiser-implementation-extension "geiser-impl" "\
Register a file extension as handled by a given implementation.")

(mapc (lambda (group) (custom-add-load group (symbol-name group)) (custom-add-load 'geiser (symbol-name group))) '(geiser geiser-repl geiser-autodoc geiser-doc geiser-debug geiser-faces geiser-mode geiser-image geiser-implementation geiser-xref))

(autoload 'geiser-mode--maybe-activate "geiser-mode")

(add-hook 'scheme-mode-hook 'geiser-mode--maybe-activate)



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-autodoc" '("geiser-autodoc-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-base" '("geiser--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-company" '("geiser-company--")))



(autoload 'geiser-add-to-load-path "geiser-compile" "\
Add a new directory to running Scheme's load path.
When called interactively, this function will ask for the path to
add, defaulting to the current buffer's directory.

\(fn PATH)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-compile" '("geiser-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-completion" '("geiser-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-connection" '("geiser-con")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-custom" '("geiser-custom-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-debug" '("geiser-debug-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-doc" '("geiser-doc-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-edit" '("geiser-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-eval" '("geiser-eval-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-image" '("geiser-")))



(autoload 'geiser-impl--add-to-alist "geiser-impl" "\


\(fn KIND WHAT IMPL &optional APPEND)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-impl" '("define-geiser-implementation" "geiser-" "with--geiser-implementation")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-log" '("geiser-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-menu" '("geiser-menu--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-mode" '("geiser-" "turn-o")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-popup" '("geiser-popup-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-reload" '("geiser-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-repl" '("geiser" "run-geiser" "switch-to-geiser")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-syntax" '("geiser-syntax--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-table" '("geiser-table-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "geiser-xref" '("geiser-xref-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/add-node-modules-path-20220315.340/add-node-modules-path-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/add-node-modules-path-20220315.340/add-node-modules-path-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/add-node-modules-path-20220315.340/add-node-modules-path-autoloads.el") (car load-path))))



(defvar add-node-modules-path-command "npm bin" "\
Command to find the bin path.")

(custom-autoload 'add-node-modules-path-command "add-node-modules-path" t)

(defvar add-node-modules-path-debug nil "\
Enable verbose output when non nil.")

(custom-autoload 'add-node-modules-path-debug "add-node-modules-path" t)

(autoload 'add-node-modules-path "add-node-modules-path" "\
Run `npm bin` command and add the path to the `exec-path`.
If `npm` command fails, it does nothing." t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/company-20220328.155/company-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/company-20220328.155/company-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/company-20220328.155/company-autoloads.el") (car load-path))))



(autoload 'company-mode "company" "\
\"complete anything\"; is an in-buffer completion framework.
Completion starts automatically, depending on the values
`company-idle-delay' and `company-minimum-prefix-length'.

If called interactively, enable Company mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

Completion can be controlled with the commands:
`company-complete-common', `company-complete-selection', `company-complete',
`company-select-next', `company-select-previous'.  If these commands are
called before `company-idle-delay', completion will also start.

Completions can be searched with `company-search-candidates' or
`company-filter-candidates'.  These can be used while completion is
inactive, as well.

The completion data is retrieved using `company-backends' and displayed
using `company-frontends'.  If you want to start a specific backend, call
it interactively or use `company-begin-backend'.

By default, the completions list is sorted alphabetically, unless the
backend chooses otherwise, or `company-transformers' changes it later.

regular keymap (`company-mode-map'):

\\{company-mode-map}
keymap during active completions (`company-active-map'):

\\{company-active-map}

\(fn &optional ARG)" t nil)

(put 'global-company-mode 'globalized-minor-mode t)

(defvar global-company-mode nil "\
Non-nil if Global Company mode is enabled.
See the `global-company-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-company-mode'.")

(custom-autoload 'global-company-mode "company" nil)

(autoload 'global-company-mode "company" "\
Toggle Company mode in all buffers.
With prefix ARG, enable Global Company mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Company mode is enabled in all buffers where
`company-mode-on' would do it.
See `company-mode' for more information on Company mode.

\(fn &optional ARG)" t nil)

(autoload 'company-manual-begin "company" nil t nil)

(autoload 'company-complete "company" "\
Insert the common part of all candidates or the current selection.
The first time this is called, the common part is inserted, the second
time, or when the selection has been changed, the selected candidate is
inserted." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company" '("company-")))



(autoload 'company-abbrev "company-abbrev" "\
`company-mode' completion backend for abbrev.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-abbrev" '("company-abbrev-insert")))



(autoload 'company-bbdb "company-bbdb" "\
`company-mode' completion backend for BBDB.

\(fn COMMAND &optional ARG &rest IGNORE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-bbdb" '("company-bbdb-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-capf" '("company-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-clang" '("company-clang")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-cmake" '("company-cmake")))



(autoload 'company-css "company-css" "\
`company-mode' completion backend for `css-mode'.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-css" '("company-css-")))



(autoload 'company-dabbrev "company-dabbrev" "\
dabbrev-like `company-mode' completion backend.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-dabbrev" '("company-dabbrev-")))



(autoload 'company-dabbrev-code "company-dabbrev-code" "\
dabbrev-like `company-mode' backend for code.
The backend looks for all symbols in the current buffer that aren't in
comments or strings.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-dabbrev-code" '("company-dabbrev-code-")))



(autoload 'company-elisp "company-elisp" "\
`company-mode' completion backend for Emacs Lisp.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-elisp" '("company-elisp-")))



(autoload 'company-etags "company-etags" "\
`company-mode' completion backend for etags.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-etags" '("company-etags-")))



(autoload 'company-files "company-files" "\
`company-mode' completion backend existing file names.
Completions works for proper absolute and relative files paths.
File paths with spaces are only supported inside strings.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-files" '("company-file")))



(autoload 'company-gtags "company-gtags" "\
`company-mode' completion backend for GNU Global.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-gtags" '("company-gtags-")))



(autoload 'company-ispell "company-ispell" "\
`company-mode' completion backend using Ispell.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-ispell" '("company-ispell-")))



(autoload 'company-keywords "company-keywords" "\
`company-mode' backend for programming language keywords.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-keywords" '("company-keywords-")))



(autoload 'company-nxml "company-nxml" "\
`company-mode' completion backend for `nxml-mode'.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-nxml" '("company-nxml-")))



(autoload 'company-oddmuse "company-oddmuse" "\
`company-mode' completion backend for `oddmuse-mode'.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-oddmuse" '("company-oddmuse-")))



(autoload 'company-semantic "company-semantic" "\
`company-mode' completion backend using CEDET Semantic.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-semantic" '("company-semantic-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-template" '("company-template-")))



(autoload 'company-tempo "company-tempo" "\
`company-mode' completion backend for tempo.

\(fn COMMAND &optional ARG &rest IGNORED)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-tempo" '("company-tempo-")))



(autoload 'company-tng-frontend "company-tng" "\
When the user changes the selection at least once, this
frontend will display the candidate in the buffer as if it's
already there and any key outside of `company-active-map' will
confirm the selection and finish the completion.

\(fn COMMAND)" nil nil)

(define-obsolete-function-alias 'company-tng-configure-default 'company-tng-mode "0.9.14" "\
Applies the default configuration to enable company-tng.")

(defvar company-tng-mode nil "\
Non-nil if Company-Tng mode is enabled.
See the `company-tng-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `company-tng-mode'.")

(custom-autoload 'company-tng-mode "company-tng" nil)

(autoload 'company-tng-mode "company-tng" "\
This minor mode enables `company-tng-frontend'.

If called interactively, enable Company-Tng mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-tng" '("company-tng-")))



(autoload 'company-yasnippet "company-yasnippet" "\
`company-mode' backend for `yasnippet'.

This backend should be used with care, because as long as there are
snippets defined for the current major mode, this backend will always
shadow backends that come after it.  Recommended usages:

* In a buffer-local value of `company-backends', grouped with a backend or
  several that provide actual text completions.

  (add-hook \\='js-mode-hook
            (lambda ()
              (set (make-local-variable \\='company-backends)
                   \\='((company-dabbrev-code company-yasnippet)))))

* After keyword `:with', grouped with other backends.

  (push \\='(company-semantic :with company-yasnippet) company-backends)

* Not in `company-backends', just bound to a key.

  (global-set-key (kbd \"C-c y\") \\='company-yasnippet)

\(fn COMMAND &optional ARG &rest IGNORE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "company-yasnippet" '("company-yasnippet-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/frontside-javascript-20220315.1057/frontside-javascript-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/frontside-javascript-20220315.1057/frontside-javascript-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/frontside-javascript-20220315.1057/frontside-javascript-autoloads.el") (car load-path))))



(autoload 'frontside-javascript "frontside-javascript" "\
Make Emacs have your back no matter what JavaScript project you'refaced with.
This is the main entry point which configures JS, JSX, TS, TSX, and NodeJS development" t nil)

(setq use-package--frontside-javascript--pre-config-hook #'frontside-javascript)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "frontside-javascript" '("frontside-javascript--deno-project-p")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/free-keys-20211116.1501/free-keys-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/free-keys-20211116.1501/free-keys-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/free-keys-20211116.1501/free-keys-autoloads.el") (car load-path))))



(autoload 'free-keys "free-keys" "\
Display free keys in current buffer.

A free key is a key that has no associated key-binding as
determined by function `key-binding'.

By default, keys on `free-keys-keys' list with no prefix sequence
are considered, possibly together with modifier keys from
`free-keys-modifiers'.  You can change the prefix sequence by
hitting 'p' in the *Free keys* buffer.  Prefix is supplied in
format recognized by `kbd', for example \"C-x\".

\(fn &optional PREFIX BUFFER)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "free-keys" '("free-keys-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/format-all-20220404.512/format-all-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/format-all-20220404.512/format-all-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/format-all-20220404.512/format-all-autoloads.el") (car load-path))))



(autoload 'format-all-buffer "format-all" "\
Auto-format the source code in the current buffer.

No disk files are touched - the buffer doesn't even need to be
saved.  If you don't like the results of the formatting, you can
use ordinary undo to get your code back to its previous state.

You will need to install external programs to do the formatting.
If the command can't find the program that it needs, it will try
to tell you how you might be able to install it on your operating
system. Only BibTeX, Emacs Lisp and Ledger are formatted without an
external program.

A suitable formatter is selected according to the `major-mode' of
the buffer.  Many popular programming languages are supported.
It is fairly easy to add new languages that have an external
formatter.  When called interactively or PROMPT-P is non-nil, a
missing formatter is prompted in the minibuffer.

If PROMPT is non-nil (or the function is called as an interactive
command), a missing formatter is prompted in the minibuffer.  If
PROMPT is the symbol `always' (or a prefix argument is given),
the formatter is prompted for even if one has already been set.

If any errors or warnings were encountered during formatting,
they are shown in a buffer called *format-all-errors*.

\(fn &optional PROMPT)" t nil)

(autoload 'format-all-region "format-all" "\
Auto-format the source code in the current region.

Like `format-all-buffer' but format only the active region
instead of the entire buffer.  This requires support from the
formatter.

Called non-interactively, START and END delimit the region.
The PROMPT argument works as for `format-all-buffer'.

\(fn START END &optional PROMPT)" t nil)

(autoload 'format-all-mode "format-all" "\
Toggle automatic source code formatting before save.

When this minor mode (FmtAll) is enabled, `format-all-buffer' is
automatically called to format your code each time before you
save the buffer.

The mode is buffer-local and needs to be enabled separately each
time a file is visited. You may want to use `add-hook' in your
`user-init-file' to enable the mode based on buffer modes. E.g.:

    (add-hook 'prog-mode-hook 'format-all-mode)

To use a default formatter for projects that don't have one, add
this too:

    (add-hook 'prog-mode-hook 'format-all-ensure-formatter)

When `format-all-mode' is called as a Lisp function, the mode is
toggled if ARG is ‘toggle’, disabled if ARG is a negative integer
or zero, and enabled otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "format-all" '("atsfmt" "auctex" "beautysh" "black" "brittany" "bsrefmt" "buildifier" "cabal-fmt" "cmake-format" "crystal" "dart" "define-format-all-formatter" "dfmt" "dhall" "dockfmt" "elm-format" "emacs-" "fantomas" "fish-indent" "fprettify" "gawk" "gleam" "hindent" "html-tidy" "isort" "istyle-verilog" "jsonnetfmt" "ktlint" "latexindent" "ledger-mode" "lua-fmt" "mix-format" "nginxfmt" "nix" "ocp-indent" "ormolu" "perltidy" "pgformatter" "prettier" "pur" "raco-fmt" "rescript" "scalafmt" "shfmt" "snakefmt" "sqlformat" "swiftformat" "terraform-fmt" "ts-standard" "v-fmt" "yapf" "zprint")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/emacsql-20220101.1820/emacsql-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/emacsql-20220101.1820/emacsql-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/emacsql-20220101.1820/emacsql-autoloads.el") (car load-path))))



(autoload 'emacsql-show-last-sql "emacsql" "\
Display the compiled SQL of the s-expression SQL expression before point.
A prefix argument causes the SQL to be printed into the current buffer.

\(fn &optional PREFIX)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "emacsql" '("emacsql-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "emacsql-compiler" '("emacsql-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/emacsql-sqlite-20220218.1543/emacsql-sqlite-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/emacsql-sqlite-20220218.1543/emacsql-sqlite-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/emacsql-sqlite-20220218.1543/emacsql-sqlite-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "emacsql-sqlite" '("emacsql-sqlite-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/closql-20220402.1037/closql-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/closql-20220402.1037/closql-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/closql-20220402.1037/closql-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "closql" '("closql-" "eieio-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/forge-20220406.1227/forge-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/forge-20220406.1227/forge-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/forge-20220406.1227/forge-autoloads.el") (car load-path))))



(defvar forge-add-default-bindings t "\
Whether to add Forge's bindings to various Magit keymaps.
If you want to disable this, then you must set this to nil before
`magit' is loaded.  If you do it before `forge' but after `magit'
is loaded, then `magit-mode-map' ends up being modified anyway.")

(with-eval-after-load 'magit-mode (when forge-add-default-bindings (define-key magit-mode-map "'" #'forge-dispatch) (define-key magit-mode-map "N" #'forge-dispatch)))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge" '("forge-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-bitbucket" '("forge-bitbucket-repository")))


 (autoload 'forge-dispatch "forge-commands" nil t)

(autoload 'forge-pull "forge-commands" "\
Pull topics from the forge repository.

With a prefix argument and if the repository has not been fetched
before, then read a date from the user and limit pulled topics to
those that have been updated since then.

If pulling is too slow, then also consider setting the Git variable
`forge.omitExpensive' to `true'.

\(fn &optional REPO UNTIL)" t nil)

(autoload 'forge-pull-notifications "forge-commands" "\
Fetch notifications for all repositories from the current forge." t nil)

(autoload 'forge-pull-topic "forge-commands" "\
Pull the API data for the current topic.
If there is no current topic or with a prefix argument read a
TOPIC to pull instead.

\(fn TOPIC)" t nil)

(autoload 'forge-browse-dwim "forge-commands" "\
Visit a topic, branch or commit using a browser.
Prefer a topic over a branch and that over a commit." t nil)

(autoload 'forge-browse-commit "forge-commands" "\
Visit the url corresponding to REV using a browser.

\(fn REV)" t nil)

(autoload 'forge-copy-url-at-point-as-kill "forge-commands" "\
Copy the url of the thing at point." t nil)

(autoload 'forge-browse-branch "forge-commands" "\
Visit the url corresponding BRANCH using a browser.

\(fn BRANCH)" t nil)

(autoload 'forge-browse-remote "forge-commands" "\
Visit the url corresponding to REMOTE using a browser.

\(fn REMOTE)" t nil)

(autoload 'forge-browse-repository "forge-commands" "\
View the current repository in a separate buffer.

\(fn REPO)" t nil)

(autoload 'forge-browse-topic "forge-commands" "\
Visit the current topic using a browser." t nil)

(autoload 'forge-browse-pullreqs "forge-commands" "\
Visit the pull-requests of the current repository using a browser." t nil)

(autoload 'forge-browse-pullreq "forge-commands" "\
Visit the url corresponding to PULLREQ using a browser.

\(fn PULLREQ)" t nil)

(autoload 'forge-browse-issues "forge-commands" "\
Visit the issues of the current repository using a browser." t nil)

(autoload 'forge-browse-issue "forge-commands" "\
Visit the current issue using a browser.
If there is no current issue or with a prefix argument
read an ISSUE to visit.

\(fn ISSUE)" t nil)

(autoload 'forge-browse-post "forge-commands" "\
Visit the current post using a browser." t nil)

(autoload 'forge-visit-topic "forge-commands" "\
View the current topic in a separate buffer.
If there is no current topic or with a prefix argument
read a topic to visit instead.

\(fn TOPIC)" t nil)

(autoload 'forge-visit-pullreq "forge-commands" "\
View the current pull-request in a separate buffer.
If there is no current pull-request or with a prefix argument
read a PULLREQ to visit instead.

\(fn PULLREQ)" t nil)

(autoload 'forge-visit-issue "forge-commands" "\
Visit the current issue in a separate buffer.
If there is no current issue or with a prefix argument
read an ISSUE to visit instead.

\(fn ISSUE)" t nil)

(autoload 'forge-visit-repository "forge-commands" "\
View the current repository in a separate buffer.

\(fn REPO)" t nil)

(autoload 'forge-branch-pullreq "forge-commands" "\
Create and configure a new branch from a pull-request.
Please see the manual for more information.

\(fn PULLREQ)" t nil)

(autoload 'forge-checkout-pullreq "forge-commands" "\
Create, configure and checkout a new branch from a pull-request.
Please see the manual for more information.

\(fn PULLREQ)" t nil)

(autoload 'forge-checkout-worktree "forge-commands" "\
Create, configure and checkout a new worktree from a pull-request.
This is like `forge-checkout-pullreq', except that it also
creates a new worktree. Please see the manual for more
information.

\(fn PATH PULLREQ)" t nil)

(autoload 'forge-fork "forge-commands" "\
Fork the current repository to FORK and add it as a REMOTE.
If the fork already exists, then that isn't an error; the remote
is added anyway.  Currently this only supports Github and Gitlab.

\(fn FORK REMOTE)" t nil)

(autoload 'forge-list-notifications "forge-commands" "\
List notifications." t nil)

(autoload 'forge-add-pullreq-refspec "forge-commands" "\
Configure Git to fetch all pull-requests.
This is done by adding \"+refs/pull/*/head:refs/pullreqs/*\"
to the value of `remote.REMOTE.fetch', where REMOTE is the
upstream remote.  Also fetch from REMOTE." t nil)

(autoload 'forge-add-repository "forge-commands" "\
Add a repository to the database.
Offer to either pull topics (now and in the future) or to only
pull individual topics when the user invokes `forge-pull-topic'.

\(fn URL)" t nil)

(function-put 'forge-add-repository 'interactive-only 't)

(autoload 'forge-add-user-repositories "forge-commands" "\
Add all of USER's repositories from HOST to the database.
This may take a while.  Only Github is supported at the moment.

\(fn HOST USER)" t nil)

(autoload 'forge-add-organization-repositories "forge-commands" "\
Add all of ORGANIZATION's repositories from HOST to the database.
This may take a while.  Only Github is supported at the moment.

\(fn HOST ORGANIZATION)" t nil)

(autoload 'forge-merge "forge-commands" "\
Merge the current pull-request using METHOD using the forge's API.

If there is no current pull-request or with a prefix argument,
then read pull-request PULLREQ to visit instead.

Use of this command is discouraged.  Unless the remote repository
is configured to disallow that, you should instead merge locally
and then push the target branch.  Forges detect that you have
done that and respond by automatically marking the pull-request
as merged.

\(fn PULLREQ METHOD)" t nil)

(autoload 'forge-remove-repository "forge-commands" "\
Remove a repository from the database.

\(fn HOST OWNER NAME)" t nil)

(autoload 'forge-remove-topic-locally "forge-commands" "\
Remove a topic from the local database only.
Due to how the supported APIs work, it would be too expensive to
automatically remove topics from the local datbase that were
removed from the forge.  The purpose of this command is to allow
you to manually clean up the local database.

\(fn TOPIC)" t nil)

(autoload 'forge-reset-database "forge-commands" "\
Move the current database file to the trash.
This is useful after the database scheme has changed, which will
happen a few times while the forge functionality is still under
heavy development." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-commands" '("forge-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-core" '("forge-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-db" '("forge-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-gitea" '("forge-gitea-repository")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-github" '("forge-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-gitlab" '("forge-gitlab-repository")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-gogs" '("forge-gogs-repository")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-issue" '("forge-")))



(autoload 'forge-list-topics "forge-list" "\
List topics of the current repository in a separate buffer.

\(fn ID)" t nil)

(autoload 'forge-list-issues "forge-list" "\
List issues of the current repository in a separate buffer.

\(fn ID)" t nil)

(autoload 'forge-list-labeled-issues "forge-list" "\
List issues of the current repository that have LABEL.
List them in a separate buffer.

\(fn ID LABEL)" t nil)

(autoload 'forge-list-assigned-issues "forge-list" "\
List issues of the current repository that are assigned to you.
List them in a separate buffer.

\(fn ID)" t nil)

(autoload 'forge-list-owned-issues "forge-list" "\
List open issues from all your Github repositories.
Options `forge-owned-accounts' and `forge-owned-ignored'
controls which repositories are considered to be owned by you.
Only Github is supported for now." t nil)

(autoload 'forge-list-pullreqs "forge-list" "\
List pull-requests of the current repository in a separate buffer.

\(fn ID)" t nil)

(autoload 'forge-list-labeled-pullreqs "forge-list" "\
List pull-requests of the current repository that have LABEL.
List them in a separate buffer.

\(fn ID LABEL)" t nil)

(autoload 'forge-list-assigned-pullreqs "forge-list" "\
List pull-requests of the current repository that are assigned to you.
List them in a separate buffer.

\(fn ID)" t nil)

(autoload 'forge-list-requested-reviews "forge-list" "\
List pull-requests of the current repository that are awaiting your review.
List them in a separate buffer.

\(fn ID)" t nil)

(autoload 'forge-list-owned-pullreqs "forge-list" "\
List open pull-requests from all your Github repositories.
Options `forge-owned-accounts' and `forge-owned-ignored'
controls which repositories are considered to be owned by you.
Only Github is supported for now." t nil)

(autoload 'forge-list-authored-pullreqs "forge-list" "\
List open pull-requests of the current repository that are authored by you.
List them in a separate buffer.

\(fn ID)" t nil)

(autoload 'forge-list-authored-issues "forge-list" "\
List open issues from the current repository that are authored by you.
List them in a separate buffer.

\(fn ID)" t nil)

(autoload 'forge-list-repositories "forge-list" "\
List known repositories in a separate buffer.
Here \"known\" means that an entry exists in the local database." t nil)

(autoload 'forge-list-owned-repositories "forge-list" "\
List your own known repositories in a separate buffer.
Here \"known\" means that an entry exists in the local database
and options `forge-owned-accounts' and `forge-owned-ignored'
controls which repositories are considered to be owned by you.
Only Github is supported for now." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-list" '("forge-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-notify" '("forge-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-post" '("forge-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-pullreq" '("forge-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-repo" '("forge-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-revnote" '("forge-revnote")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-semi" '("forge-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "forge-topic" '("forge-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/focus-autosave-mode-20160519.2116/focus-autosave-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/focus-autosave-mode-20160519.2116/focus-autosave-mode-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/focus-autosave-mode-20160519.2116/focus-autosave-mode-autoloads.el") (car load-path))))


(defvar focus-autosave-mode nil "\
Non-nil if Focus-Autosave mode is enabled.
See the `focus-autosave-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `focus-autosave-mode'.")

(custom-autoload 'focus-autosave-mode "focus-autosave-mode" nil)

(autoload 'focus-autosave-mode "focus-autosave-mode" "\
Automatically save all the modified files when the frame loses its focus.

\(fn &optional ARG)" t nil)

(autoload 'focus-autosave-local-mode "focus-autosave-mode" "\
Automatically save this buffer when the frame loses its focus.

\(fn &optional ARG)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/flymake-phpstan-20210714.1805/flymake-phpstan-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/flymake-phpstan-20210714.1805/flymake-phpstan-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/flymake-phpstan-20210714.1805/flymake-phpstan-autoloads.el") (car load-path))))



(autoload 'flymake-phpstan-turn-on "flymake-phpstan" "\
Enable `flymake-phpstan' as buffer-local Flymake backend." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flymake-phpstan" '("flymake-phpstan")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/flymake-markdownlint-20220320.1208/flymake-markdownlint-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/flymake-markdownlint-20220320.1208/flymake-markdownlint-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/flymake-markdownlint-20220320.1208/flymake-markdownlint-autoloads.el") (car load-path))))



(autoload 'flymake-markdownlint-setup "flymake-markdownlint" "\
Enable markdownlint flymake backend." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flymake-markdownlint" '("flymake-markdownlint")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/flycheck-phpstan-20210714.1805/flycheck-phpstan-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/flycheck-phpstan-20210714.1805/flycheck-phpstan-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/flycheck-phpstan-20210714.1805/flycheck-phpstan-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flycheck-phpstan" '("flycheck-phpstan--enabled-and-set-variable")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/flycheck-package-20210509.2323/flycheck-package-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/flycheck-package-20210509.2323/flycheck-package-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/flycheck-package-20210509.2323/flycheck-package-autoloads.el") (car load-path))))



(autoload 'flycheck-package-setup "flycheck-package" "\
Setup flycheck-package.
Add `flycheck-emacs-lisp-package' to `flycheck-checkers'." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flycheck-package" '("flycheck-package--start")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/flycheck-objc-clang-20210911.1023/flycheck-objc-clang-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/flycheck-objc-clang-20210911.1023/flycheck-objc-clang-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/flycheck-objc-clang-20210911.1023/flycheck-objc-clang-autoloads.el") (car load-path))))



(autoload 'flycheck-objc-clang-setup "flycheck-objc-clang" "\
Set up Flycheck for Objective-C using Clang." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flycheck-objc-clang" '("flycheck-objc-clang--syntax-checking-command")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/flycheck-css-colorguard-20161031.1122/flycheck-css-colorguard-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/flycheck-css-colorguard-20161031.1122/flycheck-css-colorguard-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/flycheck-css-colorguard-20161031.1122/flycheck-css-colorguard-autoloads.el") (car load-path))))


(autoload 'flycheck-css-colorguard-setup "flycheck-css-colorguard" "\
Setup Flycheck CSS Colorguard.
Add `css-colorguard' to `flycheck-checkers'.

\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/flow-minor-mode-20200905.1730/flow-minor-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/flow-minor-mode-20200905.1730/flow-minor-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/flow-minor-mode-20200905.1730/flow-minor-mode-autoloads.el") (car load-path))))



(autoload 'flow-minor-mode "flow-minor-mode" "\
Flow mode

If called interactively, enable Flow minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'flow-minor-enable-automatically "flow-minor-mode" "\
Search for a flow marker and enable flow-minor-mode." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flow-minor-mode" '("flow-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/flow-js2-mode-20191213.1004/flow-js2-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/flow-js2-mode-20191213.1004/flow-js2-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/flow-js2-mode-20191213.1004/flow-js2-mode-autoloads.el") (car load-path))))



(autoload 'flow-js2-mode "flow-js2-mode" "\
Minor mode for editing JS files with flow type annotations.

If called interactively, enable Flow-Js2 mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it
if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "flow-js2-mode" '("activate-flow-js2-mode" "flow-js2-" "js2-parse-flow-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/fill-column-indicator-20200806.2239/fill-column-indicator-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/fill-column-indicator-20200806.2239/fill-column-indicator-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/fill-column-indicator-20200806.2239/fill-column-indicator-autoloads.el") (car load-path))))



(autoload 'fci-mode "fill-column-indicator" "\
Toggle fci-mode on and off.
Fci-mode indicates the location of the fill column by drawing a
thin line (a `rule') at the fill column.

With prefix ARG, turn fci-mode on if and only if ARG is positive.

The following options control the appearance of the fill-column
rule: `fci-rule-column', `fci-rule-width', `fci-rule-color',
`fci-rule-use-dashes', `fci-dash-pattern', `fci-rule-character',
and `fci-rule-character-color'.  For further options, see the
Customization menu or the package file.  (See the latter for tips
on troubleshooting.)

\(fn &optional ARG)" t nil)

(autoload 'turn-on-fci-mode "fill-column-indicator" "\
Turn on fci-mode unconditionally." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "fill-column-indicator" '("fci-" "turn-off-fci-mode")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/faceup-20170925.1946/faceup-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/faceup-20170925.1946/faceup-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/faceup-20170925.1946/faceup-autoloads.el") (car load-path))))



(autoload 'faceup-view-buffer "faceup" "\
Display the faceup representation of the current buffer.

\(fn)" t nil)

(autoload 'faceup-write-file "faceup" "\
Save the faceup representation of the current buffer to the file FILE-NAME.

Unless a name is given, the file will be named xxx.faceup, where
xxx is the file name associated with the buffer.

If optional second arg CONFIRM is non-nil, this function
asks for confirmation before overwriting an existing file.
Interactively, confirmation is required unless you supply a prefix argument.

\(fn &optional FILE-NAME CONFIRM)" t nil)

(autoload 'faceup-render-view-buffer "faceup" "\
Convert BUFFER containing Faceup markup to a new buffer and display it.

\(fn &optional BUFFER)" t nil)

(autoload 'faceup-clean-buffer "faceup" "\
Remove faceup markup from buffer.

\(fn)" t nil)

(autoload 'faceup-defexplainer "faceup" "\
Defines an Ert explainer function for FUNCTION.

FUNCTION must return an explanation when the test fails and
`faceup-test-explain' is set.

\(fn FUNCTION)" nil t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "faceup" '("faceup-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/expand-region-20210708.1952/expand-region-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/expand-region-20210708.1952/expand-region-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/expand-region-20210708.1952/expand-region-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cc-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "clojure-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cperl-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "css-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "enh-ruby-mode-expansions" '("er/add-enh-ruby-mode-expansions")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "er-basic-expansions" '("er--" "er/mark-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "erlang-mode-expansions" '("er/add-erlang-mode-expansions")))



(autoload 'er/expand-region "expand-region" "\
Increase selected region by semantic units.

With prefix argument expands the region that many times.
If prefix argument is negative calls `er/contract-region'.
If prefix argument is 0 it resets point and mark to their state
before calling `er/expand-region' for the first time.

\(fn ARG)" t nil)



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "expand-region-core" '("er--" "er/")))



(let ((loads (get 'expand-region 'custom-loads))) (if (member '"expand-region-custom" loads) nil (put 'expand-region 'custom-loads (cons '"expand-region-custom" loads))))

(defvar expand-region-preferred-python-mode 'python "\
The name of your preferred python mode")

(custom-autoload 'expand-region-preferred-python-mode "expand-region-custom" t)

(defvar expand-region-guess-python-mode t "\
If expand-region should attempt to guess your preferred python mode")

(custom-autoload 'expand-region-guess-python-mode "expand-region-custom" t)

(defvar expand-region-autocopy-register "" "\
If set to a string of a single character (try \"e\"), then the
contents of the most recent expand or contract command will
always be copied to the register named after that character.")

(custom-autoload 'expand-region-autocopy-register "expand-region-custom" t)

(defvar expand-region-skip-whitespace t "\
If expand-region should skip past whitespace on initial expansion")

(custom-autoload 'expand-region-skip-whitespace "expand-region-custom" t)

(defvar expand-region-fast-keys-enabled t "\
If expand-region should bind fast keys after initial expand/contract")

(custom-autoload 'expand-region-fast-keys-enabled "expand-region-custom" t)

(defvar expand-region-contract-fast-key "-" "\
Key to use after an initial expand/contract to contract once more.")

(custom-autoload 'expand-region-contract-fast-key "expand-region-custom" t)

(defvar expand-region-reset-fast-key "0" "\
Key to use after an initial expand/contract to undo.")

(custom-autoload 'expand-region-reset-fast-key "expand-region-custom" t)

(defvar expand-region-exclude-text-mode-expansions '(html-mode nxml-mode) "\
List of modes which derive from `text-mode' for which text mode expansions are not appropriate.")

(custom-autoload 'expand-region-exclude-text-mode-expansions "expand-region-custom" t)

(defvar expand-region-smart-cursor nil "\
Defines whether the cursor should be placed intelligently after expansion.

If set to t, and the cursor is already at the beginning of the new region,
keep it there; otherwise, put it at the end of the region.

If set to nil, always place the cursor at the beginning of the region.")

(custom-autoload 'expand-region-smart-cursor "expand-region-custom" t)

(define-obsolete-variable-alias 'er/enable-subword-mode\? 'expand-region-subword-enabled "2019-03-23")

(defvar expand-region-subword-enabled nil "\
Whether expand-region should use subword expansions.")

(custom-autoload 'expand-region-subword-enabled "expand-region-custom" t)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "expand-region-custom" '("expand-region-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "feature-mode-expansions" '("er--block-between-keywords" "er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "html-mode-expansions" '("er--" "er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "js2-mode-expansions" '("er/add-js2-mode-expansions" "js2-mark-parent-statement")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "jsp-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "latex-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nxml-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "octave-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "python-el-expansions" '("er--python-string-delimiter" "er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "python-el-fgallina-expansions" '("er--python-" "er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "python-mode-expansions" '("er--" "er/" "py-goto-beyond-clause")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ruby-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "sml-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "subword-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "text-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "the-org-mode-expansions" '("er/")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "web-mode-expansions" '("er/add-web-mode-expansions")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "yaml-mode-expansions" '("er--" "er/" "yaml-indent")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/exec-path-from-shell-20210914.1247/exec-path-from-shell-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/exec-path-from-shell-20210914.1247/exec-path-from-shell-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/exec-path-from-shell-20210914.1247/exec-path-from-shell-autoloads.el") (car load-path))))



(autoload 'exec-path-from-shell-copy-envs "exec-path-from-shell" "\
Set the environment variables with NAMES from the user's shell.

As a special case, if the variable is $PATH, then the variables
`exec-path' and `eshell-path-env' are also set appropriately.
The result is an alist, as described by
`exec-path-from-shell-getenvs'.

\(fn NAMES)" nil nil)

(autoload 'exec-path-from-shell-copy-env "exec-path-from-shell" "\
Set the environment variable $NAME from the user's shell.

As a special case, if the variable is $PATH, then the variables
`exec-path' and `eshell-path-env' are also set appropriately.
Return the value of the environment variable.

\(fn NAME)" t nil)

(autoload 'exec-path-from-shell-initialize "exec-path-from-shell" "\
Initialize environment from the user's shell.

The values of all the environment variables named in
`exec-path-from-shell-variables' are set from the corresponding
values used in the user's shell." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "exec-path-from-shell" '("exec-path-from-shell-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/exato-20180305.1042/exato-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/exato-20180305.1042/exato-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/exato-20180305.1042/exato-autoloads.el") (car load-path))))



)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/evil-tutor-20150103.650/evil-tutor-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/evil-tutor-20150103.650/evil-tutor-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/evil-tutor-20150103.650/evil-tutor-autoloads.el") (car load-path))))


(autoload 'evil-tutor-start "evil-tutor" "\
Start a evil-tutor session.

\(fn)" t nil)

(defalias 'evil-tutor-resume 'evil-tutor-start)




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/evil-textobj-tree-sitter-20220404.1501/evil-textobj-tree-sitter-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/evil-textobj-tree-sitter-20220404.1501/evil-textobj-tree-sitter-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/evil-textobj-tree-sitter-20220404.1501/evil-textobj-tree-sitter-autoloads.el") (car load-path))))



(autoload 'evil-textobj-tree-sitter-get-textobj "evil-textobj-tree-sitter" "\
Macro to create a textobj function from `GROUP'.
You can pass in multiple groups as a list and in that case as long as
any one of them is available, it will be picked.

You can optionally pass in a alist mapping `major-mode' to their
respective tree-sitter query in `QUERY' with named captures to use
that instead of the default query list.  Check the README file in the
repo to see how to use it.

Check this url for builtin objects
https://github.com/nvim-treesitter/nvim-treesitter-textobjects#built-in-textobjects

\(fn GROUP &optional QUERY)" nil t)

(function-put 'evil-textobj-tree-sitter-get-textobj 'lisp-indent-function 'defun)

(autoload 'evil-textobj-tree-sitter-goto-textobj "evil-textobj-tree-sitter" "\
Got to the start/end of the textobj of type `GROUP'.
By default it goes to the start of the textobj, but pass in `END' if
you want to go to the end of the textobj instead.  You can pass in
`PREVIOUS' if you want to search backwards.  Optionally pass in
`QUERY' if you want to define a custom query.

\(fn GROUP &optional PREVIOUS END QUERY)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-textobj-tree-sitter" '("evil-textobj-tree-sitter-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/evil-matchit-20220404.221/evil-matchit-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/evil-matchit-20220404.221/evil-matchit-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/evil-matchit-20220404.221/evil-matchit-autoloads.el") (car load-path))))



(autoload 'evilmi-load-plugin-rules "evil-matchit" "\
Load MODES's plugin RULES.

\(fn MODES RULES)" nil nil)

(autoload 'evilmi-init-plugins "evil-matchit" "\
Load plugins." t nil)

(autoload 'evilmi-select-items "evil-matchit" "\
Select NUM items/tags and the region between them.

\(fn &optional NUM)" t nil)

(autoload 'evilmi-delete-items "evil-matchit" "\
Delete NUM items/tags and the region between them.

\(fn &optional NUM)" t nil)

(autoload 'evilmi-jump-to-percentage "evil-matchit" "\
Like Vim %, NUM is the percentage of location.

\(fn NUM)" t nil)
 (autoload 'evilmi-jump-items "evil-matchit" nil t)

(autoload 'evilmi-version "evil-matchit" "\
Print version." t nil)

(autoload 'evil-matchit-mode "evil-matchit" "\
Buffer-local minor mode to emulate matchit.vim.

If called interactively, enable Evil-Matchit mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'turn-on-evil-matchit-mode "evil-matchit" "\
Enable the minor mode in the current buffer." nil nil)

(autoload 'turn-off-evil-matchit-mode "evil-matchit" "\
Disable the minor mode in the current buffer." nil nil)

(put 'global-evil-matchit-mode 'globalized-minor-mode t)

(defvar global-evil-matchit-mode nil "\
Non-nil if Global Evil-Matchit mode is enabled.
See the `global-evil-matchit-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-evil-matchit-mode'.")

(custom-autoload 'global-evil-matchit-mode "evil-matchit" nil)

(autoload 'global-evil-matchit-mode "evil-matchit" "\
Toggle Evil-Matchit mode in all buffers.
With prefix ARG, enable Global Evil-Matchit mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Evil-Matchit mode is enabled in all buffers where
`turn-on-evil-matchit-mode' would do it.
See `evil-matchit-mode' for more information on Evil-Matchit mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit" '("evil")))



(autoload 'evilmi-c-get-tag "evil-matchit-c" "\
Get tag at point." nil nil)

(autoload 'evilmi-c-jump "evil-matchit-c" "\
Use INFO to jump NUM times.

\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-c" '("evilmi-c-")))



(autoload 'evilmi-cmake-get-tag "evil-matchit-cmake" nil nil nil)

(autoload 'evilmi-cmake-jump "evil-matchit-cmake" "\


\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-cmake" '("evilmi-cmake-")))



(autoload 'evilmi-diff-get-tag "evil-matchit-diff" "\
Get tag at point." nil nil)

(autoload 'evilmi-diff-jump "evil-matchit-diff" "\
Jump to the matching tag using INFO and NUM.

\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-diff" '("evilmi-diff-")))



(autoload 'evilmi-elixir-get-tag "evil-matchit-elixir" nil nil nil)

(autoload 'evilmi-elixir-jump "evil-matchit-elixir" "\


\(fn RLT NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-elixir" '("evilmi-elixir-")))



(autoload 'evilmi-fortran-get-tag "evil-matchit-fortran" nil nil nil)

(autoload 'evilmi-fortran-jump "evil-matchit-fortran" "\


\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-fortran" '("evilmi-fortran-")))



(autoload 'evilmi-html-get-tag "evil-matchit-html" "\
Get current tag." nil nil)

(autoload 'evilmi-html-jump "evil-matchit-html" "\
Use INFO from current tag to jump NUM times.

\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-html" '("evilmi-html--")))



(autoload 'evilmi-indent-get-tag "evil-matchit-indent" "\
Return '(start-position tag-type keyword)." nil nil)

(autoload 'evilmi-indent-jump "evil-matchit-indent" "\
Use INFO from `evilmi-indent-get-tag' to jump to matched tag.

\(fn INFO)" nil nil)

(autoload 'evilmi-indent-extract-keyword "evil-matchit-indent" "\
Extract keyword from LINE.

\(fn LINE)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-indent" '("evilmi-")))



(autoload 'evilmi-javascript-get-tag "evil-matchit-javascript" "\
Get tag at point." nil nil)

(autoload 'evilmi-javascript-jump "evil-matchit-javascript" "\
Jump to the matching tag using INFO and NUM.

\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-javascript" '("evilmi-")))



(autoload 'evilmi-latex-get-tag "evil-matchit-latex" nil nil nil)

(autoload 'evilmi-latex-jump "evil-matchit-latex" "\


\(fn RLT NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-latex" '("evilmi-latex-")))



(autoload 'evilmi-markdown-get-tag "evil-matchit-markdown" "\
Get current tag.  Return (list start-position tag)." nil nil)

(autoload 'evilmi-markdown-jump "evil-matchit-markdown" "\
Jump to the next tag using INFO and NUM.

\(fn INFO NUM)" nil nil)



(autoload 'evilmi-ocaml-get-tag "evil-matchit-ocaml" "\
Return information of current tag: (list position-of-word word)." nil nil)

(autoload 'evilmi-ocaml-jump "evil-matchit-ocaml" "\


\(fn RLT NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-ocaml" '("evilmi-ocaml-")))



(autoload 'evilmi-octave-get-tag "evil-matchit-octave" "\
Get current tag info." nil nil)

(autoload 'evilmi-octave-jump "evil-matchit-octave" "\
Use INFO returned by `evilmi-octave-get-tag' and NUM to jump to matched tag.

\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-octave" '("evilmi-octave-")))



(autoload 'evilmi-org-get-tag "evil-matchit-org" "\
Get current tag in org file." nil nil)

(autoload 'evilmi-org-jump "evil-matchit-org" "\
Jump to the matching tag using INFO and NUM.

\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-org" '("evilmi-")))



(autoload 'evilmi-prog-get-tag "evil-matchit-prog" "\
Get tag at point." nil nil)

(autoload 'evilmi-prog-jump "evil-matchit-prog" "\
Use INFO to jump NUM times.

\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-prog" '("evilmi-prog-")))



(autoload 'evilmi-python-get-tag "evil-matchit-python" "\
Return '(start-position tag-type keyword)." nil nil)

(autoload 'evilmi-python-jump "evil-matchit-python" "\
Use INFO from `evilmi-python-get-tag' to jump to matched tag.
NUM is ignored.

\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-python" '("evilmi-python-")))



(autoload 'evilmi-ruby-get-tag "evil-matchit-ruby" "\
Get tag at point." nil nil)

(autoload 'evilmi-ruby-jump "evil-matchit-ruby" "\
Use INFO to jump NUM times.

\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-ruby" '("evilmi-ruby-")))



(autoload 'evilmi-script-get-tag "evil-matchit-script" "\
Get tag at point." nil nil)

(autoload 'evilmi-script-jump "evil-matchit-script" "\
Use INFO returned by `evilmi-script-get-tag' and NUM to jump to matched tag.

\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-script" '("evilmi-script-")))



(autoload 'evilmi-sdk-curline "evil-matchit-sdk" "\
Get current line text." nil nil)

(autoload 'evilmi-sdk-member "evil-matchit-sdk" "\
Check if KEYWORD exist in KEYWORD-LIST.

\(fn KEYWORD KEYWORD-LIST)" nil nil)

(autoload 'evilmi-sdk-get-tag-info "evil-matchit-sdk" "\
Return (row column is-function-exit-point keyword).
The row and column mark the position in `evilmi-mylang-match-tags'
is-function-exit-point could be unknown status

\(fn KEYWORD MATCH-TAGS)" nil nil)

(autoload 'evilmi-sdk-get-tag "evil-matchit-sdk" "\
Return '(start-point ((row column is-function-exit-point keyword)).

\(fn MATCH-TAGS HOWTOS)" nil nil)

(autoload 'evilmi-sdk-jump "evil-matchit-sdk" "\
Use RLT, NUM, MATCH-TAGS and HOWTOS to jump.
Return nil if no matching tag found.  Please note (point) is changed
after calling this function.

\(fn RLT NUM MATCH-TAGS HOWTOS)" nil nil)

(autoload 'evilmi-among-fonts-p "evil-matchit-sdk" "\
If current font at POS is among FONTS.

\(fn POS FONTS)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-sdk" '("evilmi-")))



(autoload 'evilmi-sh-get-tag "evil-matchit-sh" nil nil nil)

(autoload 'evilmi-sh-jump "evil-matchit-sh" "\


\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-sh" '("evilmi-sh-")))



(autoload 'evilmi-simple-get-tag "evil-matchit-simple" "\
Get current tag in simple language." nil nil)

(autoload 'evilmi-simple-jump "evil-matchit-simple" "\
Use INFO of current tag to jump to matching tag.  NUM is ignored.

\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-simple" '("evilmi-")))



(autoload 'evilmi-sql-get-tag "evil-matchit-sql" "\
Get tag at point." nil nil)

(autoload 'evilmi-sql-jump "evil-matchit-sql" "\
Use INFO returned by `evilmi-sql-get-tag' and NUM to jump to matched tag.

\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-sql" '("evilmi-sql-")))



(autoload 'evilmi-template-get-tag "evil-matchit-template" "\
Get tag at point." nil nil)

(autoload 'evilmi-template-jump "evil-matchit-template" "\
Jump to the matching tag using INFO and NUM.

\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-template" '("evilmi-template-")))



(autoload 'evilmi-prompt-line-p "evil-matchit-terminal" "\
If line at POSITION has prompt at the beginning.

\(fn &optional POSITION)" nil nil)

(autoload 'evilmi-terminal-get-tag "evil-matchit-terminal" "\
Get tag at point." nil nil)

(autoload 'evilmi-terminal-jump "evil-matchit-terminal" "\
Use INFO to jump NUM times.

\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-terminal" '("evilmi-terminal-p")))



(autoload 'evilmi-verilog-get-tag "evil-matchit-verilog" "\
Get tag at point." nil nil)

(autoload 'evilmi-verilog-jump "evil-matchit-verilog" "\
Use INFO returned by `evilmi-verlog-get-tag' and NUM to jump to matched tag.

\(fn INFO NUM)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-matchit-verilog" '("evilmi-verilog-")))



(autoload 'evilmi-yaml-get-tag "evil-matchit-yaml" "\
Return '(start-position tag-type keyword)." nil nil)

(autoload 'evilmi-yaml-jump "evil-matchit-yaml" "\
Use INFO returned by `evilmi-yaml-get-tag' and NUM to jump to matched tag.

\(fn INFO NUM)" nil nil)




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/evil-ledger-20180802.1612/evil-ledger-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/evil-ledger-20180802.1612/evil-ledger-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/evil-ledger-20180802.1612/evil-ledger-autoloads.el") (car load-path))))


(autoload 'evil-ledger-mode "evil-ledger" "\
Minor mode for more evil in `ledger-mode'.

The following keys are available in `evil-ledger-mode':

\\{evil-ledger-mode-map}

\(fn &optional ARG)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/evil-leader-20140606.1243/evil-leader-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/evil-leader-20140606.1243/evil-leader-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/evil-leader-20140606.1243/evil-leader-autoloads.el") (car load-path))))


(autoload 'global-evil-leader-mode "evil-leader" "\
Global minor mode for <leader> support.

\(fn &optional ARG)" t nil)

(autoload 'evil-leader-mode "evil-leader" "\
Minor mode to enable <leader> support.

\(fn &optional ARG)" t nil)

(autoload 'evil-leader/set-key "evil-leader" "\
Bind `key' to command `def' in `evil-leader/default-map'.

Key has to be readable by `read-kbd-macro' and `def' a command.
Accepts further `key' `def' pairs.

\(fn KEY DEF &rest BINDINGS)" t nil)

(autoload 'evil-leader/set-key-for-mode "evil-leader" "\
Create keybindings for major-mode `mode' with `key' bound to command `def'.

See `evil-leader/set-key'.

\(fn MODE KEY DEF &rest BINDINGS)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/evil-indent-textobject-20130831.2219/evil-indent-textobject-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/evil-indent-textobject-20130831.2219/evil-indent-textobject-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/evil-indent-textobject-20130831.2219/evil-indent-textobject-autoloads.el") (car load-path))))


(eval-after-load 'evil '(progn (autoload 'evil-indent-i-indent "evil-indent-textobject" nil t) (autoload 'evil-indent-a-indent "evil-indent-textobject" nil t) (autoload 'evil-indent-a-indent-lines "evil-indent-textobject" nil t) (define-key evil-inner-text-objects-map "i" 'evil-indent-i-indent) (define-key evil-outer-text-objects-map "i" 'evil-indent-a-indent) (define-key evil-outer-text-objects-map "I" 'evil-indent-a-indent-lines)))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/evil-exchange-20200118.252/evil-exchange-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/evil-exchange-20200118.252/evil-exchange-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/evil-exchange-20200118.252/evil-exchange-autoloads.el") (car load-path))))



(autoload 'evil-exchange "evil-exchange" "\
Exchange two regions with evil motion." t)

(autoload 'evil-exchange-cancel "evil-exchange" "\
Cancel current pending exchange." t nil)

(autoload 'evil-exchange-install "evil-exchange" "\
Setting evil-exchange key bindings." nil nil)

(autoload 'evil-exchange-cx-install "evil-exchange" "\
Setting evil-exchange key bindings in a vim-compatible way" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-exchange" '("evil-exchange")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/evil-commentary-20210210.1702/evil-commentary-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/evil-commentary-20210210.1702/evil-commentary-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/evil-commentary-20210210.1702/evil-commentary-autoloads.el") (car load-path))))



(defvar evil-commentary-mode nil "\
Non-nil if Evil-Commentary mode is enabled.
See the `evil-commentary-mode' command
for a description of this minor mode.")

(custom-autoload 'evil-commentary-mode "evil-commentary" nil)

(autoload 'evil-commentary-mode "evil-commentary" "\
Commentary mode.

If called interactively, enable Evil-Commentary mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-commentary" '("evil-commentary-comment-function-for-mode-alist")))



(autoload 'evil-commentary/org-comment-or-uncomment-region "evil-commentary-integration" "\
Comment function for `org-mode'.

\(fn BEG END)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-commentary-integration" '("evil-commentary/org-babel-do-in-edit-buffer")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/annalist-20190929.207/annalist-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/annalist-20190929.207/annalist-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/annalist-20190929.207/annalist-autoloads.el") (car load-path))))



(autoload 'annalist-record "annalist" "\
In the store for ANNALIST, TYPE, and LOCAL, record RECORD.
ANNALIST should correspond to the package/user recording this information (e.g.
'general, 'me, etc.). TYPE is the type of information being recorded (e.g.
'keybindings). LOCAL corresponds to whether to store RECORD only for the current
buffer. This information together is used to select where RECORD should be
stored in and later retrieved from with `annalist-describe'. RECORD should be a
list of items to record and later print as org headings and column entries in a
single row. If PLIST is non-nil, RECORD should be a plist instead of an ordered
list (e.g. '(keymap org-mode-map key \"C-c a\" ...)). The plist keys should be
the symbols used for the definition of TYPE.

\(fn ANNALIST TYPE RECORD &key LOCAL PLIST)" nil nil)

(autoload 'annalist-describe "annalist" "\
Describe information recorded by ANNALIST for TYPE.
For example: (annalist-describe 'general 'keybindings) If VIEW is non-nil, use
those settings for displaying recorded information instead of the defaults.

\(fn ANNALIST TYPE &optional VIEW)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "annalist" '("annalist-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/evil-collection-20220402.802/evil-collection-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/evil-collection-20220402.802/evil-collection-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/evil-collection-20220402.802/evil-collection-autoloads.el") (car load-path))))



(autoload 'evil-collection-translate-key "evil-collection" "\
Translate keys in the keymap(s) corresponding to STATES and KEYMAPS.
STATES should be the name of an evil state, a list of states, or nil. KEYMAPS
should be a symbol corresponding to the keymap to make the translations in or a
list of keymap symbols. Like `evil-define-key', when a keymap does not exist,
the keybindings will be deferred until the keymap is defined, so
`with-eval-after-load' is not necessary. TRANSLATIONS corresponds to a list of
key replacement pairs. For example, specifying \"a\" \"b\" will bind \"a\" to
\"b\"'s definition in the keymap. Specifying nil as a replacement will unbind a
key. If DESTRUCTIVE is nil, a backup of the keymap will be stored on the initial
invocation, and future invocations will always look up keys in the backup
keymap. When no TRANSLATIONS are given, this function will only create the
backup keymap without making any translations. On the other hand, if DESTRUCTIVE
is non-nil, the keymap will be destructively altered without creating a backup.
For example, calling this function multiple times with \"a\" \"b\" \"b\" \"a\"
would continue to swap and unswap the definitions of these keys. This means that
when DESTRUCTIVE is non-nil, all related swaps/cycles should be done in the same
invocation.

\(fn STATES KEYMAPS &rest TRANSLATIONS &key DESTRUCTIVE &allow-other-keys)" nil nil)

(function-put 'evil-collection-translate-key 'lisp-indent-function 'defun)

(autoload 'evil-collection-swap-key "evil-collection" "\
Wrapper around `evil-collection-translate-key' for swapping keys.
STATES, KEYMAPS, and ARGS are passed to `evil-collection-translate-key'. ARGS
should consist of key swaps (e.g. \"a\" \"b\" is equivalent to \"a\" \"b\" \"b\"
\"a\" with `evil-collection-translate-key') and optionally keyword arguments for
`evil-collection-translate-key'.

\(fn STATES KEYMAPS &rest ARGS)" nil t)

(function-put 'evil-collection-swap-key 'lisp-indent-function 'defun)

(autoload 'evil-collection-require "evil-collection" "\
Require the evil-collection-MODE file, but do not activate it.

MODE should be a symbol. This requires the evil-collection-MODE
feature without needing to manipulate `load-path'. NOERROR is
forwarded to `require'.

\(fn MODE &optional NOERROR)" nil nil)

(autoload 'evil-collection-init "evil-collection" "\
Register the Evil bindings for all modes in `evil-collection-mode-list'.

Alternatively, you may register select bindings manually, for
instance:

  (with-eval-after-load 'calendar
    (evil-collection-calendar-setup))

If MODES is specified (as either one mode or a list of modes), use those modes
instead of the modes in `evil-collection-mode-list'.

\(fn &optional MODES)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-collection" '("evil-collection-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/evil-args-20220125.1626/evil-args-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/evil-args-20220125.1626/evil-args-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/evil-args-20220125.1626/evil-args-autoloads.el") (car load-path))))



(autoload 'evil-backward-arg "evil-args" "\
Move the cursor backward COUNT arguments.

\(fn COUNT)" t nil)

(autoload 'evil-forward-arg "evil-args" "\
Move the cursor forward COUNT arguments.

\(fn COUNT)" t nil)
 (autoload 'evil-inner-arg "evil-args")
 (autoload 'evil-outer-arg "evil-args")

(autoload 'evil-jump-out-args "evil-args" "\
Move the cursor out of the nearest enclosing matching pairs.

\(fn COUNT)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "evil-args" '("evil-args-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/esup-20220202.2335/esup-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/esup-20220202.2335/esup-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/esup-20220202.2335/esup-autoloads.el") (car load-path))))



(autoload 'esup "esup" "\
Profile the startup time of Emacs in the background.
If INIT-FILE is non-nil, profile that instead of USER-INIT-FILE.
ARGS is a list of extra command line arguments to pass to Emacs.

\(fn &optional INIT-FILE &rest ARGS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "esup" '("esup-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "esup-child" '("esup-" "with-esup-child-increasing-depth")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/eslint-disable-rule-20220328.354/eslint-disable-rule-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/eslint-disable-rule-20220328.354/eslint-disable-rule-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/eslint-disable-rule-20220328.354/eslint-disable-rule-autoloads.el") (car load-path))))



(autoload 'eslint-disable-rule-disable-next-line "eslint-disable-rule" "\
Add eslint-disable-next-line comment above current line to disable RULE-NAME.

If DESCRIPTION is non-nil, insert a description explaining why RULE-NAME
was disabled.

Interactively, ask for RULE-NAME by executing hooks in
`eslint-disable-rule-find-rules-hook'.  Also ask for DESCRIPTION depending
on `eslint-disable-rule-require-description'.

\(fn RULE-NAME &optional DESCRIPTION)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eslint-disable-rule" '("eslint-disable-rule-")))



(autoload 'eslint-disable-rule-all "eslint-disable-rule-all" "\
Return a list of all eslint rules." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eslint-disable-rule-all" '("eslint-disable-rule-all-executable")))



(autoload 'eslint-disable-rule-flycheck "eslint-disable-rule-flycheck" "\
Return a list of eslint rule names from flycheck-eslint errors.

Return nil if `flycheck' or `flycheck-eslint' are not active so it is safe,
but useless, to use even when not using flycheck." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eslint-disable-rule-flycheck" '("eslint-disable-rule-flycheck--eslint-active-p")))



(autoload 'eslint-disable-rule-flymake "eslint-disable-rule-flymake" "\
Return a list of eslint rule names from flymake-eslint errors.

Return nil if `flymake' or `flymake-eslint' are not active so it is safe,
but useless, to use even when not using flymake." nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eslint-disable-rule-flymake" '("eslint-disable-rule-flymake--")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/eping-20201027.2149/eping-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/eping-20201027.2149/eping-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/eping-20201027.2149/eping-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eping" '("eping")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/envrc-20220218.1627/envrc-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/envrc-20220218.1627/envrc-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/envrc-20220218.1627/envrc-autoloads.el") (car load-path))))



(autoload 'envrc-mode "envrc" "\
A local minor mode in which env vars are set by direnv.

If called interactively, enable Envrc mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'envrc-global-mode 'globalized-minor-mode t)

(defvar envrc-global-mode nil "\
Non-nil if Envrc-Global mode is enabled.
See the `envrc-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `envrc-global-mode'.")

(custom-autoload 'envrc-global-mode "envrc" nil)

(autoload 'envrc-global-mode "envrc" "\
Toggle Envrc mode in all buffers.
With prefix ARG, enable Envrc-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Envrc mode is enabled in all buffers where
`(lambda nil (unless (or (minibufferp) (file-remote-p default-directory)) (envrc-mode 1)))' would do it.
See `envrc-mode' for more information on Envrc mode.

\(fn &optional ARG)" t nil)

(autoload 'envrc-file-mode "envrc" "\
Major mode for .envrc files as used by direnv.
\\{envrc-file-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.envrc\\'" . envrc-file-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "envrc" '("envrc-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/emojify-20210108.1111/emojify-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/emojify-20210108.1111/emojify-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/emojify-20210108.1111/emojify-autoloads.el") (car load-path))))



(autoload 'emojify-set-emoji-styles "emojify" "\
Set the type of emojis that should be displayed.

STYLES is the styles emoji styles that should be used, see `emojify-emoji-styles'

\(fn STYLES)" nil nil)

(autoload 'emojify-mode "emojify" "\
Emojify mode

If called interactively, enable Emojify mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'global-emojify-mode 'globalized-minor-mode t)

(defvar global-emojify-mode nil "\
Non-nil if Global Emojify mode is enabled.
See the `global-emojify-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-emojify-mode'.")

(custom-autoload 'global-emojify-mode "emojify" nil)

(autoload 'global-emojify-mode "emojify" "\
Toggle Emojify mode in all buffers.
With prefix ARG, enable Global Emojify mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Emojify mode is enabled in all buffers where
`emojify-mode' would do it.
See `emojify-mode' for more information on Emojify mode.

\(fn &optional ARG)" t nil)

(autoload 'emojify-mode-line-mode "emojify" "\
Emojify mode line

If called interactively, enable Emojify-Mode-Line mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'global-emojify-mode-line-mode 'globalized-minor-mode t)

(defvar global-emojify-mode-line-mode nil "\
Non-nil if Global Emojify-Mode-Line mode is enabled.
See the `global-emojify-mode-line-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-emojify-mode-line-mode'.")

(custom-autoload 'global-emojify-mode-line-mode "emojify" nil)

(autoload 'global-emojify-mode-line-mode "emojify" "\
Toggle Emojify-Mode-Line mode in all buffers.
With prefix ARG, enable Global Emojify-Mode-Line mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Emojify-Mode-Line mode is enabled in all buffers where
`emojify-mode-line-mode' would do it.
See `emojify-mode-line-mode' for more information on Emojify-Mode-Line mode.

\(fn &optional ARG)" t nil)

(autoload 'emojify-apropos-emoji "emojify" "\
Show Emojis that match PATTERN.

\(fn PATTERN)" t nil)

(autoload 'emojify-insert-emoji "emojify" "\
Interactively prompt for Emojis and insert them in the current buffer.

This respects the `emojify-emoji-styles' variable." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "emojify" '("emojify-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/emmet-mode-20210820.1124/emmet-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/emmet-mode-20210820.1124/emmet-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/emmet-mode-20210820.1124/emmet-mode-autoloads.el") (car load-path))))



(autoload 'emmet-expand-line "emmet-mode" "\
Replace the current line's emmet expression with the corresponding expansion.
If prefix ARG is given or region is visible call `emmet-preview' to start an
interactive preview.

Otherwise expand line directly.

For more information see `emmet-mode'.

\(fn ARG)" t nil)

(autoload 'emmet-mode "emmet-mode" "\
Minor mode for writing HTML and CSS markup.
With emmet for HTML and CSS you can write a line like

If called interactively, enable Emmet mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

  ul#name>li.item*2

and have it expanded to

  <ul id=\"name\">
    <li class=\"item\"></li>
    <li class=\"item\"></li>
  </ul>

This minor mode defines keys for quick access:

\\{emmet-mode-keymap}

Home page URL `http://www.emacswiki.org/emacs/Emmet'.

See also `emmet-expand-line'.

\(fn &optional ARG)" t nil)

(autoload 'emmet-expand-yas "emmet-mode" nil t nil)

(autoload 'emmet-preview "emmet-mode" "\
Expand emmet between BEG and END interactively.
This will show a preview of the expanded emmet code and you can
accept it or skip it.

\(fn BEG END)" t nil)

(autoload 'emmet-wrap-with-markup "emmet-mode" "\
Wrap region with markup.

\(fn WRAP-WITH)" t nil)

(autoload 'emmet-next-edit-point "emmet-mode" "\


\(fn COUNT)" t nil)

(autoload 'emmet-prev-edit-point "emmet-mode" "\


\(fn COUNT)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "emmet-mode" '("emmet-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/elpygen-20171225.1736/elpygen-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/elpygen-20171225.1736/elpygen-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/elpygen-20171225.1736/elpygen-autoloads.el") (car load-path))))


(autoload 'elpygen-implement "elpygen" "\
Implement a function or a method using the symbol name and call arguments under the point.

\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/elpl-20220314.1353/elpl-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/elpl-20220314.1353/elpl-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/elpl-20220314.1353/elpl-autoloads.el") (car load-path))))



(autoload 'elpl "elpl" "\
Run an inferior instance of `elpl-cli' inside Emacs." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elpl" '("elpl-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/elisp-slime-nav-20210510.528/elisp-slime-nav-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/elisp-slime-nav-20210510.528/elisp-slime-nav-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/elisp-slime-nav-20210510.528/elisp-slime-nav-autoloads.el") (car load-path))))



(autoload 'elisp-slime-nav-mode "elisp-slime-nav" "\
Enable Slime-style navigation of elisp symbols using M-. and M-,

If called interactively, enable Elisp-Slime-Nav mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(define-obsolete-function-alias 'turn-on-elisp-slime-nav-mode 'elisp-slime-nav-mode "2020-01-30")

(autoload 'elisp-slime-nav-find-elisp-thing-at-point "elisp-slime-nav" "\
Find the elisp thing at point, be it a function, variable, library or face.

With a prefix arg, or if there is no thing at point, prompt for
the symbol to jump to.

Argument SYM-NAME is the thing to find.

\(fn SYM-NAME)" t nil)

(autoload 'elisp-slime-nav-describe-elisp-thing-at-point "elisp-slime-nav" "\
Display the full documentation of the elisp thing at point.

The named subject may be a function, variable, library or face.

With a prefix arg, or if there is not \"thing\" at point, prompt
for the symbol to jump to.

Argument SYM-NAME is the thing to find.

\(fn SYM-NAME)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elisp-slime-nav" '("elisp-slime-nav-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/elisp-depmap-20220223.1131/elisp-depmap-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/elisp-depmap-20220223.1131/elisp-depmap-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/elisp-depmap-20220223.1131/elisp-depmap-autoloads.el") (car load-path))))



(autoload 'elisp-depmap-makesummarytable "elisp-depmap" "\
Make a summary org table of variables and references to them." t nil)

(autoload 'elisp-depmap-graphviz-digraph "elisp-depmap" "\
Make a dot file representation of all definitions and references.
Optionally set INDENT-WIDTH which is 2 by default.
If SHUFFLE gives a random seed (default 0) to shuffle subgraph cluster layouts.

\(fn &optional SHUFFLE)" t nil)

(autoload 'elisp-depmap-graphviz "elisp-depmap" "\
Make a very basic dot file representation of all the top level definitions in a project, and their references." t nil)



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elisp-depmap-exec" '("elisp-depmap-exec-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elisp-depmap-graph" '("elisp-depmap-graph-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elisp-depmap-parse" '("elisp-depmap-parse-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/elisp-def-20210126.750/elisp-def-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/elisp-def-20210126.750/elisp-def-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/elisp-def-20210126.750/elisp-def-autoloads.el") (car load-path))))



(autoload 'elisp-def "elisp-def" "\
Go to the definition of the symbol at point." t nil)

(autoload 'elisp-def-mode "elisp-def" "\
Minor mode for finding definitions with `elisp-def'.

If called interactively, enable Elisp-Def mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\\{elisp-def-mode-map}

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elisp-def" '("elisp-def-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/elfeed-20210822.2129/elfeed-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/elfeed-20210822.2129/elfeed-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/elfeed-20210822.2129/elfeed-autoloads.el") (car load-path))))



(autoload 'elfeed-update "elfeed" "\
Update all the feeds in `elfeed-feeds'." t nil)

(autoload 'elfeed "elfeed" "\
Enter elfeed." t nil)

(autoload 'elfeed-load-opml "elfeed" "\
Load feeds from an OPML file into `elfeed-feeds'.
When called interactively, the changes to `elfeed-feeds' are
saved to your customization file.

\(fn FILE)" t nil)

(autoload 'elfeed-export-opml "elfeed" "\
Export the current feed listing to OPML-formatted FILE.

\(fn FILE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed" '("elfeed-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed-csv" '("elfeed-csv-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed-curl" '("elfeed-curl-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed-db" '("elfeed-" "with-elfeed-db-visit")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed-lib" '("elfeed-")))



(autoload 'elfeed-link-store-link "elfeed-link" "\
Store a link to an elfeed search or entry buffer.

When storing a link to an entry, automatically extract all the
entry metadata.  These can be used in the capture templates as
%:elfeed-entry-<prop>.  See `elfeed-entry--create' for the list
of available props." nil nil)

(autoload 'elfeed-link-open "elfeed-link" "\
Jump to an elfeed entry or search.

Depending on what FILTER-OR-ID looks like, we jump to either
search buffer or show a concrete entry.

\(fn FILTER-OR-ID)" nil nil)

(eval-after-load 'org `(funcall ',(lambda nil (if (version< (org-version) "9.0") (with-no-warnings (org-add-link-type "elfeed" #'elfeed-link-open) (add-hook 'org-store-link-functions #'elfeed-link-store-link)) (with-no-warnings (org-link-set-parameters "elfeed" :follow #'elfeed-link-open :store #'elfeed-link-store-link))))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed-log" '("elfeed-log")))



(autoload 'elfeed-search-bookmark-handler "elfeed-search" "\
Jump to an elfeed-search bookmarked location.

\(fn RECORD)" nil nil)

(autoload 'elfeed-search-desktop-restore "elfeed-search" "\
Restore the state of an elfeed-search buffer on desktop restore.

\(fn FILE-NAME BUFFER-NAME SEARCH-FILTER)" nil nil)

(add-to-list 'desktop-buffer-mode-handlers '(elfeed-search-mode . elfeed-search-desktop-restore))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed-search" '("elfeed-s")))



(autoload 'elfeed-show-bookmark-handler "elfeed-show" "\
Show the bookmarked entry saved in the `RECORD'.

\(fn RECORD)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed-show" '("elfeed-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "xml-query" '("xml-query")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/elfeed-summary-20220331.1634/elfeed-summary-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/elfeed-summary-20220331.1634/elfeed-summary-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/elfeed-summary-20220331.1634/elfeed-summary-autoloads.el") (car load-path))))



(autoload 'elfeed-summary "elfeed-summary" "\
Display a feed summary for elfeed.

The feed summary is a tree of three basic items: groups, feeds and
searches.  Groups also may contain other items.  The structure of the
tree is determined by the `elfeed-summary-settings' variable.

Take a look at `elfeed-summary-mode' for the list of available
keybindings, and at the `elfeed-summary' group for the available
options." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "elfeed-summary" '("elfeed-summary-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/eldoc-overlay-20220210.1358/eldoc-overlay-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/eldoc-overlay-20220210.1358/eldoc-overlay-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/eldoc-overlay-20220210.1358/eldoc-overlay-autoloads.el") (car load-path))))



(autoload 'eldoc-overlay-mode "eldoc-overlay" "\
Minor mode for displaying eldoc contextual documentation using a text overlay.

If called interactively, enable Eldoc-Overlay mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'global-eldoc-overlay-mode 'globalized-minor-mode t)

(defvar global-eldoc-overlay-mode nil "\
Non-nil if Global Eldoc-Overlay mode is enabled.
See the `global-eldoc-overlay-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-eldoc-overlay-mode'.")

(custom-autoload 'global-eldoc-overlay-mode "eldoc-overlay" nil)

(autoload 'global-eldoc-overlay-mode "eldoc-overlay" "\
Toggle Eldoc-Overlay mode in all buffers.
With prefix ARG, enable Global Eldoc-Overlay mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Eldoc-Overlay mode is enabled in all buffers where
`eldoc-overlay-mode' would do it.
See `eldoc-overlay-mode' for more information on Eldoc-Overlay mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "eldoc-overlay" '("eldoc-overlay-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/el2markdown-20170630.1858/el2markdown-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/el2markdown-20170630.1858/el2markdown-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/el2markdown-20170630.1858/el2markdown-autoloads.el") (car load-path))))


(autoload 'el2markdown-view-buffer "el2markdown" "\
Convert comment section to markdown and display in temporary buffer.

\(fn)" t nil)

(autoload 'el2markdown-write-file "el2markdown" "\
Convert comment section to markdown and write to file.

\(fn &optional FILE-NAME OVERWRITE-WITHOUT-CONFIRM)" t nil)

(autoload 'el2markdown-write-readme "el2markdown" "\
Generate README.md, designed to be used in batch mode.

\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/editorconfig-20220301.332/editorconfig-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/editorconfig-20220301.332/editorconfig-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/editorconfig-20220301.332/editorconfig-autoloads.el") (car load-path))))



(autoload 'editorconfig-apply "editorconfig" "\
Get and apply EditorConfig properties to current buffer.

This function does not respect the values of `editorconfig-exclude-modes' and
`editorconfig-exclude-regexps' and always applies available properties.
Use `editorconfig-mode-apply' instead to make use of these variables." t nil)

(defvar editorconfig-mode nil "\
Non-nil if Editorconfig mode is enabled.
See the `editorconfig-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `editorconfig-mode'.")

(custom-autoload 'editorconfig-mode "editorconfig" nil)

(autoload 'editorconfig-mode "editorconfig" "\
Toggle EditorConfig feature.

If called interactively, enable Editorconfig mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

To disable EditorConfig in some buffers, modify
`editorconfig-exclude-modes' or `editorconfig-exclude-regexps'.

\(fn &optional ARG)" t nil)

(autoload 'editorconfig-find-current-editorconfig "editorconfig" "\
Find the closest .editorconfig file for current file." t nil)

(autoload 'editorconfig-display-current-properties "editorconfig" "\
Display EditorConfig properties extracted for current buffer." t nil)

(defalias 'describe-editorconfig-properties 'editorconfig-display-current-properties)

(autoload 'editorconfig-format-buffer "editorconfig" "\
Format buffer according to .editorconfig indent_style and indent_width." t nil)

(autoload 'editorconfig-version "editorconfig" "\
Get EditorConfig version as string.

If called interactively or if SHOW-VERSION is non-nil, show the
version in the echo area and the messages buffer.

\(fn &optional SHOW-VERSION)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "editorconfig" '("editorconfig-")))



(autoload 'editorconfig-conf-mode "editorconfig-conf-mode" "\
Major mode for editing .editorconfig files.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.editorconfig\\'" . editorconfig-conf-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "editorconfig-conf-mode" '("editorconfig-conf-mode-")))



(autoload 'editorconfig-core-get-nearest-editorconfig "editorconfig-core" "\
Return path to .editorconfig file that is closest to DIRECTORY.

\(fn DIRECTORY)" nil nil)

(autoload 'editorconfig-core-get-properties "editorconfig-core" "\
Get EditorConfig properties for FILE.
If FILE is not given, use currently visiting file.
Give CONFNAME for basename of config file other than .editorconfig.
If need to specify config format version, give CONFVERSION.

This functions returns alist of properties.  Each element will look like
'(KEY . VALUE) .

\(fn &optional FILE CONFNAME CONFVERSION)" nil nil)

(autoload 'editorconfig-core-get-properties-hash "editorconfig-core" "\
Get EditorConfig properties for FILE.
If FILE is not given, use currently visiting file.
Give CONFNAME for basename of config file other than .editorconfig.
If need to specify config format version, give CONFVERSION.

This function is almost same as `editorconfig-core-get-properties', but returns
hash object instead.

\(fn &optional FILE CONFNAME CONFVERSION)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "editorconfig-core" '("editorconfig-core--")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "editorconfig-core-handle" '("editorconfig-core-handle")))



(autoload 'editorconfig-fnmatch-p "editorconfig-fnmatch" "\
Test whether STRING match PATTERN.

Matching ignores case if `case-fold-search' is non-nil.

PATTERN should be a shell glob pattern, and some zsh-like wildcard matchings can
be used:

*           Matches any string of characters, except path separators (/)
**          Matches any string of characters
?           Matches any single character
\[name]      Matches any single character in name
\[^name]     Matches any single character not in name
{s1,s2,s3}  Matches any of the strings given (separated by commas)
{min..max}  Matches any number between min and max

\(fn STRING PATTERN)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "editorconfig-fnmatch" '("editorconfig-fnmatch-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/edebug-inline-result-20220210.1357/edebug-inline-result-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/edebug-inline-result-20220210.1357/edebug-inline-result-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/edebug-inline-result-20220210.1357/edebug-inline-result-autoloads.el") (car load-path))))



(defvar edebug-inline-result-mode nil "\
Non-nil if Edebug-Inline-Result mode is enabled.
See the `edebug-inline-result-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `edebug-inline-result-mode'.")

(custom-autoload 'edebug-inline-result-mode "edebug-inline-result" nil)

(autoload 'edebug-inline-result-mode "edebug-inline-result" "\
A minor mode that show Edebug result with inline style.

If called interactively, enable Edebug-Inline-Result mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "edebug-inline-result" '("edebug-inline-result-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/edbi-20160225.141/edbi-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/edbi-20160225.141/edbi-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/edbi-20160225.141/edbi-autoloads.el") (car load-path))))



(autoload 'edbi:open-db-viewer "edbi" "\
Open Database viewer buffer." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "edbi" '("edbi:")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/dynamic-spaces-20171027.1851/dynamic-spaces-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/dynamic-spaces-20171027.1851/dynamic-spaces-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/dynamic-spaces-20171027.1851/dynamic-spaces-autoloads.el") (car load-path))))


(autoload 'dynamic-spaces-mode "dynamic-spaces" "\
Minor mode that adapts surrounding spaces when editing.

\(fn &optional ARG)" t nil)

(defvar dynamic-spaces-global-mode nil "\
Non-nil if Dynamic-Spaces-Global mode is enabled.
See the `dynamic-spaces-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dynamic-spaces-global-mode'.")

(custom-autoload 'dynamic-spaces-global-mode "dynamic-spaces" nil)

(autoload 'dynamic-spaces-global-mode "dynamic-spaces" "\
Toggle Dynamic-Spaces mode in all buffers.
With prefix ARG, enable Dynamic-Spaces-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Dynamic-Spaces mode is enabled in all buffers where
`dynamic-spaces-activate-if-applicable' would do it.
See `dynamic-spaces-mode' for more information on Dynamic-Spaces mode.

\(fn &optional ARG)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/dtrt-indent-20220226.1354/dtrt-indent-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/dtrt-indent-20220226.1354/dtrt-indent-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/dtrt-indent-20220226.1354/dtrt-indent-autoloads.el") (car load-path))))



(autoload 'dtrt-indent-mode "dtrt-indent" "\
Toggle dtrt-indent mode.
With no argument, this command toggles the mode.  Non-null prefix
argument turns on the mode.  Null prefix argument turns off the
mode.

If called interactively, enable Dtrt-Indent mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When dtrt-indent mode is enabled, the proper indentation offset
and `indent-tabs-mode' will be guessed for newly opened files and
adjusted transparently.

\(fn &optional ARG)" t nil)

(put 'dtrt-indent-global-mode 'globalized-minor-mode t)

(defvar dtrt-indent-global-mode nil "\
Non-nil if Dtrt-Indent-Global mode is enabled.
See the `dtrt-indent-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dtrt-indent-global-mode'.")

(custom-autoload 'dtrt-indent-global-mode "dtrt-indent" nil)

(autoload 'dtrt-indent-global-mode "dtrt-indent" "\
Toggle Dtrt-Indent mode in all buffers.
With prefix ARG, enable Dtrt-Indent-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Dtrt-Indent mode is enabled in all buffers where
`(lambda nil (when (derived-mode-p 'prog-mode 'text-mode 'javascript-mode) (dtrt-indent-mode)))' would do it.
See `dtrt-indent-mode' for more information on Dtrt-Indent mode.

\(fn &optional ARG)" t nil)

(defvar dtrt-indent-mode nil "\
Toggle adaptive indentation mode.
Setting this variable directly does not take effect;
use either \\[customize] or the function `dtrt-indent-mode'.")

(custom-autoload 'dtrt-indent-mode "dtrt-indent" nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dtrt-indent" '("dtrt-indent-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dtrt-indent-diag" '("dtrt-indent-" "save-buffer-state")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/dotenv-mode-20191027.2129/dotenv-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/dotenv-mode-20191027.2129/dotenv-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/dotenv-mode-20191027.2129/dotenv-mode-autoloads.el") (car load-path))))



(autoload 'dotenv-mode "dotenv-mode" "\
Major mode for `.env' files.

\(fn)" t nil)

(mapc (lambda (s) (add-to-list 'auto-mode-alist `(,s . dotenv-mode))) '("\\.env\\'" "\\.env\\.example\\'"))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dotenv-mode" '("dotenv-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/direnv-20220103.1342/direnv-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/direnv-20220103.1342/direnv-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/direnv-20220103.1342/direnv-autoloads.el") (car load-path))))



(autoload 'direnv-update-environment "direnv" "\
Update the environment for FILE-NAME.

See `direnv-update-directory-environment' for FORCE-SUMMARY.

\(fn &optional FILE-NAME FORCE-SUMMARY)" t nil)

(autoload 'direnv-update-directory-environment "direnv" "\
Update the environment for DIRECTORY.

When FORCE-SUMMARY is non-nil or when called interactively, show a summary message.

\(fn &optional DIRECTORY FORCE-SUMMARY)" t nil)

(autoload 'direnv-allow "direnv" "\
Run ‘direnv allow’ and update the environment afterwards." t nil)

(defvar direnv-mode nil "\
Non-nil if Direnv mode is enabled.
See the `direnv-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `direnv-mode'.")

(custom-autoload 'direnv-mode "direnv" nil)

(autoload 'direnv-mode "direnv" "\
Global minor mode to automatically update the environment using direnv.

If called interactively, enable Direnv mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

When this mode is active, the environment inside Emacs will be
continuously updated to match the direnv environment for the currently
visited (local) file.

\(fn &optional ARG)" t nil)

(autoload 'direnv-envrc-mode "direnv" "\
Major mode for .envrc files as used by direnv.

Since .envrc files are shell scripts, this mode inherits from ‘sh-mode’.
\\{direnv-envrc-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.envrc\\'" . direnv-envrc-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "direnv" '("direnv-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/diminish-20220104.1539/diminish-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/diminish-20220104.1539/diminish-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/diminish-20220104.1539/diminish-autoloads.el") (car load-path))))



(autoload 'diminish "diminish" "\
Diminish mode-line display of minor mode MODE to TO-WHAT (default \"\").

Interactively, enter (with completion) the name of any minor mode, followed
on the next line by what you want it diminished to (default empty string).
The response to neither prompt should be quoted.  However, in Lisp code,
both args must be quoted, the first as a symbol, the second as a string,
as in (diminish 'jiggle-mode \" Jgl\").

The mode-line displays of minor modes usually begin with a space, so
the modes' names appear as separate words on the mode line.  However, if
you're having problems with a cramped mode line, you may choose to use single
letters for some modes, without leading spaces.  Capitalizing them works
best; if you then diminish some mode to \"X\" but have `abbrev-mode' enabled as
well, you'll get a display like \"AbbrevX\".  This function prepends a space
to TO-WHAT if it's > 1 char long & doesn't already begin with a space.

\(fn MODE &optional TO-WHAT)" t nil)

(autoload 'diminish-undo "diminish" "\
Restore mode-line display of diminished mode MODE to its minor-mode value.
Do nothing if the arg is a minor mode that hasn't been diminished.

Interactively, enter (with completion) the name of any diminished mode (a
mode that was formerly a minor mode on which you invoked \\[diminish]).
To restore all diminished modes to minor status, answer `diminished-modes'.
The response to the prompt shouldn't be quoted.  However, in Lisp code,
the arg must be quoted as a symbol, as in (diminish-undo 'diminished-modes).

\(fn MODE)" t nil)

(autoload 'diminished-modes "diminish" "\
Echo all active diminished or minor modes as if they were minor.
The display goes in the echo area; if it's too long even for that,
you can see the whole thing in the *Messages* buffer.
This doesn't change the status of any modes; it just lets you see
what diminished modes would be on the mode-line if they were still minor." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "diminish" '("diminish")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/diffview-20220322.2334/diffview-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/diffview-20220322.2334/diffview-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/diffview-20220322.2334/diffview-autoloads.el") (car load-path))))



(autoload 'diffview-current "diffview" "\
Show current diff buffer in a side-by-side view." t nil)

(autoload 'diffview-region "diffview" "\
Show current diff region in a side-by-side view." t nil)

(autoload 'diffview-message "diffview" "\
Show `message-mode' buffer in a side-by-side view.

This is useful for reading patches from mailing lists." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "diffview" '("diffview-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/demap-20220322.2309/demap-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/demap-20220322.2309/demap-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/demap-20220322.2309/demap-autoloads.el") (car load-path))))



(autoload 'demap-open "demap" "\
Open minimap in a side window.
makes a minimap buffer and shows it. if
MINIMAP-OR-NAME is non-nil or a minimap with the
name in `demap-minimap-default-name' exists, show
that minimap instead. if the minimap is already
being shown, nothing happens.

FRAME specifies what frame to look for windows
that already show the minimap. it should be a live
frame or one of the fallowing:
    nil      for the selected frame,
    t        for any live frame,
    'visible for any visible frame,
    0        for any visible.

\(fn &optional MINIMAP-OR-NAME FRAME)" t nil)

(autoload 'demap-close "demap" "\
Close the side window showing a minimap.
close the side window showing MINIMAP-OR-NAME. has
no effect on normal windows showing
MINIMAP-OR-NAME.

a side window is a window made by
`display-buffer-in-side-window' or `demap-open'.

FRAME specifies what frame to look for side windows
in. it should be:
    nil      for the selected frame,
    t        for any live frame,
    'visible for any visible frame,
    0        for any visible.

could kill MINIMAP-OR-NAME if
`demap-minimap-close-kill-minimap-p' is non-nil.

if a window is removed returns t, otherwise nil.

\(fn &optional MINIMAP-OR-NAME FRAME)" t nil)

(autoload 'demap-toggle "demap" "\
Toggle side window showing a minimap.
opens MINIMAP-OR-NAME in a side window. if its
already showing, removes it instead.

FRAME specifies what frame to look for side windows
in. it should be:
    nil      for the selected frame,
    t        for any live frame,
    'visible for any visible frame,
    0        for any visible.

see `demap-open' and `demap-close' for more
information.

\(fn &optional MINIMAP-OR-NAME FRAME)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "demap" '("demap-minimap-")))



(autoload 'demap-minimap-construct "demap-minimap" "\
Construct a demap minimap interactively.
NAME    is the name of the minimap.
        defaults to `demap-minimap-default-name'.
SHOWING is the buffer that the minimap should show.
        defaults to a blank buffer.

\(fn &optional NAME SHOWING)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "demap-minimap" '("demap-")))



(autoload 'demap-define-minimap-miner-mode "demap-modes" "\
Define miner mode for demap minimap buffers.
expanded version of `define-minor-mode'.
modes defined with this macro will only work in a
demap minimap buffer.

this macro also adds a few options:
:protect
        variable or list of variables to copy when
        minimap reconstructs its buffer. the mode
        variable is implicitly protected. notice,
        these variables are made unprotected when
        the mode is disabled, regardless of whether
        other modes are protecting them or not.
:init-func
        form evaluated to set the mode variable to
        true. can also be used to initialize any
        hooks used by this mode. if this form dose
        not set the mode variable to a non-nil
        value, then the mode is still considered
        disabled. this will not be called while the
        mode is active.
:kill-func
        form evaluated to set the mode variable to
        nil. can also be used to uninitialized any
        hooks used by this mode. this form is also
        evaluated if the mode is active when the
        buffer is killed. if this dose not set the
        mode variable to nil then the mode is
        considered still activated. this will not
        be called while the mode is not active.
:set-func
        a function that sets the value of the mode
        variable. this option overrides :init-func
        and :kill-func. it should be a function
        that accepts one argument (STATE). STATE is
        the state that the mode variable should be
        set to. if the mode variable dose not
        change then nether dose the modes state.

the rest of the arguments are passed to
`define-minor-mode'.

\(fn MODE DOC &optional INIT-VALUE LIGHTER KEYMAP &rest BODY)" nil t)

(function-put 'demap-define-minimap-miner-mode 'doc-string-elt '2)

(function-put 'demap-define-minimap-miner-mode 'lisp-indent-function '1)

(demap-define-minimap-miner-mode demap-track-window-mode "\
Minimap miner mode to make minimap show the active window.
makes the minimap this is active in show the buffer
in the currently active window. will not show the
window if `demap-track-window-mode-update-p-func'
returns nil.

this mode can only be used in a demap minimap buffer." :package-version '(demap . "1.0.0") :group 'demap :init-func (progn (setf demap-track-window-mode t) (thread-last (demap-buffer-minimap) (apply-partially #'demap-track-window-mode-update) (add-hook 'window-state-change-hook))) :kill-func (progn (thread-last (demap-buffer-minimap) (apply-partially #'demap-track-window-mode-update) (remove-hook 'window-state-change-hook)) (kill-local-variable 'demap-track-window-mode)))

(demap-define-minimap-miner-mode demap-current-line-mode "\
Minimap miner mode to highlight the current line.
this will use `demap-current-line-face' to
highlight the current line, or
`demap-current-line-inactive-face' when the window
the current minimap is showing is not active.

this mode can only be used in a demap minimap buffer." :package-version '(demap . "1.0.0") :group 'demap :init-func (progn (setq demap-current-line-mode (make-overlay 0 0)) (let ((set-func #'demap--current-line-mode-wake-if) (sleep-func #'demap--current-line-mode-sleep)) (add-hook 'demap-minimap-window-set-hook set-func nil t) (add-hook 'demap-minimap-window-sleep-hook sleep-func nil t))) :kill-func (progn (demap--current-line-mode-sleep) (delete-overlay demap-current-line-mode) (kill-local-variable 'demap-current-line-mode) (let ((set-func #'demap--current-line-mode-wake-if) (sleep-func #'demap--current-line-mode-sleep)) (remove-hook 'demap-minimap-window-set-hook set-func t) (remove-hook 'demap-minimap-window-sleep-hook sleep-func t))))

(demap-define-minimap-miner-mode demap-visible-region-mode "\
Minimap miner mode to show the visible region in minimaps window.
this highlights the area in the minimap visible
from the window it is showing. when the window
shown is active, the face
`demap-visible-region-face' is used, otherwise
`demap-visible-region-inactive-face' is used.

this mode can only be used in a demap minimap buffer." :package-version '(demap . "1.0.0") :group 'demap :init-func (progn (setq demap-visible-region-mode (make-overlay 0 0)) (let ((set-func #'demap--visible-region-mode-wake-if) (sleep-func #'demap--visible-region-mode-rest)) (add-hook 'demap-minimap-window-set-hook set-func nil t) (add-hook 'demap-minimap-window-sleep-hook sleep-func nil t))) :kill-func (progn (demap--visible-region-mode-sleep) (delete-overlay demap-visible-region-mode) (kill-local-variable 'demap-visible-region-mode) (let ((set-func #'demap--visible-region-mode-wake-if) (sleep-func #'demap--visible-region-mode-rest)) (remove-hook 'demap-minimap-window-set-hook set-func t) (remove-hook 'demap-minimap-window-sleep-hook sleep-func t))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "demap-modes" '("demap-track-window-mode-update-p-func")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "demap-tools" '("demap--tools-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/deadgrep-20220209.719/deadgrep-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/deadgrep-20220209.719/deadgrep-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/deadgrep-20220209.719/deadgrep-autoloads.el") (car load-path))))



(autoload 'deadgrep "deadgrep" "\
Start a ripgrep search for SEARCH-TERM in DIRECTORY.

If not provided, DIR defaults to the directory as determined by
`deadgrep-project-root-function'.

See also `deadgrep-project-root-overrides'.

If called with a prefix argument, create the results buffer but
don't actually start the search.

\(fn SEARCH-TERM &optional DIRECTORY)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "deadgrep" '("deadgrep-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/dash-functional-20210210.1449/dash-functional-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/dash-functional-20210210.1449/dash-functional-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/dash-functional-20210210.1449/dash-functional-autoloads.el") (car load-path))))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/cycle-quotes-0.1/cycle-quotes-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/cycle-quotes-0.1/cycle-quotes-autoloads.el"))
(add-to-list 'load-path (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/cycle-quotes-0.1/cycle-quotes-autoloads.el") (car load-path)))


(autoload 'cycle-quotes "cycle-quotes" "\
Cycle between string quote styles.

\(fn)" t nil)




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/csv-mode-1.18/csv-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/csv-mode-1.18/csv-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/csv-mode-1.18/csv-mode-autoloads.el") (car load-path))))



(autoload 'csv-mode "csv-mode" "\
Major mode for editing files of comma-separated value type.

CSV mode is derived from `text-mode', and runs `text-mode-hook' before
running `csv-mode-hook'.  It turns `auto-fill-mode' off by default.
CSV mode can be customized by user options in the CSV customization
group.  The separators are specified by the value of `csv-separators'.

CSV mode commands ignore blank lines and comment lines beginning with
the value of `csv-comment-start', which delimit \"paragraphs\".
\"Sexp\" is re-interpreted to mean \"field\", so that `forward-sexp'
\(\\[forward-sexp]), `kill-sexp' (\\[kill-sexp]), etc. all apply to fields.
Standard comment commands apply, such as `comment-dwim' (\\[comment-dwim]).

If `font-lock-mode' is enabled then separators, quoted values and
comment lines are highlighted using respectively `csv-separator-face',
`font-lock-string-face' and `font-lock-comment-face'.

The user interface (UI) for CSV mode commands is similar to that of
the standard commands `sort-fields' and `sort-numeric-fields', except
that if there is no prefix argument then the UI prompts for the field
index or indices.  In `transient-mark-mode' only: if the region is not
set then the UI attempts to set it to include all consecutive CSV
records around point, and prompts for confirmation; if there is no
prefix argument then the UI prompts for it, offering as a default the
index of the field containing point if the region was not set
explicitly.  The region set automatically is delimited by blank lines
and comment lines, and the number of header lines at the beginning of
the region given by the value of `csv-header-lines' are skipped.

Sort order is controlled by `csv-descending'.

CSV mode provides the following specific keyboard key bindings:

\\{csv-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.[Cc][Ss][Vv]\\'" . csv-mode))

(add-to-list 'auto-mode-alist '("\\.tsv\\'" . tsv-mode))

(autoload 'tsv-mode "csv-mode" "\
Major mode for editing files of tab-separated value type.

\(fn)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "csv-mode" '("csv-" "tsv-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "csv-mode-tests" '("csv-mode-tests--align-fields")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/csv-20161113.1510/csv-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/csv-20161113.1510/csv-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/csv-20161113.1510/csv-autoloads.el") (car load-path))))



)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/crontab-mode-20210715.133/crontab-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/crontab-mode-20210715.133/crontab-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/crontab-mode-20210715.133/crontab-mode-autoloads.el") (car load-path))))



(autoload 'crontab-mode "crontab-mode" "\
Major mode for editing crontab file.

\\{crontab-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("/crontab\\(\\.X*[[:alnum:]]+\\)?\\'" . crontab-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "crontab-mode" '("crontab-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/cquery-20190118.542/cquery-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/cquery-20190118.542/cquery-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/cquery-20190118.542/cquery-autoloads.el") (car load-path))))



)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/counsel-20220402.953/counsel-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/counsel-20220402.953/counsel-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/counsel-20220402.953/counsel-autoloads.el") (car load-path))))



(autoload 'counsel-company "counsel" "\
Complete using `company-candidates'." t nil)

(autoload 'counsel-irony "counsel" "\
Inline C/C++ completion using Irony." t nil)

(autoload 'counsel-describe-variable "counsel" "\
Forward to `describe-variable'.

Variables declared using `defcustom' are highlighted according to
`ivy-highlight-face'." t nil)

(autoload 'counsel-describe-function "counsel" "\
Forward to `describe-function'.

Interactive functions (i.e., commands) are highlighted according
to `ivy-highlight-face'." t nil)

(autoload 'counsel-describe-symbol "counsel" "\
Forward to `describe-symbol'." t nil)

(autoload 'counsel-set-variable "counsel" "\
Set a variable SYM, with completion.

When the selected variable is a `defcustom' with the type boolean
or radio, offer completion of all possible values.

Otherwise, offer a variant of `eval-expression', with the initial
input corresponding to the chosen variable.

With a prefix arg, restrict list to variables defined using
`defcustom'.

\(fn SYM)" t nil)

(autoload 'counsel-apropos "counsel" "\
Show all matching symbols.
See `apropos' for further information on what is considered
a symbol and how to search for them." t nil)

(autoload 'counsel-info-lookup-symbol "counsel" "\
Forward SYMBOL to `info-lookup-symbol' with ivy completion.
With prefix arg MODE a query for the symbol help mode is offered.

\(fn SYMBOL &optional MODE)" t nil)

(autoload 'counsel-M-x "counsel" "\
Ivy version of `execute-extended-command'.
Optional INITIAL-INPUT is the initial input in the minibuffer.
This function integrates with either the `amx' or `smex' package
when available, in that order of precedence.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-command-history "counsel" "\
Show the history of commands." t nil)

(autoload 'counsel-load-library "counsel" "\
Load a selected the Emacs Lisp library.
The libraries are offered from `load-path'." t nil)

(autoload 'counsel-find-library "counsel" "\
Visit a selected the Emacs Lisp library.
The libraries are offered from `load-path'." t nil)

(autoload 'counsel-load-theme "counsel" "\
Forward to `load-theme'.
Usable with `ivy-resume', `ivy-next-line-and-call' and
`ivy-previous-line-and-call'." t nil)

(autoload 'counsel-descbinds "counsel" "\
Show a list of all defined keys and their definitions.
If non-nil, show only bindings that start with PREFIX.
BUFFER defaults to the current one.

\(fn &optional PREFIX BUFFER)" t nil)

(autoload 'counsel-describe-face "counsel" "\
Completion for `describe-face'." t nil)

(autoload 'counsel-faces "counsel" "\
Complete faces with preview.
Actions are provided by default for describing or customizing the
selected face." t nil)

(autoload 'counsel-git "counsel" "\
Find file in the current Git repository.
INITIAL-INPUT can be given as the initial minibuffer input.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-git-grep "counsel" "\
Grep for a string in the current Git repository.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.
When CMD is a string, use it as a \"git grep\" command.
When CMD is non-nil, prompt for a specific \"git grep\" command.

\(fn &optional INITIAL-INPUT INITIAL-DIRECTORY CMD)" t nil)

(autoload 'counsel-git-stash "counsel" "\
Search through all available git stashes." t nil)

(autoload 'counsel-git-change-worktree "counsel" "\
Find the file corresponding to the current buffer on a different worktree." t nil)

(autoload 'counsel-git-checkout "counsel" "\
Call the \"git checkout\" command." t nil)

(autoload 'counsel-git-log "counsel" "\
Call the \"git log --grep\" shell command." t nil)

(autoload 'counsel-find-file "counsel" "\
Forward to `find-file'.
When INITIAL-INPUT is non-nil, use it in the minibuffer during completion.

\(fn &optional INITIAL-INPUT INITIAL-DIRECTORY)" t nil)

(autoload 'counsel-dired "counsel" "\
Forward to `dired'.
When INITIAL-INPUT is non-nil, use it in the minibuffer during completion.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-recentf "counsel" "\
Find a file on `recentf-list'." t nil)

(autoload 'counsel-buffer-or-recentf "counsel" "\
Find a buffer visiting a file or file on `recentf-list'." t nil)

(autoload 'counsel-bookmark "counsel" "\
Forward to `bookmark-jump' or `bookmark-set' if bookmark doesn't exist." t nil)

(autoload 'counsel-bookmarked-directory "counsel" "\
Ivy interface for bookmarked directories.

With a prefix argument, this command creates a new bookmark which points to the
current value of `default-directory'." t nil)

(autoload 'counsel-file-register "counsel" "\
Search file in register.

You cannot use Emacs' normal register commands to create file
registers.  Instead you must use the `set-register' function like
so: `(set-register ?i \"/home/eric/.emacs.d/init.el\")'.  Now you
can use `C-x r j i' to open that file." t nil)

(autoload 'counsel-locate-action-extern "counsel" "\
Pass X to `xdg-open' or equivalent command via the shell.

\(fn X)" t nil)

(autoload 'counsel-locate "counsel" "\
Call a \"locate\" style shell command.
INITIAL-INPUT can be given as the initial minibuffer input.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-tracker "counsel" nil t nil)

(autoload 'counsel-fzf "counsel" "\
Open a file using the fzf shell command.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.
FZF-PROMPT, if non-nil, is passed as `ivy-read' prompt argument.

\(fn &optional INITIAL-INPUT INITIAL-DIRECTORY FZF-PROMPT)" t nil)

(autoload 'counsel-dpkg "counsel" "\
Call the \"dpkg\" shell command." t nil)

(autoload 'counsel-rpm "counsel" "\
Call the \"rpm\" shell command." t nil)

(autoload 'counsel-file-jump "counsel" "\
Jump to a file below the current directory.
List all files within the current directory or any of its sub-directories.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.

\(fn &optional INITIAL-INPUT INITIAL-DIRECTORY)" t nil)

(autoload 'counsel-dired-jump "counsel" "\
Jump to a directory (see `dired-jump') below the current directory.
List all sub-directories within the current directory.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.

\(fn &optional INITIAL-INPUT INITIAL-DIRECTORY)" t nil)

(autoload 'counsel-ag "counsel" "\
Grep for a string in a root directory using `ag'.

By default, the root directory is the first directory containing
a .git subdirectory.

INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.
EXTRA-AG-ARGS, if non-nil, is appended to `counsel-ag-base-command'.
AG-PROMPT, if non-nil, is passed as `ivy-read' prompt argument.
CALLER is passed to `ivy-read'.

With a `\\[universal-argument]' prefix argument, prompt for INITIAL-DIRECTORY.
With a `\\[universal-argument] \\[universal-argument]' prefix argument, prompt additionally for EXTRA-AG-ARGS.

\(fn &optional INITIAL-INPUT INITIAL-DIRECTORY EXTRA-AG-ARGS AG-PROMPT &key CALLER)" t nil)

(autoload 'counsel-pt "counsel" "\
Grep for a string in the current directory using pt.
INITIAL-INPUT can be given as the initial minibuffer input.
This uses `counsel-ag' with `counsel-pt-base-command' instead of
`counsel-ag-base-command'.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-ack "counsel" "\
Grep for a string in the current directory using ack.
INITIAL-INPUT can be given as the initial minibuffer input.
This uses `counsel-ag' with `counsel-ack-base-command' replacing
`counsel-ag-base-command'.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-rg "counsel" "\
Grep for a string in the current directory using `rg'.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.
EXTRA-RG-ARGS string, if non-nil, is appended to `counsel-rg-base-command'.
RG-PROMPT, if non-nil, is passed as `ivy-read' prompt argument.

Example input with inclusion and exclusion file patterns:
    require i -- -g*.el

\(fn &optional INITIAL-INPUT INITIAL-DIRECTORY EXTRA-RG-ARGS RG-PROMPT)" t nil)

(autoload 'counsel-grep "counsel" "\
Grep for a string in the file visited by the current buffer.
When non-nil, INITIAL-INPUT is the initial search pattern.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-grep-backward "counsel" "\
Grep for a string in the file visited by the current buffer going
backward similar to `swiper-backward'. When non-nil, INITIAL-INPUT is
the initial search pattern.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-grep-or-swiper "counsel" "\
Call `swiper' for small buffers and `counsel-grep' for large ones.
When non-nil, INITIAL-INPUT is the initial search pattern.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-grep-or-swiper-backward "counsel" "\
Call `swiper-backward' for small buffers and `counsel-grep-backward' for
large ones.  When non-nil, INITIAL-INPUT is the initial search pattern.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel-recoll "counsel" "\
Search for a string in the recoll database.
You'll be given a list of files that match.
Selecting a file will launch `swiper' for that file.
INITIAL-INPUT can be given as the initial minibuffer input.

\(fn &optional INITIAL-INPUT)" t nil)

(autoload 'counsel--org-get-tags "counsel" nil nil nil)

(autoload 'counsel-org-tag "counsel" "\
Add or remove tags in `org-mode'." t nil)

(autoload 'counsel-org-tag-agenda "counsel" "\
Set tags for the current agenda item." t nil)

(defalias 'counsel-org-goto #'counsel-outline)

(autoload 'counsel-org-goto-all "counsel" "\
Go to a different location in any org file." t nil)

(autoload 'counsel-org-file "counsel" "\
Browse all attachments for current Org file." t nil)

(autoload 'counsel-org-entity "counsel" "\
Complete Org entities using Ivy." t nil)

(autoload 'counsel-org-capture "counsel" "\
Capture something." t nil)

(autoload 'counsel-org-agenda-headlines "counsel" "\
Choose from headers of `org-mode' files in the agenda." t nil)

(autoload 'counsel-org-link "counsel" "\
Insert a link to an headline with completion." t nil)

(autoload 'counsel-mark-ring "counsel" "\
Browse `mark-ring' interactively.
Obeys `widen-automatically', which see." t nil)

(autoload 'counsel-evil-marks "counsel" "\
Ivy replacement for `evil-show-marks'.
By default, this function respects `counsel-evil-marks-exclude-registers'.
When ARG is non-nil, display all active evil registers.

\(fn &optional ARG)" t nil)

(autoload 'counsel-package "counsel" "\
Install or delete packages.

Packages not currently installed are prefixed with \"+\", and
selecting one of these will try to install it.
Packages currently installed are prefixed with \"-\", and
selecting one of these will try to delete it.

Additional actions:\\<ivy-minibuffer-map>

  \\[ivy-dispatching-done] d: Describe package
  \\[ivy-dispatching-done] h: Visit package's homepage" t nil)

(autoload 'counsel-tmm "counsel" "\
Text-mode emulation of looking and choosing from a menu bar." t nil)

(autoload 'counsel-yank-pop "counsel" "\
Ivy replacement for `yank-pop'.
With a plain prefix argument (\\[universal-argument]),
temporarily toggle the value of `counsel-yank-pop-after-point'.
Any other value of ARG has the same meaning as in `yank-pop', but
`counsel-yank-pop-preselect-last' determines its default value.
See also `counsel-yank-pop-filter' for how to filter candidates.

Note: Duplicate elements of `kill-ring' are always deleted.

\(fn &optional ARG)" t nil)

(autoload 'counsel-register "counsel" "\
Interactively choose a register." t nil)

(autoload 'counsel-evil-registers "counsel" "\
Ivy replacement for `evil-show-registers'." t nil)

(autoload 'counsel-imenu "counsel" "\
Jump to a buffer position indexed by imenu." t nil)

(autoload 'counsel-list-processes "counsel" "\
Offer completion for `process-list'.
The default action deletes the selected process.
An extra action allows to switch to the process buffer." t nil)

(autoload 'counsel-minibuffer-history "counsel" "\
Browse minibuffer history." t nil)

(autoload 'counsel-esh-history "counsel" "\
Browse Eshell history." t nil)

(autoload 'counsel-shell-history "counsel" "\
Browse shell history." t nil)

(autoload 'counsel-slime-repl-history "counsel" "\
Browse Slime REPL history." t nil)

(autoload 'counsel-hydra-heads "counsel" "\
Call a head of the current/last hydra." t nil)

(autoload 'counsel-semantic "counsel" "\
Jump to a semantic tag in the current buffer." t nil)

(autoload 'counsel-semantic-or-imenu "counsel" nil t nil)

(autoload 'counsel-outline "counsel" "\
Jump to an outline heading with completion." t nil)

(autoload 'counsel-ibuffer "counsel" "\
Use ibuffer to switch to another buffer.
NAME specifies the name of the buffer (defaults to \"*Ibuffer*\").

\(fn &optional NAME)" t nil)

(autoload 'counsel-switch-to-shell-buffer "counsel" "\
Switch to a shell buffer, or create one." t nil)

(autoload 'counsel-unicode-char "counsel" "\
Insert COUNT copies of a Unicode character at point.
COUNT defaults to 1.

\(fn &optional COUNT)" t nil)

(autoload 'counsel-colors-emacs "counsel" "\
Show a list of all supported colors for a particular frame.

You can insert or kill the name or hexadecimal RGB value of the
selected color." t nil)

(autoload 'counsel-colors-web "counsel" "\
Show a list of all W3C web colors for use in CSS.

You can insert or kill the name or hexadecimal RGB value of the
selected color." t nil)

(autoload 'counsel-fonts "counsel" "\
Show a list of all supported font families for a particular frame.

You can insert or kill the name of the selected font." t nil)

(autoload 'counsel-kmacro "counsel" "\
Interactively choose and run a keyboard macro.

With prefix argument, run macro that many times.

Macros are run using the current value of `kmacro-counter-value'
and their respective counter format. Displayed next to each macro is
the counter's format and initial value.

One can use actions to copy the counter format or initial counter
value of a macro, using them for a new macro." t nil)

(autoload 'counsel-geiser-doc-look-up-manual "counsel" "\
Search Scheme documentation." t nil)

(autoload 'counsel-rhythmbox "counsel" "\
Choose a song from the Rhythmbox library to play or enqueue.

\(fn &optional ARG)" t nil)

(autoload 'counsel-linux-app "counsel" "\
Launch a Linux desktop application, similar to Alt-<F2>.
When ARG is non-nil, ignore NoDisplay property in *.desktop files.

\(fn &optional ARG)" t nil)

(autoload 'counsel-wmctrl "counsel" "\
Select a desktop window using wmctrl." t nil)

(autoload 'counsel-switch-buffer "counsel" "\
Switch to another buffer.
Display a preview of the selected ivy completion candidate buffer
in the current window." t nil)

(autoload 'counsel-switch-buffer-other-window "counsel" "\
Switch to another buffer in another window.
Display a preview of the selected ivy completion candidate buffer
in the current window." t nil)

(autoload 'counsel-compile "counsel" "\
Call `compile' completing with smart suggestions, optionally for DIR.

Additional actions:

\\{counsel-compile-map}

\(fn &optional DIR)" t nil)

(autoload 'counsel-compile-env "counsel" "\
Update `counsel-compile-env' interactively." t nil)

(autoload 'counsel-minor "counsel" "\
Enable or disable minor mode.

Disabled minor modes are prefixed with \"+\", and
selecting one of these will enable it.
Enabled minor modes are prefixed with \"-\", and
selecting one of these will enable it.

Additional actions:\\<ivy-minibuffer-map>

  \\[ivy-dispatching-done] d: Go to minor mode definition
  \\[ivy-dispatching-done] h: Describe minor mode" t nil)

(autoload 'counsel-major "counsel" nil t nil)

(autoload 'counsel-compilation-errors "counsel" "\
Compilation errors." t nil)

(autoload 'counsel-flycheck "counsel" "\
Flycheck errors." t nil)

(defvar counsel-mode nil "\
Non-nil if Counsel mode is enabled.
See the `counsel-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `counsel-mode'.")

(custom-autoload 'counsel-mode "counsel" nil)

(autoload 'counsel-mode "counsel" "\
Toggle Counsel mode on or off.
Turn Counsel mode on if ARG is positive, off otherwise. Counsel
mode remaps built-in emacs functions that have counsel
replacements.

Local bindings (`counsel-mode-map'):
\\{counsel-mode-map}

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "counsel" '("counsel-" "ivy-function-called-at-point" "tmm-km-list")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/counsel-projectile-20211004.2003/counsel-projectile-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/counsel-projectile-20211004.2003/counsel-projectile-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/counsel-projectile-20211004.2003/counsel-projectile-autoloads.el") (car load-path))))



(autoload 'counsel-projectile-find-file "counsel-projectile" "\
Jump to a file in the current project.

With a prefix ARG, invalidate the cache first.  If DWIM is
non-nil, use completion based on context.

\(fn &optional ARG DWIM)" t nil)

(autoload 'counsel-projectile-find-file-dwim "counsel-projectile" "\
Jump to a file in the current project using completion based on context.

With a prefix ARG, invalidate the cache first.

\(fn &optional ARG)" t nil)

(autoload 'counsel-projectile-find-dir "counsel-projectile" "\
Jump to a directory in the current project.

With a prefix ARG, invalidate the cache first.

\(fn &optional ARG)" t nil)

(autoload 'counsel-projectile-switch-to-buffer "counsel-projectile" "\
Jump to a buffer in the current project.

If `counsel-projectile-preview-buffers' is non-nil, display a
preview of the selected ivy completion candidate buffer as in
`counsel-switch-buffer', falling back to the current buffer or
optionally FROM-BUFFER.

\(fn &optional FROM-BUFFER)" t nil)

(autoload 'counsel-projectile-grep "counsel-projectile" "\
Search the current project with grep.

If inside a git project and `projectile-use-git-grep' is non-nil,
use git grep. Otherwise use grep recursively.

OPTIONS-OR-CMD, if non-nil, is a string containing either
additional options to be passed to grep, or an alternative git
grep command. It is read from the minibuffer if the function is
called with a `\\[universal-argument]' prefix argument.

\(fn &optional OPTIONS-OR-CMD)" t nil)

(autoload 'counsel-projectile-git-grep "counsel-projectile" "\
Search the current project with git grep.

CMD, if non-nil, is a string containing an alternative git grep
command. It is read from the minibuffer if the function is called
with a `\\[universal-argument]' prefix argument.

\(fn &optional CMD)" t nil)

(autoload 'counsel-projectile-ag "counsel-projectile" "\
Search the current project with ag.

OPTIONS, if non-nil, is a string containing additional options to
be passed to ag. It is read from the minibuffer if the function
is called with a `\\[universal-argument]' prefix argument.

\(fn &optional OPTIONS)" t nil)

(autoload 'counsel-projectile-rg "counsel-projectile" "\
Search the current project with rg.

OPTIONS, if non-nil, is a string containing additional options to
be passed to rg. It is read from the minibuffer if the function
is called with a `\\[universal-argument]' prefix argument.

\(fn &optional OPTIONS)" t nil)

(autoload 'counsel-projectile-org-capture "counsel-projectile" "\
Capture into the current project.

This command is a replacement for `org-capture' (or
`counsel-org-capture') offering project-specific capture
templates, in addition to the regular templates available from
`org-capture'. These project templates, which are \"expanded\"
relatively to the current project, are determined by the
variables `counsel-projectile-org-capture-templates' and
`counsel-projectile-org-capture-templates-contexts'. See the
former variable in particular for details.

Optional argument FROM-BUFFER specifies the buffer from which to
capture.

\(fn &optional FROM-BUFFER)" t nil)

(autoload 'counsel-projectile-org-agenda "counsel-projectile" "\
Open project agenda.

This command simply calls `org-agenda' after filtering out all
agenda files that do not belong to the current project.

Optional arguments ARG, KEYS, and RESTRICTION are as in
`org-agenda'.

\(fn &optional ARG KEYS RESTRICTION)" t nil)

(autoload 'counsel-projectile-switch-project "counsel-projectile" "\
Switch project.

Optional argument DEFAULT-ACTION is the key, function, name, or
index in the list `counsel-projectile-switch-project-action' (1
for the first action, etc) of the action to set as default.

\(fn &optional DEFAULT-ACTION)" t nil)

(autoload 'counsel-projectile "counsel-projectile" "\
Jump to a buffer or file in the current project.

With a prefix ARG, invalidate the cache first.

If `counsel-projectile-preview-buffers' is non-nil, display a
preview of the selected ivy completion candidate buffer as in
`counsel-switch-buffer', falling back to the current buffer or
optionally FROM-BUFFER.

If `counsel-switch-buffer-preview-virtual-buffers' is also
non-nil, also display a preview of the selected ivy completion
candidate non-visited file.

\(fn &optional ARG FROM-BUFFER)" t nil)

(defvar counsel-projectile-mode nil "\
Non-nil if Counsel-Projectile mode is enabled.
See the `counsel-projectile-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `counsel-projectile-mode'.")

(custom-autoload 'counsel-projectile-mode "counsel-projectile" nil)

(autoload 'counsel-projectile-mode "counsel-projectile" "\
Toggle Counsel-Projectile mode on or off.

With a prefix argument ARG, enable the mode if ARG is positive,
and disable it otherwise.  If called from Lisp, enable the mode
if ARG is omitted or nil, and toggle it if ARG is `toggle'.

Counsel-Projectile mode turns on Projectile mode, thus enabling
all projectile key bindings, and adds the counsel-projectile key
bindings on top of them.

The counsel-projectile key bindings either remap existing
projectile commands to their counsel-projectile replacements or
bind keys to counsel-projectile commands that have no projectile
counterparts.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "counsel-projectile" '("counsel-projectile-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/counsel-ag-popup-20210121.805/counsel-ag-popup-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/counsel-ag-popup-20210121.805/counsel-ag-popup-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/counsel-ag-popup-20210121.805/counsel-ag-popup-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "counsel-ag-popup" '("counsel-ag-popup-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/corfu-0.20/corfu-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/corfu-0.20/corfu-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/corfu-0.20/corfu-autoloads.el") (car load-path))))



(autoload 'corfu-mode "corfu" "\
Completion Overlay Region FUnction.

If called interactively, enable Corfu mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'corfu-global-mode 'globalized-minor-mode t)

(defvar corfu-global-mode nil "\
Non-nil if Corfu-Global mode is enabled.
See the `corfu-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `corfu-global-mode'.")

(custom-autoload 'corfu-global-mode "corfu" nil)

(autoload 'corfu-global-mode "corfu" "\
Toggle Corfu mode in all buffers.
With prefix ARG, enable Corfu-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Corfu mode is enabled in all buffers where
`corfu--on' would do it.
See `corfu-mode' for more information on Corfu mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "corfu" '("corfu-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/corfu-doc-20220318.1052/corfu-doc-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/corfu-doc-20220318.1052/corfu-doc-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/corfu-doc-20220318.1052/corfu-doc-autoloads.el") (car load-path))))



(autoload 'corfu-doc-scroll-up "corfu-doc" "\


\(fn &optional ARG)" t nil)

(autoload 'corfu-doc-scroll-down "corfu-doc" "\


\(fn &optional ARG)" t nil)

(autoload 'corfu-doc-mode "corfu-doc" "\
Corfu doc minor mode.

If called interactively, enable Corfu-Doc mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'corfu-doc-toggle "corfu-doc" "\
Toggles the doc popup display or hide.

When using this command to manually hide the doc popup, it will
not be displayed until this command is called again. Even if the
corfu doc mode is turned on and `corfu-doc-auto' is set to Non-nil." t nil)

(autoload 'toggle-corfu-doc-mode "corfu-doc" "\
Toggles corfu doc mode on or off.
With optional ARG, turn corfu doc mode on if and only if ARG is positive.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "corfu-doc" '("corfu-doc-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/compact-docstrings-0.2/compact-docstrings-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/compact-docstrings-0.2/compact-docstrings-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/compact-docstrings-0.2/compact-docstrings-autoloads.el") (car load-path))))



(autoload 'compact-docstrings-mode "compact-docstrings" "\
Shrink empty lines in docstrings and doc comments.

If called interactively, enable Compact-Docstrings mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(defalias 'shrink-docstrings #'compact-docstrings--mode-on)

(put 'global-compact-docstrings-mode 'globalized-minor-mode t)

(defvar global-compact-docstrings-mode nil "\
Non-nil if Global Compact-Docstrings mode is enabled.
See the `global-compact-docstrings-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-compact-docstrings-mode'.")

(custom-autoload 'global-compact-docstrings-mode "compact-docstrings" nil)

(autoload 'global-compact-docstrings-mode "compact-docstrings" "\
Toggle Compact-Docstrings mode in all buffers.
With prefix ARG, enable Global Compact-Docstrings mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Compact-Docstrings mode is enabled in all buffers where
`compact-docstrings--mode-on' would do it.
See `compact-docstrings-mode' for more information on Compact-Docstrings mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "compact-docstrings" '("compact-docstrings-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/code-review-20220328.108/code-review-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/code-review-20220328.108/code-review-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/code-review-20220328.108/code-review-autoloads.el") (car load-path))))



(autoload 'code-review-forge-pr-at-point "code-review" "\
Review the forge pull request at point.
OUTDATED." t nil)

(autoload 'code-review-start "code-review" "\
Start review given PR URL.

\(fn URL)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review" '("code-review-")))



(autoload 'code-review--submit "code-review-actions" "\
Submit your review with a final verdict (EVENT).
If you already have a FEEDBACK string use it.
If you want only to submit replies, use ONLY-REPLY? as non-nil.

\(fn EVENT &optional FEEDBACK ONLY-REPLY\\=\\?)" t nil)

(autoload 'code-review-submit-approve "code-review-actions" "\
Approve current PR.
Optionally set a FEEDBACK message.

\(fn &optional FEEDBACK)" t nil)

(autoload 'code-review-submit-comments "code-review-actions" "\
Submit a Review Comment for the current PR." t nil)

(autoload 'code-review-submit-request-changes "code-review-actions" "\
Submit a Request Change for the current PR." t nil)

(autoload 'code-review-submit-lgtm "code-review-actions" "\
Submit an Approve Review with a LGTM message." t nil)

(autoload 'code-review-submit-only-replies "code-review-actions" "\
Submit only replies comments." t nil)

(autoload 'code-review-submit-single-top-level-comment "code-review-actions" "\
Submit a single comment without an attached Review." t nil)

(autoload 'code-review-submit-single-diff-comment-at-point "code-review-actions" "\
Submit a single diff comment without an attached Review." t nil)

(autoload 'code-review-save-unfinished-review "code-review-actions" "\
Save unfinished Review." t nil)

(autoload 'code-review-recover-unfinished-review "code-review-actions" "\
Recover unfinished Review for the given URL.

\(fn URL)" t nil)

(autoload 'code-review-open-unfinished-review "code-review-actions" "\
Choose an unfinished Review from the previous unfinished list." t nil)

(autoload 'code-review-merge-merge "code-review-actions" "\
Merge PR with MERGE strategy." t nil)

(autoload 'code-review-merge-rebase "code-review-actions" "\
Merge PR with REBASE strategy." t nil)

(autoload 'code-review-merge-squash "code-review-actions" "\
Merge PR with SQUASH strategy." t nil)

(autoload 'code-review-set-feedback "code-review-actions" "\
Add review FEEDBACK locally.  Required to Comment and Request Change reviews." t nil)

(autoload 'code-review-set-title "code-review-actions" "\
Change the title of current PR.  Sent immediately." t nil)

(autoload 'code-review-set-label "code-review-actions" "\
Change the labels of current PR.  Sent immediately.
Rewrite all current labels with the options chosen here." t nil)

(autoload 'code-review-set-description "code-review-actions" "\
Submit new PR description.  Sent immediately." t nil)

(autoload 'code-review-delete-feedback "code-review-actions" "\
Delete review FEEDBACK locally." t nil)

(autoload 'code-review-reload "code-review-actions" "\
Reload the buffer.  All your local comments will be lost." t nil)

(autoload 'code-review-promote-comment-at-point-to-new-issue "code-review-actions" "\
Promote comment at point to a new issue.  Sent immediately." t nil)

(autoload 'code-review-request-reviews "code-review-actions" "\
Request reviewers for current PR using LOGIN if available.

\(fn &optional LOGIN)" t nil)

(autoload 'code-review-request-review-at-point "code-review-actions" "\
Request reviewer at point.

\(fn &rest _)" t nil)

(autoload 'code-review-toggle-display-all-comments "code-review-actions" "\
Toggle display comments." t nil)

(autoload 'code-review-toggle-display-top-level-comments "code-review-actions" "\
Toggle display the top level comments." t nil)

(autoload 'code-review-toggle-display-diff-comments "code-review-actions" "\
Toggle display the top level comments." t nil)

(autoload 'code-review-comment-code-suggestion "code-review-actions" "\
Add code suggestion box." t nil)

(autoload 'code-review-comment-jump-next "code-review-actions" "\
Go to next comment in the buffer." t nil)

(autoload 'code-review-comment-jump-previous "code-review-actions" "\
Go to previous comment in the buffer." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-actions" '("code-review-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-bitbucket" '("code-review-")))



(autoload 'code-review-comment-add-or-edit "code-review-comment" "\
Add or edit comment depending on context.
Inform if a SUGGESTION-CODE? is being proposed.

\(fn &optional SUGGESTION-CODE\\=\\?)" t nil)

(autoload 'code-review-comment-commit "code-review-comment" "\
Commit comment." t nil)

(autoload 'code-review-input-mention-user-at-point "code-review-comment" "\
Insert @USERNAME at current point to mention an user." t nil)

(autoload 'code-review-comment-quit "code-review-comment" "\
Quit the comment window." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-comment" '("code-review-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-db" '("code-review-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-github" '("code-review-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-gitlab" '("code-review-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-parse-hunk" '("code-review-parse-")))



(autoload 'code-review-section-delete-comment "code-review-section" "\
Delete a local comment." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-section" '("code-review-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "code-review-utils" '("code-review-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/clojure-mode-20220307.1903/clojure-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/clojure-mode-20220307.1903/clojure-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/clojure-mode-20220307.1903/clojure-mode-autoloads.el") (car load-path))))



(autoload 'clojure-mode "clojure-mode" "\
Major mode for editing Clojure code.

\\{clojure-mode-map}

\(fn)" t nil)

(autoload 'clojure-unwind "clojure-mode" "\
Unwind thread at point or above point by N levels.
With universal argument \\[universal-argument], fully unwind thread.

\(fn &optional N)" t nil)

(autoload 'clojure-unwind-all "clojure-mode" "\
Fully unwind thread at point or above point." t nil)

(autoload 'clojure-thread "clojure-mode" "\
Thread by one more level an existing threading macro." t nil)

(autoload 'clojure-thread-first-all "clojure-mode" "\
Fully thread the form at point using ->.

When BUT-LAST is non-nil, the last expression is not threaded.
Default value is `clojure-thread-all-but-last'.

\(fn BUT-LAST)" t nil)

(autoload 'clojure-thread-last-all "clojure-mode" "\
Fully thread the form at point using ->>.

When BUT-LAST is non-nil, the last expression is not threaded.
Default value is `clojure-thread-all-but-last'.

\(fn BUT-LAST)" t nil)

(autoload 'clojure-cycle-privacy "clojure-mode" "\
Make public the current private def, or vice-versa.
See: https://github.com/clojure-emacs/clj-refactor.el/wiki/cljr-cycle-privacy" t nil)

(autoload 'clojure-convert-collection-to-list "clojure-mode" "\
Convert collection at (point) to list." t nil)

(autoload 'clojure-convert-collection-to-quoted-list "clojure-mode" "\
Convert collection at (point) to quoted list." t nil)

(autoload 'clojure-convert-collection-to-map "clojure-mode" "\
Convert collection at (point) to map." t nil)

(autoload 'clojure-convert-collection-to-vector "clojure-mode" "\
Convert collection at (point) to vector." t nil)

(autoload 'clojure-convert-collection-to-set "clojure-mode" "\
Convert collection at (point) to set." t nil)

(autoload 'clojure-cycle-if "clojure-mode" "\
Change a surrounding if to if-not, or vice-versa.

See: https://github.com/clojure-emacs/clj-refactor.el/wiki/cljr-cycle-if" t nil)

(autoload 'clojure-cycle-when "clojure-mode" "\
Change a surrounding when to when-not, or vice-versa." t nil)

(autoload 'clojure-let-backward-slurp-sexp "clojure-mode" "\
Slurp the s-expression before the let form into the let form.
With a numeric prefix argument slurp the previous N s-expressions
into the let form.

\(fn &optional N)" t nil)

(autoload 'clojure-let-forward-slurp-sexp "clojure-mode" "\
Slurp the next s-expression after the let form into the let form.
With a numeric prefix argument slurp the next N s-expressions
into the let form.

\(fn &optional N)" t nil)

(autoload 'clojure-introduce-let "clojure-mode" "\
Create a let form, binding the form at point.
With a numeric prefix argument the let is introduced N lists up.

\(fn &optional N)" t nil)

(autoload 'clojure-move-to-let "clojure-mode" "\
Move the form at point to a binding in the nearest let." t nil)

(autoload 'clojure-rename-ns-alias "clojure-mode" "\
Rename a namespace alias.
If a region is active, only pick up and rename aliases within the region." t nil)

(autoload 'clojure-add-arity "clojure-mode" "\
Add an arity to a function." t nil)

(autoload 'clojurescript-mode "clojure-mode" "\
Major mode for editing ClojureScript code.

\\{clojurescript-mode-map}

\(fn)" t nil)

(autoload 'clojurec-mode "clojure-mode" "\
Major mode for editing ClojureC code.

\\{clojurec-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.\\(clj\\|dtm\\|edn\\)\\'" . clojure-mode))

(add-to-list 'auto-mode-alist '("\\.cljc\\'" . clojurec-mode))

(add-to-list 'auto-mode-alist '("\\.cljs\\'" . clojurescript-mode))

(add-to-list 'auto-mode-alist '("\\(?:build\\|profile\\)\\.boot\\'" . clojure-mode))

(add-to-list 'interpreter-mode-alist '("bb" . clojure-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "clojure-mode" '("add-custom-clojure-indents" "clojure" "define-clojure-indent" "put-clojure-indent")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/cider-20220405.1216/cider-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/cider-20220405.1216/cider-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/cider-20220405.1216/cider-autoloads.el") (car load-path))))



(autoload 'cider-version "cider" "\
Display CIDER's version." t nil)
 (autoload 'cider-start-map "cider" "CIDER jack-in and connect keymap." t 'keymap)

(autoload 'cider-jack-in-clj "cider" "\
Start an nREPL server for the current project and connect to it.
PARAMS is a plist optionally containing :project-dir and :jack-in-cmd.
With the prefix argument, allow editing of the jack in command; with a
double prefix prompt for all these parameters.

\(fn PARAMS)" t nil)

(autoload 'cider-jack-in-cljs "cider" "\
Start an nREPL server for the current project and connect to it.
PARAMS is a plist optionally containing :project-dir, :jack-in-cmd and
:cljs-repl-type (e.g. Node, Figwheel, etc).  With the prefix argument,
allow editing of the jack in command; with a double prefix prompt for all
these parameters.

\(fn PARAMS)" t nil)

(autoload 'cider-jack-in-clj&cljs "cider" "\
Start an nREPL server and connect with clj and cljs REPLs.
PARAMS is a plist optionally containing :project-dir, :jack-in-cmd and
:cljs-repl-type (e.g. Node, Figwheel, etc).  With the prefix argument,
allow for editing of the jack in command; with a double prefix prompt for
all these parameters.  When SOFT-CLJS-START is non-nil, start cljs REPL
only when the ClojureScript dependencies are met.

\(fn &optional PARAMS SOFT-CLJS-START)" t nil)

(autoload 'cider-connect-sibling-clj "cider" "\
Create a Clojure REPL with the same server as OTHER-REPL.
PARAMS is for consistency with other connection commands and is currently
ignored.  OTHER-REPL defaults to `cider-current-repl' and in programs can
also be a server buffer, in which case a new session with a REPL for that
server is created.

\(fn PARAMS &optional OTHER-REPL)" t nil)

(autoload 'cider-connect-sibling-cljs "cider" "\
Create a ClojureScript REPL with the same server as OTHER-REPL.
PARAMS is a plist optionally containing :cljs-repl-type (e.g. Node,
Figwheel, etc).  All other parameters are inferred from the OTHER-REPL.
OTHER-REPL defaults to `cider-current-repl' but in programs can also be a
server buffer, in which case a new session for that server is created.

\(fn PARAMS &optional OTHER-REPL)" t nil)

(autoload 'cider-connect-clj "cider" "\
Initialize a Clojure connection to an nREPL server.
PARAMS is a plist optionally containing :host, :port and :project-dir.  On
prefix argument, prompt for all the parameters.

\(fn &optional PARAMS)" t nil)

(autoload 'cider-connect-cljs "cider" "\
Initialize a ClojureScript connection to an nREPL server.
PARAMS is a plist optionally containing :host, :port, :project-dir and
:cljs-repl-type (e.g. Node, Figwheel, etc).  On prefix, prompt for all the
parameters regardless of their supplied or default values.

\(fn &optional PARAMS)" t nil)

(autoload 'cider-connect-clj&cljs "cider" "\
Initialize a Clojure and ClojureScript connection to an nREPL server.
PARAMS is a plist optionally containing :host, :port, :project-dir and
:cljs-repl-type (e.g. Node, Figwheel, etc).  When SOFT-CLJS-START is
non-nil, don't start if ClojureScript requirements are not met.

\(fn PARAMS &optional SOFT-CLJS-START)" t nil)

(autoload 'cider "cider" "\
Start a connection of any type interactively." t nil)

(defalias 'cider-jack-in #'cider-jack-in-clj)

(defalias 'cider-connect #'cider-connect-clj)

(with-eval-after-load 'clojure-mode (define-key clojure-mode-map (kbd "C-c M-x") #'cider) (define-key clojure-mode-map (kbd "C-c M-j") #'cider-jack-in-clj) (define-key clojure-mode-map (kbd "C-c M-J") #'cider-jack-in-cljs) (define-key clojure-mode-map (kbd "C-c M-c") #'cider-connect-clj) (define-key clojure-mode-map (kbd "C-c M-C") #'cider-connect-cljs) (define-key clojure-mode-map (kbd "C-c C-x") 'cider-start-map) (define-key clojure-mode-map (kbd "C-c C-s") 'sesman-map) (require 'sesman) (sesman-install-menu clojure-mode-map) (add-hook 'clojure-mode-hook (lambda nil (setq-local sesman-system 'CIDER))))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider" '("cider-")))



(autoload 'cider-apropos "cider-apropos" "\
Show all symbols whose names match QUERY, a regular expression.
QUERY can also be a list of space-separated words (e.g. take while) which
will be converted to a regular expression (like take.+while) automatically
behind the scenes.  The search may be limited to the namespace NS, and may
optionally search doc strings (based on DOCS-P), include private vars
\(based on PRIVATES-P), and be case-sensitive (based on CASE-SENSITIVE-P).

\(fn QUERY &optional NS DOCS-P PRIVATES-P CASE-SENSITIVE-P)" t nil)

(autoload 'cider-apropos-documentation "cider-apropos" "\
Shortcut for (cider-apropos <query> nil t)." t nil)

(autoload 'cider-apropos-select "cider-apropos" "\
Similar to `cider-apropos', but presents the results in a completing read.
Show all symbols whose names match QUERY, a regular expression.
QUERY can also be a list of space-separated words (e.g. take while) which
will be converted to a regular expression (like take.+while) automatically
behind the scenes.  The search may be limited to the namespace NS, and may
optionally search doc strings (based on DOCS-P), include private vars
\(based on PRIVATES-P), and be case-sensitive (based on CASE-SENSITIVE-P).

\(fn QUERY &optional NS DOCS-P PRIVATES-P CASE-SENSITIVE-P)" t nil)

(autoload 'cider-apropos-documentation-select "cider-apropos" "\
Shortcut for (cider-apropos-select <query> nil t)." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-apropos" '("apropos-special-form" "cider-")))



(autoload 'cider-browse-ns "cider-browse-ns" "\
List all NAMESPACE's vars in BUFFER.

\(fn NAMESPACE)" t nil)

(autoload 'cider-browse-ns-all "cider-browse-ns" "\
List all loaded namespaces in BUFFER." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-browse-ns" '("cider-browse-ns-")))



(autoload 'cider-browse-spec "cider-browse-spec" "\
Browse SPEC definition.

\(fn SPEC)" t nil)

(autoload 'cider-browse-spec-all "cider-browse-spec" "\
Open list of specs in a popup buffer.

With a prefix argument ARG, prompts for a regexp to filter specs.
No filter applied if the regexp is the empty string.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-browse-spec" '("cider-")))



(autoload 'cider-cheatsheet "cider-cheatsheet" "\
Navigate `cider-cheatsheet-hierarchy' with `completing-read'.

When you make it to a Clojure var its doc buffer gets displayed." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-cheatsheet" '("cider-cheatsheet-")))



(autoload 'cider-classpath "cider-classpath" "\
List all classpath entries." t nil)

(autoload 'cider-open-classpath-entry "cider-classpath" "\
Open a classpath entry." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-classpath" '("cider-classpath-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-client" '("cider-")))



(autoload 'cider-clojuredocs-web "cider-clojuredocs" "\
Open ClojureDocs documentation in the default web browser.

Prompts for the symbol to use, or uses the symbol at point, depending on
the value of `cider-prompt-for-symbol'.  With prefix arg ARG, does the
opposite of what that option dictates.

\(fn &optional ARG)" t nil)

(autoload 'cider-clojuredocs-refresh-cache "cider-clojuredocs" "\
Refresh the ClojureDocs cache." t nil)

(autoload 'cider-clojuredocs "cider-clojuredocs" "\
Open ClojureDocs documentation in a popup buffer.

Prompts for the symbol to use, or uses the symbol at point, depending on
the value of `cider-prompt-for-symbol'.  With prefix arg ARG, does the
opposite of what that option dictates.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-clojuredocs" '("cider-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-common" '("cider-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-completion" '("cider-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-connection" '("cider-")))



(autoload 'cider-debug-defun-at-point "cider-debug" "\
Instrument the \"top-level\" expression at point.
If it is a defn, dispatch the instrumented definition.  Otherwise,
immediately evaluate the instrumented expression.

While debugged code is being evaluated, the user is taken through the
source code and displayed the value of various expressions.  At each step,
a number of keys will be prompted to the user." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-debug" '("cider-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-doc" '("cider-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-eldoc" '("cider-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-eval" '("cider-")))



(autoload 'cider-find-var "cider-find" "\
Find definition for VAR at LINE.
Prompt according to prefix ARG and `cider-prompt-for-symbol'.
A single or double prefix argument inverts the meaning of
`cider-prompt-for-symbol'.  A prefix of `-` or a double prefix argument causes
the results to be displayed in a different window.  The default value is
thing at point.

\(fn &optional ARG VAR LINE)" t nil)

(autoload 'cider-find-dwim-at-mouse "cider-find" "\
Find and display variable or resource at mouse EVENT.

\(fn EVENT)" t nil)

(autoload 'cider-find-dwim "cider-find" "\
Find and display the SYMBOL-FILE at point.
SYMBOL-FILE could be a var or a resource.  If thing at point is empty then
show dired on project.  If var is not found, try to jump to resource of the
same name.  When called interactively, a prompt is given according to the
variable `cider-prompt-for-symbol'.  A single or double prefix argument
inverts the meaning.  A prefix of `-' or a double prefix argument causes
the results to be displayed in a different window.  A default value of thing
at point is given when prompted.

\(fn SYMBOL-FILE)" t nil)

(autoload 'cider-find-resource "cider-find" "\
Find the resource at PATH.
Prompt for input as indicated by the variable `cider-prompt-for-symbol'.
A single or double prefix argument inverts the meaning of
`cider-prompt-for-symbol'.  A prefix argument of `-` or a double prefix
argument causes the results to be displayed in other window.  The default
value is thing at point.

\(fn PATH)" t nil)

(autoload 'cider-find-ns "cider-find" "\
Find the file containing NS.
A prefix ARG of `-` or a double prefix argument causes
the results to be displayed in a different window.

\(fn &optional ARG NS)" t nil)

(autoload 'cider-find-keyword "cider-find" "\
Find the namespace of the keyword at point and its first occurrence there.

For instance - if the keyword at point is \":cider.demo/keyword\", this command
would find the namespace \"cider.demo\" and afterwards find the first mention
of \"::keyword\" there.

Prompt according to prefix ARG and `cider-prompt-for-symbol'.
A single or double prefix argument inverts the meaning of
`cider-prompt-for-symbol'.  A prefix of `-` or a double prefix argument causes
the results to be displayed in a different window.  The default value is
thing at point.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-find" '("cider-")))



(autoload 'cider-format-region "cider-format" "\
Format the Clojure code in the current region.
START and END represent the region's boundaries.

\(fn START END)" t nil)

(autoload 'cider-format-defun "cider-format" "\
Format the code in the current defun." t nil)

(autoload 'cider-format-buffer "cider-format" "\
Format the Clojure code in the current buffer." t nil)

(autoload 'cider-format-edn-buffer "cider-format" "\
Format the EDN data in the current buffer." t nil)

(autoload 'cider-format-edn-region "cider-format" "\
Format the EDN data in the current region.
START and END represent the region's boundaries.

\(fn START END)" t nil)

(autoload 'cider-format-edn-last-sexp "cider-format" "\
Format the EDN data of the last sexp." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-format" '("cider--format-")))



(autoload 'cider-inspect-last-sexp "cider-inspector" "\
Inspect the result of the the expression preceding point." t nil)

(autoload 'cider-inspect-defun-at-point "cider-inspector" "\
Inspect the result of the \"top-level\" expression at point." t nil)

(autoload 'cider-inspect-last-result "cider-inspector" "\
Inspect the most recent eval result." t nil)

(autoload 'cider-inspect "cider-inspector" "\
Inspect the result of the preceding sexp.

With a prefix argument ARG it inspects the result of the \"top-level\" form.
With a second prefix argument it prompts for an expression to eval and inspect.

\(fn &optional ARG)" t nil)

(autoload 'cider-inspect-expr "cider-inspector" "\
Evaluate EXPR in NS and inspect its value.
Interactively, EXPR is read from the minibuffer, and NS the
current buffer's namespace.

\(fn EXPR NS)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-inspector" '("cider-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-jar" '("cider-jar-")))



(autoload 'cider-macroexpand-1 "cider-macroexpansion" "\
Invoke \\=`macroexpand-1\\=` on the expression preceding point.
If invoked with a PREFIX argument, use \\=`macroexpand\\=` instead of
\\=`macroexpand-1\\=`.

\(fn &optional PREFIX)" t nil)

(autoload 'cider-macroexpand-all "cider-macroexpansion" "\
Invoke \\=`macroexpand-all\\=` on the expression preceding point." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-macroexpansion" '("cider-")))



(defvar cider-mode-line '(:eval (format " cider[%s]" (cider--modeline-info))) "\
Mode line lighter for cider mode.

The value of this variable is a mode line template as in
`mode-line-format'.  See Info Node `(elisp)Mode Line Format' for details
about mode line templates.

Customize this variable to change how cider mode displays its status in the
mode line.  The default value displays the current connection.  Set this
variable to nil to disable the mode line entirely.")

(custom-autoload 'cider-mode-line "cider-mode" t)

(with-eval-after-load 'clojure-mode (easy-menu-define cider-clojure-mode-menu-open clojure-mode-map "Menu for Clojure mode.\n  This is displayed in `clojure-mode' buffers, if `cider-mode' is not active." `("CIDER" :visible (not cider-mode) ["Start a Clojure REPL" cider-jack-in-clj :help "Starts an nREPL server and connects a Clojure REPL to it."] ["Connect to a Clojure REPL" cider-connect-clj :help "Connects to a REPL that's already running."] ["Start a ClojureScript REPL" cider-jack-in-cljs :help "Starts an nREPL server and connects a ClojureScript REPL to it."] ["Connect to a ClojureScript REPL" cider-connect-cljs :help "Connects to a ClojureScript REPL that's already running."] ["Start a Clojure REPL, and a ClojureScript REPL" cider-jack-in-clj&cljs :help "Starts an nREPL server, connects a Clojure REPL to it, and then a ClojureScript REPL."] "--" ["View user manual" cider-view-manual])))

(autoload 'cider-mode "cider-mode" "\
Minor mode for REPL interaction from a Clojure buffer.

If called interactively, enable Cider mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\\{cider-mode-map}

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-mode" '("cider-")))



(autoload 'cider-ns-reload "cider-ns" "\
Send a (require 'ns :reload) to the REPL.

With an argument PROMPT, it prompts for a namespace name.  This is the
Clojure out of the box reloading experience and does not rely on
org.clojure/tools.namespace.  See Commentary of this file for a longer list
of differences.  From the Clojure doc: \":reload forces loading of all the
identified libs even if they are already loaded\".

\(fn &optional PROMPT)" t nil)

(autoload 'cider-ns-reload-all "cider-ns" "\
Send a (require 'ns :reload-all) to the REPL.

With an argument PROMPT, it prompts for a namespace name.  This is the
Clojure out of the box reloading experience and does not rely on
org.clojure/tools.namespace.  See Commentary of this file for a longer list
of differences.  From the Clojure doc: \":reload-all implies :reload and
also forces loading of all libs that the identified libs directly or
indirectly load via require\".

\(fn &optional PROMPT)" t nil)

(autoload 'cider-ns-refresh "cider-ns" "\
Reload modified and unloaded namespaces on the classpath.

With a single prefix argument, or if MODE is `refresh-all', reload all
namespaces on the classpath unconditionally.

With a double prefix argument, or if MODE is `clear', clear the state of
the namespace tracker before reloading.  This is useful for recovering from
some classes of error (for example, those caused by circular dependencies)
that a normal reload would not otherwise recover from.  The trade-off of
clearing is that stale code from any deleted files may not be completely
unloaded.

With a negative prefix argument, or if MODE is `inhibit-fns', prevent any
refresh functions (defined in `cider-ns-refresh-before-fn' and
`cider-ns-refresh-after-fn') from being invoked.

\(fn &optional MODE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-ns" '("cider-ns-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-overlays" '("cider-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-popup" '("cider-")))



(autoload 'cider-profile-samples "cider-profile" "\
Displays current max-sample-count.
If optional QUERY is specified, set max-sample-count and display new value.

\(fn &optional QUERY)" t nil)

(autoload 'cider-profile-var-profiled-p "cider-profile" "\
Displays the profiling status of var under point.
Prompts for var if none under point or QUERY is present.

\(fn QUERY)" t nil)

(autoload 'cider-profile-ns-toggle "cider-profile" "\
Toggle profiling for the ns associated with optional QUERY.

If optional argument QUERY is non-nil, prompt for ns.  Otherwise use
current ns.

\(fn &optional QUERY)" t nil)

(autoload 'cider-profile-toggle "cider-profile" "\
Toggle profiling for the given QUERY.
Defaults to the symbol at point.
With prefix arg or no symbol at point, prompts for a var.

\(fn QUERY)" t nil)

(autoload 'cider-profile-summary "cider-profile" "\
Display a summary of currently collected profile data." t nil)

(autoload 'cider-profile-var-summary "cider-profile" "\
Display profile data for var under point QUERY.
Defaults to the symbol at point.  With prefix arg or no symbol at point,
prompts for a var.

\(fn QUERY)" t nil)

(autoload 'cider-profile-clear "cider-profile" "\
Clear any collected profile data." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-profile" '("cider-profile-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-repl" '("cider-")))



(autoload 'cider-repl-history "cider-repl-history" "\
Display items in the CIDER command history in another buffer." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-repl-history" '("cider-repl-history-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-resolve" '("cider-resolve-")))



(autoload 'cider-scratch "cider-scratch" "\
Go to the scratch buffer named `cider-scratch-buffer-name'." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-scratch" '("cider-")))



(autoload 'cider-selector "cider-selector" "\
Select a new buffer by type, indicated by a single character.
The user is prompted for a single character indicating the method by
which to choose a new buffer.  The `?' character describes the
available methods.  OTHER-WINDOW provides an optional target.
See `def-cider-selector-method' for defining new methods.

\(fn &optional OTHER-WINDOW)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-selector" '("??" "?c" "?d" "?e" "?m" "?p" "?q" "?r" "?s" "?x" "cider-selector-" "def-cider-selector-method")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-stacktrace" '("cider-")))



(defvar cider-auto-test-mode nil "\
Non-nil if Cider-Auto-Test mode is enabled.
See the `cider-auto-test-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `cider-auto-test-mode'.")

(custom-autoload 'cider-auto-test-mode "cider-test" nil)

(autoload 'cider-auto-test-mode "cider-test" "\
Toggle automatic testing of Clojure files.

If called interactively, enable Cider-Auto-Test mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When enabled this reruns tests every time a Clojure file is loaded.
Only runs tests corresponding to the loaded file's namespace and does
nothing if no tests are defined or if the file failed to load.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-test" '("cider-")))



(autoload 'cider-toggle-trace-var "cider-tracing" "\
Toggle var tracing.
Prompts for the symbol to use, or uses the symbol at point, depending on
the value of `cider-prompt-for-symbol'.  With prefix arg ARG, does the
opposite of what that option dictates.

\(fn ARG)" t nil)

(autoload 'cider-toggle-trace-ns "cider-tracing" "\
Toggle ns tracing.
Defaults to the current ns.  With prefix arg QUERY, prompts for a ns.

\(fn QUERY)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-tracing" '("cider-")))



(autoload 'cider-view-manual "cider-util" "\
View the manual in your default browser." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-util" '("cider-")))



(autoload 'cider-xref-fn-refs "cider-xref" "\
Show all functions that reference the var matching NS and SYMBOL.

\(fn &optional NS SYMBOL)" t nil)

(autoload 'cider-xref-fn-deps "cider-xref" "\
Show all functions referenced by the var matching NS and SYMBOL.

\(fn &optional NS SYMBOL)" t nil)

(autoload 'cider-xref-fn-refs-select "cider-xref" "\
Displays the references for NS and SYMBOL using completing read.

\(fn &optional NS SYMBOL)" t nil)

(autoload 'cider-xref-fn-deps-select "cider-xref" "\
Displays the function dependencies for  NS and SYMBOL using completing read.

\(fn &optional NS SYMBOL)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "cider-xref" '("cider-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nrepl-client" '("cider-enlighten-mode" "emacs-bug-46284/when-27.1-windows-nt" "nrepl-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "nrepl-dict" '("nrepl-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/centered-cursor-mode-20200507.1529/centered-cursor-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/centered-cursor-mode-20200507.1529/centered-cursor-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/centered-cursor-mode-20200507.1529/centered-cursor-mode-autoloads.el") (car load-path))))



(autoload 'ccm-visible-text-lines "centered-cursor-mode" "\
Visible text lines" nil nil)

(autoload 'centered-cursor-mode "centered-cursor-mode" "\
Makes the cursor stay vertically in a defined
position (usually centered).

If called interactively, enable Centered-Cursor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'global-centered-cursor-mode 'globalized-minor-mode t)

(defvar global-centered-cursor-mode nil "\
Non-nil if Global Centered-Cursor mode is enabled.
See the `global-centered-cursor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-centered-cursor-mode'.")

(custom-autoload 'global-centered-cursor-mode "centered-cursor-mode" nil)

(autoload 'global-centered-cursor-mode "centered-cursor-mode" "\
Toggle Centered-Cursor mode in all buffers.
With prefix ARG, enable Global Centered-Cursor mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Centered-Cursor mode is enabled in all buffers where
`centered-cursor-mode' would do it.
See `centered-cursor-mode' for more information on Centered-Cursor mode.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "centered-cursor-mode" '("animate-first-start-p" "ccm-" "recenter-sequence")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/cask-mode-20160410.1449/cask-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/cask-mode-20160410.1449/cask-mode-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/cask-mode-20160410.1449/cask-mode-autoloads.el") (car load-path))))


(autoload 'cask-mode "cask-mode" "\
Major mode for editing Cask files.
See http://cask.readthedocs.org/en/latest/guide/dsl.html
for more details on the DSL accepted by Cask.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("/Cask\\'" . cask-mode))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/buttercup-20220329.2043/buttercup-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/buttercup-20220329.2043/buttercup-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/buttercup-20220329.2043/buttercup-autoloads.el") (car load-path))))



(autoload 'buttercup-run-at-point "buttercup" "\
Run the buttercup suite at point." t nil)

(autoload 'buttercup-run-discover "buttercup" "\
Discover and load test files, then run all defined suites.

Takes directories as command line arguments, defaulting to the
current directory." nil nil)

(autoload 'buttercup-run-markdown-buffer "buttercup" "\
Run all test suites defined in MARKDOWN-BUFFERS.
A suite must be defined within a Markdown \"lisp\" code block.
If MARKDOWN-BUFFERS is empty (nil), use the current buffer.

\(fn &rest MARKDOWN-BUFFERS)" t nil)

(autoload 'buttercup-run-markdown "buttercup" "\
Run all test suites defined in Markdown files passed as arguments.
A suite must be defined within a Markdown \"lisp\" code block." nil nil)

(autoload 'buttercup-run-markdown-file "buttercup" "\
Run all test suites defined in Markdown FILE.
A suite must be defined within a Markdown \"lisp\" code block.

\(fn FILE)" t nil)

(autoload 'buttercup-minor-mode "buttercup" "\
Activate buttercup minor mode.

If called interactively, enable Buttercup minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

With buttercup minor mode active the following is activated:

- `describe' and `it' forms are fontified with
  `font-lock-keyword-face'.
- `describe' and `it' forms are available from `imenu' for
  quicker access.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "buttercup" '("after-" "assume" "before-" "buttercup-" "describe" "expect" "spy-" "xdescribe" "xit")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/bug-hunter-1.3.1/bug-hunter-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/bug-hunter-1.3.1/bug-hunter-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/bug-hunter-1.3.1/bug-hunter-autoloads.el") (car load-path))))



(autoload 'bug-hunter-file "bug-hunter" "\
Bisect FILE while testing ASSERTION.
All sexps in FILE are read and passed to `bug-hunter-hunt' as a
list.  See `bug-hunter-hunt' for how to use ASSERTION.

\(fn FILE &optional ASSERTION)" t nil)

(autoload 'bug-hunter-init-file "bug-hunter" "\
Test ASSERTION throughout `user-init-file'.
All sexps inside `user-init-file' are read and passed to
`bug-hunter-hunt' as a list.  See `bug-hunter-hunt' for how to use
ASSERTION.

\(fn &optional ASSERTION)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bug-hunter" '("bug-hunter-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/bufler-20210907.1145/bufler-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/bufler-20210907.1145/bufler-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/bufler-20210907.1145/bufler-autoloads.el") (car load-path))))



(autoload 'bufler-list "bufler" "\
Show Bufler's list.
With prefix argument ARG, force refreshing of buffers' VC state,
clear `bufler-cache', and regenerate buffer groups (which can be
useful after changing `bufler-groups' if the buffer list has not
yet changed).  With two universal prefix args, also show buffers
which are otherwise filtered by `bufler-filter-buffer-fns'.

\(fn &optional ARG)" t nil)

(defalias 'bufler #'bufler-list)

(defalias 'bufler-switch-buffer #'bufler-workspace-switch-buffer)

(defalias 'bufler-mode #'bufler-workspace-mode)

(autoload 'bufler-defgroups "bufler" "\
Expand GROUPS into a group definition suitable for `bufler-groups'.
See documentation for details.

\(fn &rest GROUPS)" nil t)

(function-put 'bufler-defgroups 'lisp-indent-function 'defun)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bufler" '("bufler-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bufler-group-tree" '("bufler-group-tree")))



(autoload 'bufler-workspace-frame-set "bufler-workspace" "\
Set workspace for the current frame to the one at PATH.
Interactively, choose workspace path with completion.  If PATH is
nil (interactively, with prefix), unset the frame's workspace.
Return the workspace path.

\(fn &optional PATH)" t nil)

(autoload 'bufler-workspace-focus-buffer "bufler-workspace" "\
Set current frame's workspace to BUFFER's workspace.
Interactively, use current buffer.

\(fn BUFFER)" t nil)

(autoload 'bufler-workspace-switch-buffer "bufler-workspace" "\
Switch to another buffer in the current group.
Without any input, switch to the previous buffer, like
`switch-to-buffer'.  If ALL-P (interactively, with universal
prefix) or if the frame has no workspace, select from all
buffers.  If SET-WORKSPACE-P (with two universal prefixes),
select from all buffers and set the frame's workspace.  If
NO-FILTER (with three universal prefixes), include buffers that
would otherwise be filtered by
`bufler-workspace-switch-buffer-filter-fns'.

If `bufler-workspace-switch-buffer-sets-workspace' is non-nil,
act as if SET-WORKSPACE-P is non-nil.

\(fn &optional ALL-P SET-WORKSPACE-P NO-FILTER)" t nil)

(autoload 'bufler-workspace-buffer-name-workspace "bufler-workspace" "\
Set current buffer's workspace to NAME.
If NAME is nil (interactively, with prefix), unset the buffer's
workspace name.  This sets the buffer-local variable
`bufler-workspace-name'.  Note that, in order for a buffer to
appear in a named workspace, the buffer must be matched by an
`auto-workspace' group before any other group.

\(fn &optional NAME)" t nil)

(defvar bufler-workspace-mode nil "\
Non-nil if Bufler-Workspace mode is enabled.
See the `bufler-workspace-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `bufler-workspace-mode'.")

(custom-autoload 'bufler-workspace-mode "bufler-workspace" nil)

(autoload 'bufler-workspace-mode "bufler-workspace" "\
When active, set the frame title according to current Bufler group.

If called interactively, enable Bufler-Workspace mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(cl-eval-when (load) (when (require 'tab-bar nil t) (require 'bufler-workspace-tabs)))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bufler-workspace" '("bufler-workspace-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bufler-workspace-tabs" '("bufler-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/buffer-env-20220325.1659/buffer-env-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/buffer-env-20220325.1659/buffer-env-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/buffer-env-20220325.1659/buffer-env-autoloads.el") (car load-path))))



(autoload 'buffer-env-update "buffer-env" "\
Update the process environment buffer locally.
FILE is executed in the way prescribed by `buffer-env-commands'
and the buffer-local values of `process-environment' and
`exec-path' are set accordingly.

If FILE omitted, a file with base name `buffer-env-script-name'
is looked up in the current directory and its parents; nothing
happens if no such file is found.  This makes this function
suitable for use in a normal hook.

When called interactively, ask for a FILE.

\(fn &optional FILE)" t nil)

(autoload 'buffer-env-reset "buffer-env" "\
Reset the process environment of this buffer to the default values." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "buffer-env" '("buffer-env-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/browse-url-dwim-20140731.1922/browse-url-dwim-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/browse-url-dwim-20140731.1922/browse-url-dwim-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/browse-url-dwim-20140731.1922/browse-url-dwim-autoloads.el") (car load-path))))


(let ((loads (get 'browse-url-dwim 'custom-loads))) (if (member '"browse-url-dwim" loads) nil (put 'browse-url-dwim 'custom-loads (cons '"browse-url-dwim" loads))))

(let ((loads (get 'browse-url-dwim-keys 'custom-loads))) (if (member '"browse-url-dwim" loads) nil (put 'browse-url-dwim-keys 'custom-loads (cons '"browse-url-dwim" loads))))

(defvar browse-url-dwim-mode nil "\
Non-nil if Browse-Url-Dwim mode is enabled.
See the `browse-url-dwim-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `browse-url-dwim-mode'.")

(custom-autoload 'browse-url-dwim-mode "browse-url-dwim" nil)

(autoload 'browse-url-dwim-mode "browse-url-dwim" "\
Turn on `browse-url-dwim-mode'.

Turning on `browse-url-dwim' will activate keybindings as defined
in `customize'.  It may also install a command alias for `browse'
and `google' as controlled by `browse-url-dwim-install-aliases'.

When called interactively with no prefix argument this command
toggles the mode.  With a prefix argument, it enables the mode
if the argument is positive and otherwise disables the mode.

When called from Lisp, this command enables the mode if the
argument is omitted or nil, and toggles the mode if the argument
is 'toggle.

\(fn &optional ARG)" t nil)

(autoload 'browse-url-dwim "browse-url-dwim" "\
Opens a URL in an external browser.

When called interactively, `browse-url-dwim-get-url' will be
used to find an appropriate URL.

The browser used is as configured for `browse-url'.

\(fn URL)" t nil)

(autoload 'browse-url-dwim-search "browse-url-dwim" "\
Perform an Internet search for TEXT, or region, or interactive input.

If TEXT is a URL, browse to page directly.  Otherwise
invoke an Internet search using TEXT.  When called interactively,
TEXT may be taken from the region or entered at a prompt.

Optional SEARCH-URL specifies the URL fragment used to construct
the search request.  If not specified, the customizable variable
`browse-url-dwim-search-url' is used.

If GUESS is non-nil, an attempt will be made to extract a URL
from the context around the point.  If successful, this command
is equivalent to `browse-url-dwim'.

\(fn &optional TEXT SEARCH-URL GUESS)" t nil)

(autoload 'browse-url-dwim-guess "browse-url-dwim" "\
Perform Internet search or browse to URL under point, according to context.

Identical to calling `browse-url-dwim-search' with GUESS set
to non-nil.

Optional TEXT is a string to be submitted to the search
engine.

Optional SEARCH-URL overrides the default search engine
URL.

\(fn &optional TEXT SEARCH-URL)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/browse-kill-ring-20200210.921/browse-kill-ring-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/browse-kill-ring-20200210.921/browse-kill-ring-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/browse-kill-ring-20200210.921/browse-kill-ring-autoloads.el") (car load-path))))



(autoload 'browse-kill-ring-default-keybindings "browse-kill-ring" "\
Set up M-y (`yank-pop') so that it can invoke `browse-kill-ring'.
Normally, if M-y was not preceeded by C-y, then it has no useful
behavior.  This function sets things up so that M-y will invoke
`browse-kill-ring'." t nil)

(autoload 'browse-kill-ring "browse-kill-ring" "\
Display items in the `kill-ring' in another buffer." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "browse-kill-ring" '("browse-kill-ring-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/bnf-mode-20200323.1348/bnf-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/bnf-mode-20200323.1348/bnf-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/bnf-mode-20200323.1348/bnf-mode-autoloads.el") (car load-path))))



(let ((loads (get 'bnf 'custom-loads))) (if (member '"bnf-mode" loads) nil (put 'bnf 'custom-loads (cons '"bnf-mode" loads))))

(autoload 'bnf-mode "bnf-mode" "\
A major mode for editing BNF grammars.

\\{bnf-mode-map}

Turning on BNF Mode calls the value of `prog-mode-hook' and then of
`bnf-mode-hook', if they are non-nil.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.bnf\\'" . bnf-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bnf-mode" '("bnf-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/bicycle-20220402.1036/bicycle-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/bicycle-20220402.1036/bicycle-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/bicycle-20220402.1036/bicycle-autoloads.el") (car load-path))))



(autoload 'bicycle-cycle "bicycle" "\
Cycle local or global visibility.

With a prefix argument call `bicycle-cycle-global'.
Without a prefix argument call `bicycle-cycle-local'.

\(fn &optional GLOBAL)" t nil)

(autoload 'bicycle-cycle-global "bicycle" "\
Cycle visibility of all sections.

1. OVERVIEW: Show only top-level heading.
2. TOC:      Show all headings, without treating top-level
             code blocks as sections.
3. TREES:    Show all headings, treaing top-level code blocks
             as sections (i.e. their first line is treated as
             a heading).
4. ALL:      Show everything, except code blocks that have been
             collapsed individually (using a `hideshow' command
             or function)." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "bicycle" '("bicycle-" "outline-code-level")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/beacon-20190104.1931/beacon-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/beacon-20190104.1931/beacon-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/beacon-20190104.1931/beacon-autoloads.el") (car load-path))))


(autoload 'beacon-blink "beacon" "\
Blink the beacon at the position of the cursor.
Unlike `beacon-blink-automated', the beacon will blink
unconditionally (even if `beacon-mode' is disabled), and this can
be invoked as a user command or called from lisp code.

\(fn)" t nil)

(defvar beacon-mode nil "\
Non-nil if Beacon mode is enabled.
See the `beacon-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `beacon-mode'.")

(custom-autoload 'beacon-mode "beacon" nil)

(autoload 'beacon-mode "beacon" "\
Toggle Beacon mode on or off.
With a prefix argument ARG, enable Beacon mode if ARG is
positive, and disable it otherwise.  If called from Lisp, enable
the mode if ARG is omitted or nil, and toggle it if ARG is `toggle'.
\\{beacon-mode-map}

\(fn &optional ARG)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/bats-mode-20160514.615/bats-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/bats-mode-20160514.615/bats-mode-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/bats-mode-20160514.615/bats-mode-autoloads.el") (car load-path))))


(autoload 'bats-mode "bats-mode" "\
Major mode for editing and running Bats tests.

See URL `https://github.com/sstephenson/bats'.

\\{bats-mode-map}

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("\\.bats\\'" . bats-mode))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/backup-walker-20130720.1516/backup-walker-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/backup-walker-20130720.1516/backup-walker-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/backup-walker-20130720.1516/backup-walker-autoloads.el") (car load-path))))


(autoload 'backup-walker-start "backup-walker" "\
start walking with the latest backup

with universal arg, ask for a file-name.

\(fn ORIGINAL-FILE)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/auto-rename-tag-20210805.1344/auto-rename-tag-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/auto-rename-tag-20210805.1344/auto-rename-tag-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/auto-rename-tag-20210805.1344/auto-rename-tag-autoloads.el") (car load-path))))



(autoload 'auto-rename-tag-mode "auto-rename-tag" "\
Minor mode 'auto-rename-tag' mode.

If called interactively, enable Auto-Rename-Tag mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "auto-rename-tag" '("auto-rename-tag-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/auto-minor-mode-20180527.1123/auto-minor-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/auto-minor-mode-20180527.1123/auto-minor-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/auto-minor-mode-20180527.1123/auto-minor-mode-autoloads.el") (car load-path))))



(defvar auto-minor-mode-alist nil "\
Alist of filename patterns vs corresponding minor mode functions.

This is an equivalent of ‘auto-mode-alist’, for minor modes.

Unlike ‘auto-mode-alist’, matching is always case-folded.")

(defvar auto-minor-mode-magic-alist nil "\
Alist of buffer beginnings vs corresponding minor mode functions.

This is an equivalent of ‘magic-mode-alist’, for minor modes.

Magic minor modes are applied after ‘set-auto-mode’ enables any
major mode, so it’s possible to check for expected major modes in
match functions.

Unlike ‘magic-mode-alist’, matching is always case-folded.")

(autoload 'auto-minor-mode-set "auto-minor-mode" "\
Enable all minor modes appropriate for the current buffer.

If the optional argument KEEP-MODE-IF-SAME is non-nil, then we
don’t re-activate minor modes already enabled in the buffer.

\(fn &optional KEEP-MODE-IF-SAME)" nil nil)

(advice-add #'set-auto-mode :after #'auto-minor-mode-set)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "auto-minor-mode" '("auto-minor-mode-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/auto-compile-20220402.1035/auto-compile-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/auto-compile-20220402.1035/auto-compile-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/auto-compile-20220402.1035/auto-compile-autoloads.el") (car load-path))))



(autoload 'auto-compile-mode "auto-compile" "\
Compile Emacs Lisp source files after the visiting buffers are saved.

If called interactively, enable Auto-Compile mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

After a buffer containing Emacs Lisp code is saved to its source
file update the respective byte code file.  If the latter does
not exist do nothing.  Therefore to disable automatic compilation
remove the byte code file.  See command `toggle-auto-compile' for
a convenient way to do so.

This mode should be enabled globally, using it's globalized
variant `auto-compile-on-save-mode'.  Also see the related
`auto-compile-on-load-mode'.

\(fn &optional ARG)" t nil)

(put 'auto-compile-on-save-mode 'globalized-minor-mode t)

(defvar auto-compile-on-save-mode nil "\
Non-nil if Auto-Compile-On-Save mode is enabled.
See the `auto-compile-on-save-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `auto-compile-on-save-mode'.")

(custom-autoload 'auto-compile-on-save-mode "auto-compile" nil)

(autoload 'auto-compile-on-save-mode "auto-compile" "\
Toggle Auto-Compile mode in all buffers.
With prefix ARG, enable Auto-Compile-On-Save mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Auto-Compile mode is enabled in all buffers where
`turn-on-auto-compile-mode' would do it.
See `auto-compile-mode' for more information on Auto-Compile mode.

\(fn &optional ARG)" t nil)

(autoload 'toggle-auto-compile "auto-compile" "\
Toggle automatic compilation of an Emacs Lisp source file or files.

Read a file or directory name from the minibuffer defaulting to
the visited Emacs Lisp source file or `default-directory' if no
such file is being visited in the current buffer.

If the user selects a file then automatic compilation of only
that file is toggled.  Since both `auto-compile-on-save' and
`auto-compile-on-save' only ever _recompile_ byte code files,
toggling automatic compilation is done simply by creating or
removing the respective byte code file.

If the user selects a directory then automatic compilation for
multiple files is toggled as follows:

* With a positive prefix argument always compile source files;
  with a negative prefix argument always remove byte code files.

* Otherwise the existence or absence of the byte code file of
  the source file that was current when this command was invoked
  determines whether byte code files should be created or removed.

* If no Emacs Lisp source file is being visited in the buffer
  that was current when the command was invoked ask the user what
  to do.

* When _removing_ byte code files then all byte code files are
  removed.  If `auto-compile-deletes-stray-dest' is non-nil this
  even includes byte code files for which no source file exists.

* When _creating_ byte code files only do so for source files
  that are actual libraries.  Source files that provide the
  correct feature are considered to be libraries; see
  `packed-library-p'.

* Note that non-libraries can still be automatically compiled,
  you just cannot _recursively_ turn on automatic compilation
  using this command.

* When `auto-compile-toggle-recompiles' is non-nil recompile all
  affected source files even when the respective source files are
  up-to-date.  Do so even for non-library source files.

* Only enter subdirectories for which `packed-ignore-directory-p'
  returns nil; i.e. don't enter hidden directories or directories
  containing a file named \".nosearch\".

\(fn FILE ACTION)" t nil)

(defvar auto-compile-on-load-mode nil "\
Non-nil if Auto-Compile-On-Load mode is enabled.
See the `auto-compile-on-load-mode' command
for a description of this minor mode.")

(custom-autoload 'auto-compile-on-load-mode "auto-compile" nil)

(autoload 'auto-compile-on-load-mode "auto-compile" "\
Before loading a library recompile it if it needs recompilation.

If called interactively, enable Auto-Compile-On-Load mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

A library needs to be recompiled if the source file is newer than
it's byte-compile destination.  Without this advice the outdated
byte code file would be loaded instead.

Also see the related `auto-compile-on-save-mode'.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "auto-compile" '("auto-compile-" "byte-compile-log-warning" "load" "mode-line-" "require" "save-buffers-kill-" "turn-on-auto-compile-mode")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/atomic-chrome-20210221.59/atomic-chrome-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/atomic-chrome-20210221.59/atomic-chrome-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/atomic-chrome-20210221.59/atomic-chrome-autoloads.el") (car load-path))))



(autoload 'atomic-chrome-start-server "atomic-chrome" "\
Start websocket server for atomic-chrome.  Fails silently if a server is already running." t nil)

(autoload 'atomic-chrome-stop-server "atomic-chrome" "\
Stop websocket server for atomic-chrome." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "atomic-chrome" '("atomic-chrome-" "global-atomic-chrome-edit-mode")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/async-backup-20220131.1438/async-backup-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/async-backup-20220131.1438/async-backup-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/async-backup-20220131.1438/async-backup-autoloads.el") (car load-path))))



(autoload 'async-backup "async-backup" "\
Backup FILE, or file visited by current buffer.

\(fn &optional FILE)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "async-backup" '("async-backup-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/async-20220318.1342/async-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/async-20220318.1342/async-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/async-20220318.1342/async-autoloads.el") (car load-path))))



(autoload 'async-start-process "async" "\
Start the executable PROGRAM asynchronously named NAME.  See `async-start'.
PROGRAM is passed PROGRAM-ARGS, calling FINISH-FUNC with the
process object when done.  If FINISH-FUNC is nil, the future
object will return the process object when the program is
finished.  Set DEFAULT-DIRECTORY to change PROGRAM's current
working directory.

\(fn NAME PROGRAM FINISH-FUNC &rest PROGRAM-ARGS)" nil nil)

(autoload 'async-start "async" "\
Execute START-FUNC (often a lambda) in a subordinate Emacs process.
When done, the return value is passed to FINISH-FUNC.  Example:

    (async-start
       ;; What to do in the child process
       (lambda ()
         (message \"This is a test\")
         (sleep-for 3)
         222)

       ;; What to do when it finishes
       (lambda (result)
         (message \"Async process done, result should be 222: %s\"
                  result)))

If FINISH-FUNC is nil or missing, a future is returned that can
be inspected using `async-get', blocking until the value is
ready.  Example:

    (let ((proc (async-start
                   ;; What to do in the child process
                   (lambda ()
                     (message \"This is a test\")
                     (sleep-for 3)
                     222))))

        (message \"I'm going to do some work here\") ;; ....

        (message \"Waiting on async process, result should be 222: %s\"
                 (async-get proc)))

If you don't want to use a callback, and you don't care about any
return value from the child process, pass the `ignore' symbol as
the second argument (if you don't, and never call `async-get', it
will leave *emacs* process buffers hanging around):

    (async-start
     (lambda ()
       (delete-file \"a remote file on a slow link\" nil))
     \\='ignore)

Special case:
If the output of START-FUNC is a string with properties
e.g. (buffer-string) RESULT will be transformed in a list where the
car is the string itself (without props) and the cdr the rest of
properties, this allows using in FINISH-FUNC the string without
properties and then apply the properties in cdr to this string (if
needed).
Properties handling special objects like markers are returned as
list to allow restoring them later.
See <https://github.com/jwiegley/emacs-async/issues/145> for more infos.

Note: Even when FINISH-FUNC is present, a future is still
returned except that it yields no value (since the value is
passed to FINISH-FUNC).  Call `async-get' on such a future always
returns nil.  It can still be useful, however, as an argument to
`async-ready' or `async-wait'.

\(fn START-FUNC &optional FINISH-FUNC)" nil nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "async" '("async-")))



(autoload 'async-byte-recompile-directory "async-bytecomp" "\
Compile all *.el files in DIRECTORY asynchronously.
All *.elc files are systematically deleted before proceeding.

\(fn DIRECTORY &optional QUIET)" nil nil)

(defvar async-bytecomp-package-mode nil "\
Non-nil if Async-Bytecomp-Package mode is enabled.
See the `async-bytecomp-package-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `async-bytecomp-package-mode'.")

(custom-autoload 'async-bytecomp-package-mode "async-bytecomp" nil)

(autoload 'async-bytecomp-package-mode "async-bytecomp" "\
Byte compile asynchronously packages installed with package.el.
Async compilation of packages can be controlled by
`async-bytecomp-allowed-packages'.

If called interactively, enable Async-Bytecomp-Package mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'async-byte-compile-file "async-bytecomp" "\
Byte compile Lisp code FILE asynchronously.

Same as `byte-compile-file' but asynchronous.

\(fn FILE)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "async-bytecomp" '("async-")))



(defvar dired-async-mode nil "\
Non-nil if Dired-Async mode is enabled.
See the `dired-async-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dired-async-mode'.")

(custom-autoload 'dired-async-mode "dired-async" nil)

(autoload 'dired-async-mode "dired-async" "\
Do dired actions asynchronously.

If called interactively, enable Dired-Async mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(autoload 'dired-async-do-copy "dired-async" "\
Run ‘dired-do-copy’ asynchronously.

\(fn &optional ARG)" t nil)

(autoload 'dired-async-do-symlink "dired-async" "\
Run ‘dired-do-symlink’ asynchronously.

\(fn &optional ARG)" t nil)

(autoload 'dired-async-do-hardlink "dired-async" "\
Run ‘dired-do-hardlink’ asynchronously.

\(fn &optional ARG)" t nil)

(autoload 'dired-async-do-rename "dired-async" "\
Run ‘dired-do-rename’ asynchronously.

\(fn &optional ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "dired-async" '("dired-async-")))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "smtpmail-async" '("async-smtpmail-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/apples-mode-20110121.418/apples-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/apples-mode-20110121.418/apples-mode-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/apples-mode-20110121.418/apples-mode-autoloads.el") (car load-path))))


(autoload 'apples-open-scratch "apples-mode" "\
Open scratch buffer for AppleScript.

\(fn)" t nil)

(autoload 'apples-mode "apples-mode" "\
Happy AppleScripting!

\(fn)" t nil)




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/apache-mode-20210519.1931/apache-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/apache-mode-20210519.1931/apache-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/apache-mode-20210519.1931/apache-mode-autoloads.el") (car load-path))))



(autoload 'apache-mode "apache-mode" "\
Major mode for editing Apache configuration files.

\(fn)" t nil)

(add-to-list 'auto-mode-alist '("/\\.htaccess\\'" . apache-mode))

(add-to-list 'auto-mode-alist '("/\\(?:access\\|httpd\\|srm\\)\\.conf\\'" . apache-mode))

(add-to-list 'auto-mode-alist '("/apache2/.+\\.conf\\'" . apache-mode))

(add-to-list 'auto-mode-alist '("/httpd/conf/.+\\.conf\\'" . apache-mode))

(add-to-list 'auto-mode-alist '("/apache2/sites-\\(?:available\\|enabled\\)/" . apache-mode))

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "apache-mode" '("apache-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/anzu-20211002.2255/anzu-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/anzu-20211002.2255/anzu-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/anzu-20211002.2255/anzu-autoloads.el") (car load-path))))



(autoload 'anzu-mode "anzu" "\
minor-mode which display search information in mode-line.

If called interactively, enable Anzu mode if ARG is positive, and disable it if
ARG is zero or negative.  If called from Lisp, also enable the mode if ARG is
omitted or nil, and toggle it if ARG is `toggle'; disable the mode otherwise.

\(fn &optional ARG)" t nil)

(put 'global-anzu-mode 'globalized-minor-mode t)

(defvar global-anzu-mode nil "\
Non-nil if Global Anzu mode is enabled.
See the `global-anzu-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-anzu-mode'.")

(custom-autoload 'global-anzu-mode "anzu" nil)

(autoload 'global-anzu-mode "anzu" "\
Toggle Anzu mode in all buffers.
With prefix ARG, enable Global Anzu mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Anzu mode is enabled in all buffers where
`anzu--turn-on' would do it.
See `anzu-mode' for more information on Anzu mode.

\(fn &optional ARG)" t nil)

(autoload 'anzu-query-replace-at-cursor "anzu" "\
Replace symbol at cursor with to-string." t nil)

(autoload 'anzu-query-replace-at-cursor-thing "anzu" "\
Replace symbol at cursor within `anzu-replace-at-cursor-thing' area." t nil)

(autoload 'anzu-query-replace "anzu" "\
anzu version of `query-replace'.

\(fn ARG)" t nil)

(autoload 'anzu-query-replace-regexp "anzu" "\
anzu version of `query-replace-regexp'.

\(fn ARG)" t nil)

(autoload 'anzu-replace-at-cursor-thing "anzu" "\
anzu-query-replace-at-cursor-thing without query." t nil)

(autoload 'anzu-isearch-query-replace "anzu" "\
anzu version of `isearch-query-replace'.

\(fn ARG)" t nil)

(autoload 'anzu-isearch-query-replace-regexp "anzu" "\
anzu version of `isearch-query-replace-regexp'.

\(fn ARG)" t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "anzu" '("anzu")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/aio-20200610.1904/aio-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/aio-20200610.1904/aio-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/aio-20200610.1904/aio-autoloads.el") (car load-path))))



(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "aio" '("aio-")))




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/aggressive-indent-20210701.2224/aggressive-indent-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/aggressive-indent-20210701.2224/aggressive-indent-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/aggressive-indent-20210701.2224/aggressive-indent-autoloads.el") (car load-path))))



(autoload 'aggressive-indent-indent-defun "aggressive-indent" "\
Indent current defun.
Throw an error if parentheses are unbalanced.
If L and R are provided, use them for finding the start and end of defun.

\(fn &optional L R)" t nil)

(autoload 'aggressive-indent-indent-region-and-on "aggressive-indent" "\
Indent region between L and R, and then some.
Call `aggressive-indent-region-function' between L and R, and
then keep indenting until nothing more happens.

\(fn L R)" t nil)

(autoload 'aggressive-indent-mode "aggressive-indent" "\
Toggle Aggressive-Indent mode on or off.

If called interactively, enable Aggressive-Indent mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\\{aggressive-indent-mode-map}

\(fn &optional ARG)" t nil)

(put 'global-aggressive-indent-mode 'globalized-minor-mode t)

(defvar global-aggressive-indent-mode nil "\
Non-nil if Global Aggressive-Indent mode is enabled.
See the `global-aggressive-indent-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-aggressive-indent-mode'.")

(custom-autoload 'global-aggressive-indent-mode "aggressive-indent" nil)

(autoload 'global-aggressive-indent-mode "aggressive-indent" "\
Toggle Aggressive-Indent mode in all buffers.
With prefix ARG, enable Global Aggressive-Indent mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Aggressive-Indent mode is enabled in all buffers where
`aggressive-indent-mode' would do it.
See `aggressive-indent-mode' for more information on Aggressive-Indent mode.

\(fn &optional ARG)" t nil)

(defalias 'aggressive-indent-global-mode #'global-aggressive-indent-mode)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "aggressive-indent" '("aggressive-indent-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/aggressive-fill-paragraph-20180910.816/aggressive-fill-paragraph-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/aggressive-fill-paragraph-20180910.816/aggressive-fill-paragraph-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/aggressive-fill-paragraph-20180910.816/aggressive-fill-paragraph-autoloads.el") (car load-path))))


(autoload 'aggressive-fill-paragraph-mode "aggressive-fill-paragraph" "\
Toggle automatic paragraph fill when spaces are inserted in comments.

\(fn &optional ARG)" t nil)

(autoload 'afp-setup-recommended-hooks "aggressive-fill-paragraph" "\
Install hooks to enable function ‘aggressive-fill-paragraph-mode’ in recommended major modes.

\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/ag-20201031.2202/ag-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/ag-20201031.2202/ag-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/ag-20201031.2202/ag-autoloads.el") (car load-path))))



(autoload 'ag "ag" "\
Search using ag in a given DIRECTORY for a given literal search STRING,
with STRING defaulting to the symbol under point.

If called with a prefix, prompts for flags to pass to ag.

\(fn STRING DIRECTORY)" t nil)

(autoload 'ag-files "ag" "\
Search using ag in a given DIRECTORY for a given literal search STRING,
limited to files that match FILE-TYPE. STRING defaults to the
symbol under point.

If called with a prefix, prompts for flags to pass to ag.

\(fn STRING FILE-TYPE DIRECTORY)" t nil)

(autoload 'ag-regexp "ag" "\
Search using ag in a given directory for a given regexp.
The regexp should be in PCRE syntax, not Emacs regexp syntax.

If called with a prefix, prompts for flags to pass to ag.

\(fn STRING DIRECTORY)" t nil)

(autoload 'ag-project "ag" "\
Guess the root of the current project and search it with ag
for the given literal search STRING.

If called with a prefix, prompts for flags to pass to ag.

\(fn STRING)" t nil)

(autoload 'ag-project-files "ag" "\
Search using ag for a given literal search STRING,
limited to files that match FILE-TYPE. STRING defaults to the
symbol under point.

If called with a prefix, prompts for flags to pass to ag.

\(fn STRING FILE-TYPE)" t nil)

(autoload 'ag-project-regexp "ag" "\
Guess the root of the current project and search it with ag
for the given regexp. The regexp should be in PCRE syntax, not
Emacs regexp syntax.

If called with a prefix, prompts for flags to pass to ag.

\(fn REGEXP)" t nil)

(defalias 'ag-project-at-point 'ag-project)

(defalias 'ag-regexp-project-at-point 'ag-project-regexp)

(autoload 'ag-dired "ag" "\
Recursively find files in DIR matching literal search STRING.

The PATTERN is matched against the full path to the file, not
only against the file name.

The results are presented as a `dired-mode' buffer with
`default-directory' being DIR.

See also `ag-dired-regexp'.

\(fn DIR STRING)" t nil)

(autoload 'ag-dired-regexp "ag" "\
Recursively find files in DIR matching REGEXP.
REGEXP should be in PCRE syntax, not Emacs regexp syntax.

The REGEXP is matched against the full path to the file, not
only against the file name.

Results are presented as a `dired-mode' buffer with
`default-directory' being DIR.

See also `find-dired'.

\(fn DIR REGEXP)" t nil)

(autoload 'ag-project-dired "ag" "\
Recursively find files in current project matching PATTERN.

See also `ag-dired'.

\(fn PATTERN)" t nil)

(autoload 'ag-project-dired-regexp "ag" "\
Recursively find files in current project matching REGEXP.

See also `ag-dired-regexp'.

\(fn REGEXP)" t nil)

(autoload 'ag-kill-buffers "ag" "\
Kill all `ag-mode' buffers." t nil)

(autoload 'ag-kill-other-buffers "ag" "\
Kill all `ag-mode' buffers other than the current buffer." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "ag" '("ag-" "ag/")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/add-hooks-20171217.123/add-hooks-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/add-hooks-20171217.123/add-hooks-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/add-hooks-20171217.123/add-hooks-autoloads.el") (car load-path))))


(autoload 'add-hooks-pair "add-hooks" "\
Call `add-hook' for each combined pair of items in HOOKS and FUNCTIONS.

HOOKS can be a symbol or a list of symbols representing hook
variables (the `-hook' suffix is implied).  FUNCTIONS can be a
symbol, a lambda, or a list of either representing hook
functions.  If lists are used, a function can be added to
multiple hooks and/or multiple functions can be added to a hook.

Example:

  ELISP> (add-hooks-pair '(css-mode sgml-mode) 'emmet-mode)
  nil
  ELISP> css-mode-hook
  (emmet-mode)
  ELISP> sgml-mode-hook
  (emmet-mode)

\(fn HOOKS FUNCTIONS)" nil nil)

(autoload 'add-hooks "add-hooks" "\
Call `add-hooks-pair' on each cons pair in PAIRS.

Each pair has a `car' for setting hooks and a `cdr' for setting
functions to add to those hooks.  Pair values are passed to the
HOOKS and FUNCTIONS arguments of `add-hooks-pair', respectively.

Usage:

  (add-hooks ((HOOKS . FUNCTIONS)...))

Example:

  ELISP> (add-hooks '(((css-mode sgml-mode) . emmet-mode)))
  nil
  ELISP> css-mode-hook
  (emmet-mode)
  ELISP> sgml-mode-hook
  (emmet-mode)

\(fn PAIRS)" nil nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/activity-watch-mode-20220111.1121/activity-watch-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/activity-watch-mode-20220111.1121/activity-watch-mode-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/activity-watch-mode-20220111.1121/activity-watch-mode-autoloads.el") (car load-path))))



(autoload 'activity-watch-refresh-project-name "activity-watch-mode" "\
Recompute the name of the project for the current file." t nil)

(autoload 'activity-watch-mode "activity-watch-mode" "\
Toggle Activity-Watch (Activity-Watch mode).

This is a minor mode.  If called interactively, toggle the
`activity-watch mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `activity-watch-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

\(fn &optional ARG)" t nil)

(put 'global-activity-watch-mode 'globalized-minor-mode t)

(defvar global-activity-watch-mode nil "\
Non-nil if Global Activity-Watch mode is enabled.
See the `global-activity-watch-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-activity-watch-mode'.")

(custom-autoload 'global-activity-watch-mode "activity-watch-mode" nil)

(autoload 'global-activity-watch-mode "activity-watch-mode" "\
Toggle Activity-Watch mode in all buffers.
With prefix ARG, enable Global Activity-Watch mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Activity-Watch mode is enabled in all buffers where `(lambda nil
\(activity-watch-mode 1))' would do it.

See `activity-watch-mode' for more information on Activity-Watch mode.

\(fn &optional ARG)" t nil)

(register-definition-prefixes "activity-watch-mode" '("activity-watch-"))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/ace-jump-mode-20140616.815/ace-jump-mode-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/ace-jump-mode-20140616.815/ace-jump-mode-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/ace-jump-mode-20140616.815/ace-jump-mode-autoloads.el") (car load-path))))


(autoload 'ace-jump-mode-pop-mark "ace-jump-mode" "\
Pop up a postion from `ace-jump-mode-mark-ring', and jump back to that position

\(fn)" t nil)

(autoload 'ace-jump-char-mode "ace-jump-mode" "\
AceJump char mode

\(fn QUERY-CHAR)" t nil)

(autoload 'ace-jump-word-mode "ace-jump-mode" "\
AceJump word mode.
You can set `ace-jump-word-mode-use-query-char' to nil to prevent
asking for a head char, that will mark all the word in current
buffer.

\(fn HEAD-CHAR)" t nil)

(autoload 'ace-jump-line-mode "ace-jump-mode" "\
AceJump line mode.
Marked each no empty line and move there

\(fn)" t nil)

(autoload 'ace-jump-mode "ace-jump-mode" "\
AceJump mode is a minor mode for you to quick jump to a
position in the curret view.
   There is three submode now:
     `ace-jump-char-mode'
     `ace-jump-word-mode'
     `ace-jump-line-mode'

You can specify the sequence about which mode should enter
by customize `ace-jump-mode-submode-list'.

If you do not want to query char for word mode, you can change
`ace-jump-word-mode-use-query-char' to nil.

If you don't like the default move keys, you can change it by
setting `ace-jump-mode-move-keys'.

You can constrol whether use the case sensitive via
`ace-jump-mode-case-fold'.

\(fn &optional PREFIX)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/accent-20220202.1312/accent-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/accent-20220202.1312/accent-autoloads.el"))

(add-to-list 'load-path (directory-file-name
                         (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/accent-20220202.1312/accent-autoloads.el") (car load-path))))



(autoload 'accent-menu "accent" "\
Display a popup menu with available accents if current character is matching." t nil)

(if (fboundp 'register-definition-prefixes) (register-definition-prefixes "accent" '("accent-")))


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/ac-slime-20171027.2100/ac-slime-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/ac-slime-20171027.2100/ac-slime-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/ac-slime-20171027.2100/ac-slime-autoloads.el") (car load-path))))


(defface ac-slime-menu-face '((t (:inherit ac-candidate-face))) "\
Face for slime candidate menu." :group (quote auto-complete))

(defface ac-slime-selection-face '((t (:inherit ac-selection-face))) "\
Face for the slime selected candidate." :group (quote auto-complete))

(defvar ac-source-slime-fuzzy '((init . ac-slime-init) (candidates . ac-source-slime-fuzzy-candidates) (candidate-face . ac-slime-menu-face) (selection-face . ac-slime-selection-face) (prefix . slime-symbol-start-pos) (symbol . "l") (match lambda (prefix candidates) candidates) (document . ac-slime-documentation)) "\
Source for fuzzy slime completion.")

(defvar ac-source-slime-simple '((init . ac-slime-init) (candidates . ac-source-slime-simple-candidates) (candidate-face . ac-slime-menu-face) (selection-face . ac-slime-selection-face) (prefix . slime-symbol-start-pos) (symbol . "l") (document . ac-slime-documentation) (match . ac-source-slime-case-correcting-completions)) "\
Source for slime completion.")

(autoload 'set-up-slime-ac "ac-slime" "\
Add an optionally FUZZY slime completion source to `ac-sources'.

\(fn &optional FUZZY)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/ac-html-csswatcher-20151208.2113/ac-html-csswatcher-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/ac-html-csswatcher-20151208.2113/ac-html-csswatcher-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/ac-html-csswatcher-20151208.2113/ac-html-csswatcher-autoloads.el") (car load-path))))


(autoload 'ac-html-csswatcher-refresh "ac-html-csswatcher" "\
Interactive version of `ac-html-csswatcher-setup-html-stuff-async' with nice name.

Refresh csswatcher.

\(fn)" t nil)

(defalias 'company-web-csswatcher-refresh 'ac-html-csswatcher-refresh)

(autoload 'ac-html-csswatcher+ "ac-html-csswatcher" "\
Enable csswatcher for this buffer, csswatcher called after each current buffer save.
`ac-html-csswatcher+' automatically added to mode hook when you `ac-html-csswatcher-setup'.

\(fn)" t nil)

(defalias 'company-web-csswatcher+ 'ac-html-csswatcher+)

(autoload 'ac-html-csswatcher-setup "ac-html-csswatcher" "\
1. Enable for web, html, haml etc hooks `ac-html-csswatcher+'

2. Setup `after-save-hook' for CSS modes.
Currently we suport only `css-mode' and `less-mode', but later style, sass, scsc etc will be included
when `csswatcher' support them.

\(fn)" nil nil)

(defalias 'company-web-csswatcher-setup 'ac-html-csswatcher-setup)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/ac-html-20151005.731/ac-html-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/ac-html-20151005.731/ac-html-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/ac-html-20151005.731/ac-html-autoloads.el") (car load-path))))


(autoload 'ac-html-define-data-provider "ac-html-core" "\
Define ac-html data provider with this macro.
This macro is buggy and cannot be used now.

\(fn PROVIDER &rest PAIRS)" nil t)

(function-put 'ac-html-define-data-provider 'lisp-indent-function '1)

(autoload 'ac-html-enable-data-provider "ac-html-core" "\
Enable data provider PROVIDER.

\(fn PROVIDER)" nil nil)

(autoload 'ac-html-define-ac-source "ac-html-core" "\
Define ac-html lang with this macro.

\(fn LANG &rest PAIRS)" nil t)

(function-put 'ac-html-define-ac-source 'lisp-indent-function '1)




)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/ac-emmet-20131015.1558/ac-emmet-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/ac-emmet-20131015.1558/ac-emmet-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/ac-emmet-20131015.1558/ac-emmet-autoloads.el") (car load-path))))


(defface ac-emmet-candidate-face '((t (:inherit ac-candidate-face))) "\
Face for emmet candidates." :group (quote auto-complete))

(defface ac-emmet-selection-face '((t (:inherit ac-selection-face))) "\
Face for the emmet selected candidate." :group (quote auto-complete))

(defconst ac-emmet-source-defaults '((candidate-face . ac-emmet-candidate-face) (selection-face . ac-emmet-selection-face) (symbol . "a") (requires . 1) (action lambda nil (call-interactively 'emmet-expand-line))) "\
Defaults common to the various completion sources.")

(defvar ac-source-emmet-html-snippets (append '((candidates . ac-emmet-html-snippets-keys) (document lambda (s) (ac-emmet-document s ac-emmet-html-snippets-hash))) ac-emmet-source-defaults) "\
Auto-complete source for emmet-mode's html snippet completion.")

(defvar ac-source-emmet-html-aliases (append '((candidates . ac-emmet-html-aliases-keys) (document lambda (s) (ac-emmet-document s ac-emmet-html-aliases-hash))) ac-emmet-source-defaults) "\
Auto-complete source for emmet-mode's html alias completion.")

(defvar ac-source-emmet-css-snippets (append '((candidates . ac-emmet-css-snippets-keys) (document lambda (s) (ac-emmet-document s ac-emmet-css-snippets-hash))) ac-emmet-source-defaults) "\
Auto-complete source for emmet-mode's css snippet completion.")

(autoload 'ac-emmet-html-setup "ac-emmet" "\
Add the emmet-mode's html completion source to the front of `ac-sources'.
This affects only the current buffer.

\(fn)" t nil)

(autoload 'ac-emmet-css-setup "ac-emmet" "\
Add the emmet-mode's css completion source to the front of `ac-sources'.
This affects only the current buffer.

\(fn)" t nil)


)
(let ((load-true-file-name "/Users/neagleson/.emacs.d/elpa/ac-capf-20151101.217/ac-capf-autoloads.el")(load-file-name "/Users/neagleson/.emacs.d/elpa/ac-capf-20151101.217/ac-capf-autoloads.el"))
(add-to-list 'load-path (directory-file-name (or (file-name-directory "/Users/neagleson/.emacs.d/elpa/ac-capf-20151101.217/ac-capf-autoloads.el") (car load-path))))


(autoload 'ac-capf-setup "ac-capf" "\
Add `ac-source-capf' to `ac-sources' and enable `auto-complete' mode

\(fn)" t nil)


)
(setq package-activated-list
      (append
       '(zoutline yasnippet yaml-mode yaml xterm-color xref visual-fill-column writeroom-mode with-shell-interpreter compat with-editor websocket web-mode web-mode-edit-element web-completion-data vterm dash s virtualenvwrapper vcard popup vc-msg uuidgen bind-key use-package unicode-troll-stopper queue undo-tree tzc typescript-mode tsc ts tron-legacy-theme treepy avy ace-window pfuture lv hydra ht posframe cfrs treemacs tree-sitter tree-sitter-langs tree-sitter-ispell tree-sitter-indent tree-mode transient toggle-quotes todotxt epl pkg-info flycheck tide textsize tern auto-complete tern-auto-complete term-manager projectile term-projectile tea-time tagedit tablist synosaurus iedit ivy swiper lispy paredit goto-chg evil smartparens evil-cleverparens evil-surround symex sublimity list-utils string-utils string-inflection string-edit f standard-dirs spinner speed-type solarized-theme smex smart-tabs-mode macrostep slime simple-httpd js2-mode skewer-mode skewer-reload-stylesheets request skerrick sidecar-locals sicp shut-up show-eol reformatter shfmt shell-pop sexp-diff sesman edit-indirect separedit scss-mode quick-peek scrollable-quick-peek scratch-comment sane-term rjsx-mode rfc-mode reveal-in-osx-finder reveal-in-folder regex-tool rainbow-mode racket-mode qrencode pyvenv pyvenv-auto pythonic python-mode deferred python-environment pyimpsort pyenv-mode puppet-mode php-runtime psysh project-shells prog-fill pretty-hydra iter2 nvm prettier pos-tip popwin polymode ansible ansible-doc jinja2-mode poly-ansible pip-requirements php-mode phpstan pdf-tools pcre2el parseclj parseedn parse-it pair-tree packed package-lint osx-plist osm origami csharp-mode omnisharp notmuch notmuch-transient notmuch-addr nodejs-repl nixpkgs-fmt nixos-options nix-update nix-sandbox magit-section nix-mode nix-env-install nix-buffer nginx-mode network-watch neotree names multiple-cursors multi-term moody monkeytype eval-in-repl modern-sh mocha-snippets minimap message-attachment-reminder md-readme markdown-mode markdown-changelog friendly-shell-command magrant git-commit magit magit-svn magit-popup magit-patch-changelog magit-delta lua-mode lsp-mode lsp-ui lsp-treemacs lsp-origami lsp-latex bui dap-mode lsp-java lsp-ivy lorem-ipsum load-env-vars coffee-mode literate-coffee-mode less-css-mode ledger-mode language-id know-your-http-well khalel key-chord key-assist jsonian json-snatcher json-reformat json-mode jscs js2-refactor js-doc js-auto-format-mode jq-mode concurrent ctable epc jedi-core jedi iss-mode insert-char-preview inline-docs inheritenv inform7 htmlize elisp-refs helpful haskell-mode groovy-mode graphql goto-line-preview go-mode gnuplot-mode gnuplot ghub a github-review git git-walktree git-timemachine git-modes git-link git-gutter+ fringe-helper git-gutter-fringe+ git-gutter git-blamed geiser add-node-modules-path company frontside-javascript free-keys format-all emacsql emacsql-sqlite closql forge focus-autosave-mode flymake-phpstan flymake-markdownlint flycheck-phpstan flycheck-package flycheck-objc-clang flycheck-css-colorguard flow-minor-mode flow-js2-mode fill-column-indicator faceup expand-region exec-path-from-shell exato evil-tutor evil-textobj-tree-sitter evil-matchit evil-ledger evil-leader evil-indent-textobject evil-exchange evil-commentary annalist evil-collection evil-args esup eslint-disable-rule eping envrc emojify emmet-mode elpygen elpl elisp-slime-nav elisp-depmap elisp-def elfeed elfeed-summary eldoc-overlay el2markdown editorconfig edebug-inline-result edbi dynamic-spaces dtrt-indent dotenv-mode direnv diminish diffview demap deadgrep dash-functional cycle-quotes csv-mode csv crontab-mode cquery counsel counsel-projectile counsel-ag-popup corfu corfu-doc compact-docstrings code-review clojure-mode cider centered-cursor-mode cask-mode buttercup bug-hunter bufler buffer-env browse-url-dwim browse-kill-ring bnf-mode bicycle beacon bats-mode backup-walker auto-rename-tag auto-minor-mode auto-compile atomic-chrome async-backup async apples-mode apache-mode anzu aio aggressive-indent aggressive-fill-paragraph ag add-hooks activity-watch-mode ace-jump-mode accent ac-slime ac-html-csswatcher ac-html ac-emmet ac-capf)
       package-activated-list))
(progn
  (require 'info)
  (info-initialize)
  (setq Info-directory-list
        (append
         '("/Users/neagleson/.emacs.d/elpa/bnf-mode-20200323.1348" "/Users/neagleson/.emacs.d/elpa/bufler-20210907.1145" "/Users/neagleson/.emacs.d/elpa/corfu-0.20" "/Users/neagleson/.emacs.d/elpa/editorconfig-20220301.332" "/Users/neagleson/.emacs.d/elpa/eping-20201027.2149" "/Users/neagleson/.emacs.d/elpa/annalist-20190929.207" "/Users/neagleson/.emacs.d/elpa/forge-20220406.1227" "/Users/neagleson/.emacs.d/elpa/company-20220328.155" "/Users/neagleson/.emacs.d/elpa/geiser-20220327.2323" "/Users/neagleson/.emacs.d/elpa/ghub-20220403.1248" "/Users/neagleson/.emacs.d/elpa/haskell-mode-20220331.1645" "/Users/neagleson/.emacs.d/elpa/ledger-mode-20220307.854" "/Users/neagleson/.emacs.d/elpa/magit-popup-20200719.1015" "/Users/neagleson/.emacs.d/elpa/magit-20220331.2308" "/Users/neagleson/.emacs.d/elpa/magit-section-20220329.1154" "/Users/neagleson/.emacs.d/elpa/prettier-20211018.955" "/Users/neagleson/.emacs.d/elpa/racket-mode-20220405.1747" "/Users/neagleson/.emacs.d/elpa/sicp-20200512.1137" "/Users/neagleson/.emacs.d/elpa/slime-20220712.817" "/Users/neagleson/.emacs.d/elpa/evil-20220705.1432" "/Users/neagleson/.emacs.d/elpa/ivy-20220529.1130" "/Users/neagleson/.emacs.d/elpa/transient-20210616.2222" "/Users/neagleson/.emacs.d/elpa/use-package-20210207.1926" "/Users/neagleson/.emacs.d/elpa/dash-20210609.1330" "/Users/neagleson/.emacs.d/elpa/with-editor-20220608.1017" "/Users/neagleson/.emacs.d/elpa/compat-28.1.1.3" "/Users/neagleson/.emacs.d/elpa/writeroom-mode-20220426.2046")
         Info-directory-list)))

;; Local Variables:
;; version-control: never
;; no-update-autoloads: t
;; End:
