-Get ac-isearch working when auto-completion is active. I think my
 global-set-key of C-s to regex searching currently overrides it.

-Get multi-term keybindings up and running. I'd like s-[ and s-] to turn on a
 max-width terminal if it's not on, and to move to 'prev' and 'next' terms if
 it is.

-Write a general-case ac-source for Tern.js. Right now I have to press M-Tab to
 trigger top-level completions, and I'd like to just press Tab. emacs-eclim
 might be a good place to rip off the basic idea from, since it depends on an
 external process to get completions, or jedi. I think if I had this I could
 get JS completions in web-mode, which would be awesome.

-Teach Tern.js that auto-complete on dot shouldn't happen in comments.

-Extract jedi-force to be an ELPA package. I was thinking of adding more
 features, but it might be fine as it is.

-Add php-auto-yasnippet-style function params to tern.js.

-Add transpose operator/command to evil. I just want to be able to swap various
 text objects/motions cleanly - something like 't{' rather than 'd{}P'.

-Report bug on autoloading evil-nerd-commenter, particularly with
 evil-local-mode.

-Integrate what's useful from spacemacs: https://github.com/syl20bnr/spacemacs
 evil-little-word, evil-operator-comment, some clever keybinding ideas
 (probably want them under <leader>, though).

-Try <spacebar> as leader key. That way either hand can trigger it.

-Refactor my autoloading mode setup to rely on use-package, which looks to do
 things the way I like except much cleaner, and should let me autoload my
 ad-hoc libraries much more cleanly.
 https://github.com/jwiegley/use-package

-Finish getting tagedit to work with web-mode.

-Make comment auto-fill work with C++-style comments in js2-mode, not just
 C-style. Turns out it does - it's just that js2-mode thinks single-line
 comments are only block comments if there's a trailing single-line comment.

-Figure out why mo-git-blame isn't using mo-git-blame-git-blame-args.

-Since Emacs doesn't really use Command key sequences, I should use it as the
 Super key and start using Super for personal keybindings. Should be faster
 than C-c <key>.

-Tweak md-readme.el so that author/created/requires lines are headers *without*
 colons, whose bodies are the text following the colon-delimited field names.

-File feature request to flycheck for being able to run checkers while in
 web-mode. May well get rejected, because supporting this would be pretty hard.

-Find a way to auto-include skewer on page refresh without having to include it
 in a codebase. I'm thinking a Chrome plugin for "refresh and load
 bookmarklet", or something along those lines.

-Find a way to load skewer in Chrome from an HTTPS page. Starting Chrome with
 the --allow-insecure-content flag might work, but I don't see how to test that
 on Windows. It sure would be annoying if I couldn't solve this.

-I'd like yasnippets for JavaScript. I don't much like the defaults.

-Report and/or fix yasnippet issue where loading js2-mode's snippets doesn't
 load its parent-mode's snippets.

-Find a better CSS mode. Ideally something that supports SCSS, probably. Maybe
 https://github.com/antonj/scss-mode. Actually, I just saw someone suggest
 using web-mode for CSS, and it occurs to me that might actually work out okay
 (though probably not if I start using SCSS).

-Figure out how to make smartparens interact nicely with web-mode. '{{' and
 '{%' don't work right when both are on, but I don't see a way to ban
 multi-character sequences from smartparens, and I don't want to lose pairing
 braces in CSS and JS.

-Add keybindings for scrolling completion window by a full window-ful. C-v and
 M-v are the obvious ones. Useful when you're digging through something like wx
 or the JDK looking for a class that might apply.

-Make a PR to auto-complete for supporting smart-dash-mode.

-Add a workaround to web-mode-init so smart-dash-mode knows when we're in a
 comment.

-Make a PR to yasnippet for my solution to the 'once' snippet overriding the
 'require_once' snippet.

-Find a workaround that will let me use auto-complete in a yasnippet tab field.
 A keybinding other than Tab for auto-complete would work, but it might be
 possible to bind something clever to Tab that picks which maneuver to do based
 on whether there are any characters before point *and* whether autocompletion
 has been invoked before while in this field. or something like that.

-I would like an auto-complete source for existing files that is based on a
 per-project 'docroot/static' variable. I would like that source to be
 activated when I am working in a template and have entered an href="/..." or a
 src="/...". Actually, it might work better if it was just activated for any
 string beginning with '/'. Some hints:
 http://superuser.com/questions/67170/how-do-i-complete-file-paths-in-emacs

-See if my Emacs crashes can be reproduced by leaving old byte-compiled files
 on my load-path alongside newer versions of the same file, a la updating a
 library from MELPA then pulling that down to a different clone of the repo. It
 occurred to me today that my current setup does this, and it seems like a
 candidate for crashiness. I have a lot fewer crashes now, but still get one
 every few weeks, I'd say.

-Add an after-revert-hook to reload helm-git-file's cache for any containing
 repo if necessary. Seems like this should be a simple thing to do, though if
 you have a lot of buffers open from that repo it might get expensive... Think
 about this, anyway.

-Make my helm-git-files setup match each chunk match against the whole path
 in the repo. It currently seems to treat them as one big regex..

-Look into find-file-in-repository as an alternative to my git-ls-files helm
 plugin, since it handles repos other than git.
 http://melpa.milkbox.net/#/find-file-in-repository

-Add a command to backup-walker to revert to the selected backup file. 'r'
 would be a good keybinding.

-Add a command to backup-walker to ediff against the current file.

-Generate autoloads for my mode configs (and other code I've hacked up myself)
 from autoload cookie comments, rather than maintaining them manually. Might
 fit well into my commit hook setup?

-As a simple exercise to start learning macros, try implementing PHP's
 "defaulting" ternary operator behavior. The example I emailed myself was
 (setq (default (= 3 foo) 5)), where 'default' is the macro, presumably.

-kill-ring-search could come in handy occasionally.
 http://nschum.de/src/emacs/kill-ring-search/

-If I ever start using multiple windows more seriously, window-numbering-mode
 might be handy. http://nschum.de/src/emacs/window-numbering-mode/

-Get PHP tags working well. After months of finding nothing that really worked,
 I got an email from a random netizen pointing me to pfff, a tool Facebook
 wrote in OCaml for analyzing php. You can compile stags from it, a command for
 making vim or emacs tagfiles. Try it out at work and see how it does. If it
 can tag everything relatively quickly, it might be worth a private githook or
 three to rebuild the TAGS file and tell Emacs "reload this tags file!" when
 it's done. A really clever monkey might even hack up a Frankenstein
 auto-completion rig cross-breeding tag completion with php-auto-yasnippet.

-Look into emacs-eclim for intelligent PHP support. Might take some elisp
 hacking, but I think that's all it would take, apart from installing Eclipse
 bits. https://github.com/senny/emacs-eclim

-Research PHP parsing tools/infrastructure that might be adapted to an Emacs
 plugin for code comprehension/refactoring/etc. If eclim works out, I might not
 need anything else.

-If I ever have to go back to programming Java, try using emacs-eclim for
 auto-complete and jump-to-def. It should let me stay in Emacs while getting
 Eclipse's most useful features.

-php-mode should not move sigils when swapping words with M-t.
 $this_thing => thing_$this is not what we want.

-It would be really sweet to get yasnippet's bracket placement to do the Right
 Thing based on major-mode, placing them on the newline or on the same line
 intelligently. I'm guessing that can be achieved by applying elisp to the
 templates. This was inspired by making changes to the php-mode snippets to do
 bracket placement the way I like. Someone's done some work that was approved
 of by another guy on the yasnippet blog, and they've said any extensions would
 not be accepted into yasnippet:
 http://comments.gmane.org/gmane.emacs.yasnippet.devel/403

-The PHP function/method snippets should have a header comment by default. For
 every parameter you add, an @param line should be inserted in the header
 comment.

-Similarly, bash snippets would be nice:
 https://github.com/bmaland/yasnippet-sh-mode

-I should have Twig/Django snippets. 'block' is the obvious one, but probably
 snippets for all the major bits of syntax would be handy, and someone out
 there must have written such things.

-Write/get a PHP snippet for array keyval. '$keyâ€™ => $val,

-Write/get a PHP snippet for constructors. Really, this should just be a part
 of a class snippet. The point is that it would save a lot of typing to have
 one in the style of the Python one, especially since args should be
 initialized at the class level.

-My SQL-in-PHP code does not work with queries that are built using
 concatenation, which some do (especially in crappy legacy codebases). See my
 email inbox for examples.

-Debug mmm-mode, php-mode, and sql-mode enough to uncomment my sql-mode
 embedding in php-mode.

-Fix comment filling and comment auto-filling in CSS mode (and web-mode). I
 think it might be an issue in sh-mode too?

-If particularly bored, try getting GEBEN set up for debugging PHP. I'm
 uncertain whether this would actually be worth the effort.

-Next time I have to work against a DB server, install emacs-edbi:
 https://github.com/kiwanami/emacs-edbi
 Looks like it should beat the pants off sql-mode, even if it does depend on
 Perl.

-sql-mode appears to be a far more powerful beast than I had ever really
 appreciated. I should look into setting up and learning the server
 interaction components, which could make my life so much less painful. Of
 particular note is http://www.emacswiki.org/emacs/SqlWithPlaceholders.

-Look into sql-mode-driven autocompletion. It might be useful.

-I would like my sql-mode to do a better job with font-lock. It does very
 poorly at dealing with strings that have backslashed quotes. Could this be
 solved by some regex-tweaking? Scuttlebutt on the net suggests that there's a
 toggleable setting.

-I should enable the rst-mode yasnippets when in rst-mode.

-I'd also like context-sensitive paragraph filling. That is, in comments, my
 fill-column value is 79, but if I'm in a Python docstring, fill-column should
 be 72. Apparently this is fixed in a Jan. 2013 commit to python-mode.el.

-Figure out what the best way to save/restore my Emacs sessions is. Ideally,
 find a solution that lets me save/restore buffer state for a whole directory.

-I'd like to display the current named block in my modeline. So, in Python, if
 I'm editing method foobar of class Testing, my modeline would have 'Block:
 Testing.foobar' in it. Problem is that it could easily extend past the number
 of characters I have available in the modeline; a variable that sets how many
 characters it will use would do the job, though. To do this:
 http://www.masteringemacs.org/articles/2011/11/19/which-function-mode/

-Figure out/steal/write a good cross-file find-and-replace. I can see why so
 many guys just use a Perl one-liner (which I have), but being able to do this
 from inside your editor is pretty convenient, especially if you want to do
 query-replace.

-I'd like some convenient shortcut for 'Move forward one name-delimiter.' For
 instance, in standard Python, '_' separates words inside names. In other
 languages, HumpsOfTheCamelCase do so. Either way, Meta-f and Meta-b include
 in-name words as distinct entities in some modes but not in others, and I'd
 like a sane, consistent way to deal with that sort of cursor movement. ...and
 a few years later, I have learned that subword-mode will let you do this.

-Look into anaconda-mode. It appears to be a wrapper around Jedi that might add
 a bit more intelligence, or something? Popped up in list-packages today.

-Think about whether I should pull ropemode back into python-mode; I never
 really used the refactoring tools, but maybe I should.

-When I'm yanking something into an indented block, python-mode ought to assume
 that I want it indented to that block's depth and adjust the leading
 whitespace for each line accordingly. This applies to indentation in general;
 it might work in most modes, for all I know. With Python, there's the
 perennial problem of no delimiters; it's not necessarily right to go to the
 highest possible indentation on a newline. For yanking, though, I'll bet it's
 the right call most of the time. If it's not, you're just an indent command
 away from having the right depth.

-Frequently, especially when writing prose, I find my fingers doing the dance
 any given editor requires to swap elements in a comma-separated list. Seems
 like that shouldn't require too many keystrokes. I'm sure Emacs can do this
 with a bit of hacking, and maybe it already does...

-It should speak RTF fluently. I don't care so much about fancy formats, as
 those should be converted, but RTF is a pretty convenient format that allows
 you a surprising amount of control without being too crazy. If you're prepping
 stuff for basic printing, or sending to not-hardcore-power-users, RTF works
 beautifully, and I don't see why I should have to leave my main editor for
 working with this stuff. Yes, I know there's enriched-mode, but that's not
 exactly standard for word processors. Oh yeah - there is this, which looks
 pretty unmaintained, but it might be a starting point:
 http://savannah.nongnu.org/projects/emacs-rtf/ A little inspection indicates
 that the author isn't very far, it's probably abandoned, and uselessly
 inefficient. I suspect I'd be best off rolling my own...

-A mode in which English grammatical rules are automatically applied to
 anything that looks like a sentence. For instance, when I refactor a sentence,
 it ought to know that the first word gets capitalized. That might be the only
 thing I actually want, come to think of it...

-I'd really like a code folding minor-mode - just lets you hide/show blocks of
 code, by saying basically "fold at this line" and "unfold at this line".
 I have started playing with hide/show mode, and it's not perfect, but it does
 more or less what I want for now.

-It might be nice to store all byte-compiled files in a single byte-cache
 folder. It's probably not worth much hassle, though, since I have hooks
 generating them and they're gitignored.
