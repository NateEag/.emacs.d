-Add support to skewer-css-mode for reloading a stylesheet from the filesystem
 (and clearing all received CSS snippets), so that even with tangled legacy
 stylesheets, you can work without worrying about precedence rules. Ask to
 reload the current stylesheet, and the following occurs:
     * emacs saves the current stylesheet
     * skewer finds the corresponding link tag, which is the one with the
       longest href that the buffer's filepath ends with.
     * skewer swaps that link tag for a placeholder node
     * skewer removes all css chunks that it has inserted (from that
       stylesheet?)
     * skewer swaps the link tag with the placeholder, thus reloading the
       stylesheet.
 If the link tag can't be found, fall back to inserting it as a style tag.
 You could do the same trick with JS, but it probably wouldn't be very
 useful there.
 N.B.: I have written this, tested it, and made a pull request, but the author
 thinks it may not belong in his repo. I'm trying to figure out how to turn it
 into a package for submission to MELPA. Think I shall call this tiny package
 "skewer-reload-stylesheet".

-Make Tab try yasnippet if there are no autocompletions - having to chord keys
 to trigger yasnippet directly is getting old. relevant links:
 http://truongtx.me/2013/01/06/config-yasnippet-and-autocomplete-on-emacs/

-Figure out how to get Emacs to update ac-yasnippet-sources after refreshing
 snippet definitions.

-Fix yasnippet not expanding fields on the first snippet insertion in a PHP
 buffer.

-Find a way to auto-include skewer on page refresh without having to include it
 in a codebase. I'm thinking a Chrome plugin for "refresh and load
 bookmarklet", or something along those lines.

-Get PHP tags working reliably. Since there is no good PHP tags solution for
 emacs, the best bet is probably using the PHP 5.3 vim tagging solution I found
 in combination with vtags (which, dating from 2006, may not work with Emacs
 24)

-Research PHP parsing tools/infrastructure that might be adapted to an Emacs
 plugin for code comprehension/refactoring/etc.

-Research adapting the PDT infrastructure could be adapted for use in
 Emacs. http://projects.eclipse.org/projects/tools.pdt

-Calling a function mid-if-snippet in php-mode closes the snippet early. It
 seems to be caused by autopair matching the closing parenthesis when I type
 the opening one. See if I can come up with a workaround, or maybe whether the
 other mode I was thinking of trying doesn't have this issue.

-Look into https://github.com/mbunkus/mo-git-blame. Git blame on a file in
 emacs, which could save time.

-Find a workaround that will let me use auto-complete in a yasnippet tab field.
 A keybinding other than Tab for auto-complete would work, but it might be
 possible to bind something clever to Tab that picks which maneuver to do based
 on whether there are any characters before point *and* whether autocompletion
 has been invoked before while in this field. or something like that.

-It would be really sweet to get yasnippet's bracket placement to do the Right
 Thing based on major-mode, placing them on the newline or on the same line
 intelligently. I'm guessing that can be achieved by applying elisp to the
 templates. This was inspired by making changes to the php-mode snippets to do
 bracket placement the way I like. Someone's done some work that was approved
 of by another guy on the yasnippet blog, and they've said any extensions would
 not be accepted into yasnippet:
 http://comments.gmane.org/gmane.emacs.yasnippet.devel/403

-The PHP function/method snippets should have a header comment by default. For
 every parameter you add, an @param line should be inserted in the header
 comment.

-Get ejmr's php-auto-snippets package working, to save me many lookups of
 which order PHP thinks *this* array function's args go in...

-I'd like yasnippets for JavaScript.

-Similarly, bash snippets would be nice:
 https://github.com/bmaland/yasnippet-sh-mode

-Look into binding Shift-Enter to whatever Meta-J is bound to.

-Try smartparens instead of auto-pair-mode, as it appears to perhaps be better: https://github.com/Fuco1/smartparens

-Figure out why auto-pair-mode only works some of the time in php-mode. [], '',
 and () all have been known to exhibit breakage.

-Get smart-dash-mode to be active in web-mode, but _only_ in template
 expressions and JS, since dash is a common delimiter for HTML identifiers like
 IDs and names. That might be tricky.

-Make Tab always complete the next-biggest possible chunk in auto-complete.
 This is probably not too important - I think I've mostly learned to live
 without it.

-Look into adding expand-region. It sounds like it could be pretty handy for
 selecting a range with less typing.
 https://github.com/magnars/expand-region.el

-I should have Twig/Django snippets. 'block' is the obvious one, but probably
 snippets for all the major bits of syntax would be handy, and someone out
 there must have written such things.

-Write/get a PHP snippet for array keyval. '$keyâ€™ => $val,

-Write/get a PHP snippet for constructors. Really, this should just be a part
 of a class snippet. The point is that it would save a lot of typing to have
 one in the style of the Python one, especially since args should be
 initialized at the class level.

-Get flymake to deactivate/reactivate intelligently for the current edited
 line. If your cursor is on a line you have been editing, you probably don't
 want highlights until you save or move to a different line.

-Once moved to Emacs 24, consider replacing flymake with flycheck.

-My SQL-in-PHP code does not work with queries that are built using
 concatenation, which some do (especially in crappy legacy codebases). See my
 email inbox for examples.

-Debug mmm-mode, php-mode, and sql-mode enough to uncomment my sql-mode
 embedding in php-mode.

-Add gitconfig mode. http://www.emacswiki.org/emacs/gitconfig-mode.el

-Find a better CSS mode. Ideally something that supports SCSS, probably. Maybe https://github.com/antonj/scss-mode.

-Fix comment filling and comment auto-filling in CSS mode (and web-mode). I
 think it might be an issue in sh-mode too?

-It would be truly awesome to find a way to get even a semi-reliable list of
 places a particular CSS rule is used. I suppose that's really a more
 appropriate tool for something else.

-when I move to emacs 24, pull in rainbow-mode.

-Get filepath autocompletion working in buffers. Some hints: http://superuser.com/questions/67170/how-do-i-complete-file-paths-in-emacs

-I would like an auto-complete source for existing files that is based on a
 per-project 'docroot/static' variable. I would like that source to be
 activated when I am working in a template and have entered an href="/..." or a
 src="/...". Actually, it might work better if it was just activated for any
 string beginning with '/'.

-Figure out why constants in php-mode display in red if they're followed by a
 dot. Concatenation with constants is perfectly valid syntax.

-If particularly bored, try getting GEBEN set up for debugging PHP. I'm
 uncertain whether this would actually be worth the effort.

-I should probably consider getting a better JS environment going. Having a JS
 interpreter available to me in Emacs could be mighty handy. This page has some
 info on how to get a decent environment up and running:
 http://blog.deadpansincerity.com/2011/05/setting-up-emacs-as-a-javascript-editing-environment-for-fun-and-profit/

-sql-mode appears to be a far more powerful beast than I had ever really
 appreciated. I should look into setting up and learning the server
 interaction components, which could make my life so much less painful. Of
 particular note is http://www.emacswiki.org/emacs/SqlWithPlaceholders.

-Look into sql-mode-driven autocompletion. It might be useful.

-I would like my sql-mode to do a better job with font-lock. It does very
 poorly at dealing with strings that have backslashed quotes. Could this be
 solved by some regex-tweaking? Scuttlebutt on the net suggests that there's a
 toggleable setting.

-I should enable the rst-mode yasnippets when in rst-mode.

-I'd also like context-sensitive paragraph filling. That is, in comments, my
 fill-column value is 79, but if I'm in a Python docstring, fill-column should
 be 72. Apparently this is fixed in a Jan. 2013 commit to python-mode.el.

-Figure out what the best way to save/restore my Emacs sessions is. Ideally,
 find a solution that lets me save/restore buffer state for a whole directory.

-I'd like to display the current named block in my modeline. So, in Python, if
 I'm editing method foobar of class Testing, my modeline would have 'Block:
 Testing.foobar' in it. Problem is that it could easily extend past the number
 of characters I have available in the modeline; a variable that sets how many
 characters it will use would do the job, though. To do this:
 http://www.masteringemacs.org/articles/2011/11/19/which-function-mode/

-I'd like emacs to autodetect the indentation format of a file, and override my
 preference if it doesn't match. There is a mode built to do exactly that, it
 seems:
 http://git.savannah.gnu.org/gitweb/?p=dtrt-indent.git;a=blob_plain;f=dtrt-indent.el;hb=HEAD
 Consider integrating it some year when I have the time.

-Figure out/steal/write a good cross-file find-and-replace. I can see why so
 many guys just use a Perl one-liner (which I have), but being able to do this
 from inside your editor is pretty convenient, especially if you want to do
 query-replace.

-I'd like some convenient shortcut for 'Move forward one name-delimiter.' For
 instance, in standard Python, '_' separates words inside names. In other
 languages, HumpsOfTheCamelCase do so. Either way, Meta-f and Meta-b include
 in-name words as distinct entities in some modes but not in others, and I'd
 like a sane, consistent way to deal with that sort of cursor movement.

-A command that lets you invert delimiters. Sometimes you realize mid-stream
 that you used the wrong ones, and as long as point is between them and there
 are no duplicates, the editor should be able to find the nearest delimiters
 and change them. Now you can keep on cranking.

-Figure out why jedi's jump-to-definition doesn't work until after I've tried
 to autocomplete something.

-Think about whether I should pull ropemode back into python-mode; I never
 really used the refactoring tools, but maybe I should.

-When I'm yanking something into an indented block, python-mode ought to assume
 that I want it indented to that block's depth and adjust the leading
 whitespace for each line accordingly. This applies to indentation in general;
 it might work in most modes, for all I know. With Python, there's the
 perennial problem of no delimiters; it's not necessarily right to go to the
 highest possible indentation on a newline. For yanking, though, I'll bet it's
 the right call most of the time. If it's not, you're just an indent command
 away from having the right depth.

-Frequently, especially when writing prose, I find my fingers doing the dance
 any given editor requires to swap elements in a comma-separated list. Seems
 like that shouldn't require too many keystrokes. I'm sure Emacs can do this
 with a bit of hacking, and maybe it already does...

-It should speak RTF fluently. I don't care so much about fancy formats, as
 those should be converted, but RTF is a pretty convenient format that allows
 you a surprising amount of control without being too crazy. If you're prepping
 stuff for basic printing, or sending to not-hardcore-power-users, RTF works
 beautifully, and I don't see why I should have to leave my main editor for
 working with this stuff. Yes, I know there's enriched-mode, but that's not
 exactly standard for word processors. Oh yeah - there is this, which looks
 pretty unmaintained, but it might be a starting point:
 http://savannah.nongnu.org/projects/emacs-rtf/ A little inspection indicates
 that the author isn't very far, it's probably abandoned, and uselessly
 inefficient. I suspect I'd be best off rolling my own...

-A mode in which English grammatical rules are automatically applied to
 anything that looks like a sentence. For instance, when I refactor a sentence,
 it ought to know that the first word gets capitalized. That might be the only
 thing I actually want, come to think of it...

-I'd really like a code folding minor-mode - just lets you hide/show blocks of
 code, by saying basically "fold at this line" and "unfold at this line".
 I have started playing with hide/show mode, and it's not perfect, but it does
 more or less what I want for now.
